<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>LinuxSre云原生 • Posts by &#34;rabbitmq&#34; category</title>
        <link>http://ixuyong.cn</link>
        <description>专注于 Linux 运维、云计算、云原⽣等技术</description>
        <language>zh-CN</language>
        <pubDate>Thu, 29 May 2025 20:48:49 +0800</pubDate>
        <lastBuildDate>Thu, 29 May 2025 20:48:49 +0800</lastBuildDate>
        <category>Aliyun</category>
        <category>DevOps</category>
        <category>ELKStack</category>
        <category>Docker</category>
        <category>Harbor</category>
        <category>MySQL</category>
        <category>Linux</category>
        <category>rsync</category>
        <category>Kubernetes</category>
        <category>Redis</category>
        <category>Openvpn</category>
        <category>Prometheus</category>
        <category>Rabbitmq</category>
        <category>Windows</category>
        <category>Tomcat</category>
        <item>
            <guid isPermalink="true">http://ixuyong.cn/posts/1384812626.html</guid>
            <title>Kubenetes部署Rabbitmq集群</title>
            <link>http://ixuyong.cn/posts/1384812626.html</link>
            <category>Rabbitmq</category>
            <pubDate>Thu, 29 May 2025 20:48:49 +0800</pubDate>
            <description><![CDATA[ &lt;h3 id=&#34;kubenetes部署rabbitmq集群&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#kubenetes部署rabbitmq集群&#34;&gt;#&lt;/a&gt; Kubenetes 部署 Rabbitmq 集群&lt;/h3&gt;
&lt;h6 id=&#34;1-创建rbac权限&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-创建rbac权限&#34;&gt;#&lt;/a&gt; 1. 创建 RBAC 权限&lt;/h6&gt;
&lt;pre&gt;&lt;code&gt;# cat 01-rabbitmq-rbac.yaml 
apiVersion: v1
kind: ServiceAccount
metadata:
  name: rabbitmq-cluster
  namespace: prod
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: rabbitmq-cluster
  namespace: prod
rules:
- apiGroups: [&amp;quot;&amp;quot;]
  resources: [&amp;quot;endpoints&amp;quot;]
  verbs: [&amp;quot;get&amp;quot;]
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: rabbitmq-cluster
  namespace: prod
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: rabbitmq-cluster
subjects:
- kind: ServiceAccount
  name: rabbitmq-cluster
  namespace: prod
&lt;/code&gt;&lt;/pre&gt;
&lt;h6 id=&#34;2-创建集群的secret&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-创建集群的secret&#34;&gt;#&lt;/a&gt; 2. 创建集群的 Secret&lt;/h6&gt;
&lt;pre&gt;&lt;code&gt;# cat 02-rabbitmq-secret.yaml 
apiVersion: v1
kind: Secret
metadata:
  name: rabbitmq-secret
  namespace: prod
stringData:
  password: talent
  url: amqp://RABBITMQ_USER:RABBITMQ_PASS@rmq-cluster-balancer
  username: superman
type: Opaque
&lt;/code&gt;&lt;/pre&gt;
&lt;h6 id=&#34;3-创建configmap&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-创建configmap&#34;&gt;#&lt;/a&gt; 3. 创建 ConfigMap&lt;/h6&gt;
&lt;pre&gt;&lt;code&gt;# cat 03-rabbitmq-cm.yaml 
apiVersion: v1
kind: ConfigMap
metadata:
  name: rabbitmq-cluster-config
  namespace: prod
  labels:
    addonmanager.kubernetes.io/mode: Reconcile
data:
    enabled_plugins: |
      [rabbitmq_management,rabbitmq_peer_discovery_k8s].
    rabbitmq.conf: |
      loopback_users.guest = false
      default_user = RABBITMQ_USER
      default_pass = RABBITMQ_PASS
      ## Cluster 
      cluster_formation.peer_discovery_backend = rabbit_peer_discovery_k8s
      cluster_formation.k8s.host = kubernetes.default.svc
      #cluster_formation.k8s.host = kubernetes.default.svc.cluster.local
      cluster_formation.k8s.address_type = hostname
      #################################################
      # prod is rabbitmq-cluster&#39;s namespace#
      #################################################
      cluster_formation.k8s.hostname_suffix = .rabbitmq-cluster.prod.svc.cluster.local
      cluster_formation.node_cleanup.interval = 30
      cluster_formation.node_cleanup.only_log_warning = true
      cluster_partition_handling = autoheal
      ## queue master locator
      queue_master_locator = min-masters
      cluster_formation.randomized_startup_delay_range.min = 0
      cluster_formation.randomized_startup_delay_range.max = 2
      # memory
      vm_memory_high_watermark.absolute = 100MB
      # disk
      disk_free_limit.absolute = 2GB
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;注：配置文件 cluster_formation.k8s.host 设置为 kubernetes.default.svc.cluster.local，然后就是各种连不上，后来换上 kubernetes.default.svc 就可以了，不知道是不是 k8s 新版本的问题。&lt;/em&gt;&lt;/p&gt;
&lt;h6 id=&#34;4-创建集群的svc&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4-创建集群的svc&#34;&gt;#&lt;/a&gt; 4. 创建集群的 svc&lt;/h6&gt;
&lt;pre&gt;&lt;code&gt;# cat 04-rabbitmq-cluster-svc.yaml 
apiVersion: v1
kind: Service
metadata:
  labels:
    app: rabbitmq-cluster
  name: rabbitmq-cluster
  namespace: prod
spec:
  clusterIP: None
  ports:
  - name: rmqport
    port: 5672
    targetPort: 5672
  - name: http
    port: 15672
    protocol: TCP
    targetPort: 15672
  selector:
    app: rabbitmq-cluster
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: rabbitmq-cluster-balancer
  name: rabbitmq-cluster-balancer
  namespace: prod
spec:
  ports:
  - name: rmqport
    port: 5672
    targetPort: 5672
  - name: http
    port: 15672
    protocol: TCP
    targetPort: 15672
  selector:
    app: rabbitmq-cluster
  type: NodePort
&lt;/code&gt;&lt;/pre&gt;
&lt;h6 id=&#34;5-创建statefulset&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5-创建statefulset&#34;&gt;#&lt;/a&gt; 5. 创建 StatefulSet&lt;/h6&gt;
&lt;pre&gt;&lt;code&gt;# cat 05-rabbitmq-cluster-sts.yaml 
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: rabbitmq-cluster
  name: rabbitmq-cluster
  namespace: prod
spec:
  replicas: 3
  selector:
    matchLabels:
      app: rabbitmq-cluster
  serviceName: rabbitmq-cluster
  template:
    metadata:
      labels:
        app: rabbitmq-cluster
    spec:
      affinity:                                                 # 避免Pod运行到同一个节点上了
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: app
                    operator: In
                    values: [&amp;quot;rabbitmq-cluster&amp;quot;]
              topologyKey: &amp;quot;kubernetes.io/hostname&amp;quot;  
      containers:
      - args:
        - -c
        - cp -v /etc/rabbitmq/rabbitmq.conf $&amp;#123;RABBITMQ_CONFIG_FILE&amp;#125;; exec docker-entrypoint.sh rabbitmq-server
        command:
        - sh
        env:
        - name: RABBITMQ_DEFAULT_USER
          valueFrom:
            secretKeyRef:
              key: username
              name: rabbitmq-secret
        - name: RABBITMQ_DEFAULT_PASS 
          valueFrom:
            secretKeyRef:
              key: password 
              name: rabbitmq-secret
        - name: TZ
          value: &#39;Asia/Shanghai&#39;
        - name: RABBITMQ_ERLANG_COOKIE
          value: &#39;SWvCP0Hrqv43NG7GybHC95ntCJKoW8UyNFWnBEWG8TY=&#39;
        - name: K8S_SERVICE_NAME
          value: rabbitmq-cluster
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: RABBITMQ_USE_LONGNAME
          value: &amp;quot;true&amp;quot;
        - name: RABBITMQ_NODENAME
          value: rabbit@$(POD_NAME).$(K8S_SERVICE_NAME).$(POD_NAMESPACE).svc.cluster.local
        - name: RABBITMQ_CONFIG_FILE
          value: /var/lib/rabbitmq/rabbitmq.conf
        image: rabbitmq:3.9-management
        imagePullPolicy: IfNotPresent
        name: rabbitmq
        ports:
        - containerPort: 15672
          name: http
          protocol: TCP
        - containerPort: 5672
          name: amqp
          protocol: TCP
        livenessProbe:
          exec:
            command: [&amp;quot;rabbitmq-diagnostics&amp;quot;, &amp;quot;status&amp;quot;]
          initialDelaySeconds: 60
          periodSeconds: 60
          failureThreshold: 2
          timeoutSeconds: 10
        readinessProbe:
          exec:
            command: [&amp;quot;rabbitmq-diagnostics&amp;quot;, &amp;quot;status&amp;quot;]
          failureThreshold: 2
          initialDelaySeconds: 60
          periodSeconds: 60
          timeoutSeconds: 10
        volumeMounts:
        - mountPath: /etc/rabbitmq
          name: config-volume
          readOnly: false
        - mountPath: /var/lib/rabbitmq
          name: rabbitmq-storage
          readOnly: false
        - name: tz-config
          mountPath: /usr/share/zoneinfo/Asia/Shanghai
        - name: tz-config
          mountPath: /etc/localtime
        - name: timezone
          mountPath: /etc/timezone
      serviceAccountName: rabbitmq-cluster
      terminationGracePeriodSeconds: 30
      volumes:
      - name: config-volume
        configMap:
          items:
          - key: rabbitmq.conf
            path: rabbitmq.conf
          - key: enabled_plugins
            path: enabled_plugins
          name: rabbitmq-cluster-config
      - name: tz-config
        hostPath:
          path: /usr/share/zoneinfo/Asia/Shanghai
          type: &amp;quot;&amp;quot;
      - name: timezone
        hostPath:
          path: /etc/timezone
          type: &amp;quot;&amp;quot;
  volumeClaimTemplates:
  - metadata:
      name: rabbitmq-storage
    spec:
      accessModes:
      - ReadWriteMany
      storageClassName: &amp;quot;nfs-storage&amp;quot;
      resources:
        requests:
          storage: 5Gi
&lt;/code&gt;&lt;/pre&gt;
&lt;h6 id=&#34;6-创建ingress&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#6-创建ingress&#34;&gt;#&lt;/a&gt; 6. 创建 Ingress&lt;/h6&gt;
&lt;pre&gt;&lt;code&gt;[root@k8s-master01 04-rabbitmq]# cat 06-rabbitmq-ingress.yaml 
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: rabbitmq-ingress
  namespace: prod
spec:
  ingressClassName: &amp;quot;nginx&amp;quot;
  rules:
  - host: rabbitmq.hmallleasing.com
    http:
      paths:
      - backend:
          service:
            name: rabbitmq-cluster
            port:
              number: 15672
        path: /
        pathType: ImplementationSpecific
&lt;/code&gt;&lt;/pre&gt;
&lt;h6 id=&#34;7-更新资源清单&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#7-更新资源清单&#34;&gt;#&lt;/a&gt; &lt;strong&gt;7. 更新资源清单&lt;/strong&gt;&lt;/h6&gt;
&lt;pre&gt;&lt;code&gt;[root@k8s-master01 04-rabbitmq]# sed -i &amp;quot;s#dev#prod#g&amp;quot; *.yaml
[root@k8s-master01 04-rabbitmq]# kubectl apply -f .
[root@k8s-master01 04-rabbitmq]# kubectl get pods -n prod
NAME                 READY   STATUS    RESTARTS   AGE
rabbitmq-cluster-0   1/1     Running   0          9m53s
rabbitmq-cluster-1   1/1     Running   0          8m47s
rabbitmq-cluster-2   1/1     Running   0          7m40s

[root@k8s-master01 04-rabbitmq]# kubectl exec -it rabbitmq-cluster-0 -n prod -- /bin/bash
root@rabbitmq-cluster-0:/# rabbitmqctl cluster_status
RABBITMQ_ERLANG_COOKIE env variable support is deprecated and will be REMOVED in a future version. Use the $HOME/.erlang.cookie file or the --erlang-cookie switch instead.
Cluster status of node rabbit@rabbitmq-cluster-0.rabbitmq-cluster.prod.svc.cluster.local ...
Basics

Cluster name: rabbit@rabbitmq-cluster-0.rabbitmq-cluster.prod.svc.cluster.local

Disk Nodes

rabbit@rabbitmq-cluster-0.rabbitmq-cluster.prod.svc.cluster.local
rabbit@rabbitmq-cluster-1.rabbitmq-cluster.prod.svc.cluster.local
rabbit@rabbitmq-cluster-2.rabbitmq-cluster.prod.svc.cluster.local

Running Nodes

rabbit@rabbitmq-cluster-0.rabbitmq-cluster.prod.svc.cluster.local
rabbit@rabbitmq-cluster-1.rabbitmq-cluster.prod.svc.cluster.local
rabbit@rabbitmq-cluster-2.rabbitmq-cluster.prod.svc.cluster.local

Versions

rabbit@rabbitmq-cluster-0.rabbitmq-cluster.prod.svc.cluster.local: RabbitMQ 3.9.29 on Erlang 25.3.2.9
rabbit@rabbitmq-cluster-1.rabbitmq-cluster.prod.svc.cluster.local: RabbitMQ 3.9.29 on Erlang 25.3.2.9
rabbit@rabbitmq-cluster-2.rabbitmq-cluster.prod.svc.cluster.local: RabbitMQ 3.9.29 on Erlang 25.3.2.9

Maintenance status

Node: rabbit@rabbitmq-cluster-0.rabbitmq-cluster.prod.svc.cluster.local, status: not under maintenance
Node: rabbit@rabbitmq-cluster-1.rabbitmq-cluster.prod.svc.cluster.local, status: not under maintenance
Node: rabbit@rabbitmq-cluster-2.rabbitmq-cluster.prod.svc.cluster.local, status: not under maintenance

Alarms

Memory alarm on node rabbit@rabbitmq-cluster-2.rabbitmq-cluster.prod.svc.cluster.local
Memory alarm on node rabbit@rabbitmq-cluster-1.rabbitmq-cluster.prod.svc.cluster.local
Memory alarm on node rabbit@rabbitmq-cluster-0.rabbitmq-cluster.prod.svc.cluster.local

Network Partitions

(none)

Listeners

Node: rabbit@rabbitmq-cluster-0.rabbitmq-cluster.prod.svc.cluster.local, interface: [::], port: 15672, protocol: http, purpose: HTTP API
Node: rabbit@rabbitmq-cluster-0.rabbitmq-cluster.prod.svc.cluster.local, interface: [::], port: 25672, protocol: clustering, purpose: inter-node and CLI tool communication
Node: rabbit@rabbitmq-cluster-0.rabbitmq-cluster.prod.svc.cluster.local, interface: [::], port: 5672, protocol: amqp, purpose: AMQP 0-9-1 and AMQP 1.0
Node: rabbit@rabbitmq-cluster-1.rabbitmq-cluster.prod.svc.cluster.local, interface: [::], port: 15672, protocol: http, purpose: HTTP API
Node: rabbit@rabbitmq-cluster-1.rabbitmq-cluster.prod.svc.cluster.local, interface: [::], port: 25672, protocol: clustering, purpose: inter-node and CLI tool communication
Node: rabbit@rabbitmq-cluster-1.rabbitmq-cluster.prod.svc.cluster.local, interface: [::], port: 5672, protocol: amqp, purpose: AMQP 0-9-1 and AMQP 1.0
Node: rabbit@rabbitmq-cluster-2.rabbitmq-cluster.prod.svc.cluster.local, interface: [::], port: 15672, protocol: http, purpose: HTTP API
Node: rabbit@rabbitmq-cluster-2.rabbitmq-cluster.prod.svc.cluster.local, interface: [::], port: 25672, protocol: clustering, purpose: inter-node and CLI tool communication
Node: rabbit@rabbitmq-cluster-2.rabbitmq-cluster.prod.svc.cluster.local, interface: [::], port: 5672, protocol: amqp, purpose: AMQP 0-9-1 and AMQP 1.0

Feature flags

Flag: drop_unroutable_metric, state: enabled
Flag: empty_basic_get_metric, state: enabled
Flag: implicit_default_bindings, state: enabled
Flag: maintenance_mode_status, state: enabled
Flag: quorum_queue, state: enabled
Flag: stream_queue, state: enabled
Flag: user_limits, state: enabled
Flag: virtual_host_metadata, state: enabled
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://wp-cdn.4ce.cn/v2/XqURJbg.jpeg&#34; alt=&#34;Snipaste_2025-05-17_17-42-47.jpg&#34; /&gt;&lt;/p&gt;
&lt;h6 id=&#34;8-web访问rabbitmq&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#8-web访问rabbitmq&#34;&gt;#&lt;/a&gt; &lt;strong&gt;8. Web 访问 rabbitmq&lt;/strong&gt;&lt;/h6&gt;
&lt;pre&gt;&lt;code&gt;http://rabbitmq.hmallleasing.com/#/
user:superman
pwd:talent
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://wp-cdn.4ce.cn/v2/7qKxUBf.jpeg&#34; alt=&#34;Snipaste_2025-05-17_17-14-54.jpg&#34; /&gt;&lt;/p&gt;
&lt;h6 id=&#34;9-rabbitmq全部挂了无法重启解决方案&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#9-rabbitmq全部挂了无法重启解决方案&#34;&gt;#&lt;/a&gt; 9. rabbitMQ 全部挂了，无法重启解决方案&lt;/h6&gt;
&lt;p&gt;Kubernetes 环境中，遇到 RabbitMQ 集群无法启动的问题。原因是 RabbitMQ 所有实例均失效，需要在每个 Pod 对应的持久化存储路径下创建 force_load 文件来强制启动。通过获取 PV 存储路径，在指定目录创建该文件后，重新启动 RabbitMQ 服务，成功解决了集群启动问题&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@k8s-node02 ~# cd /data/dev-rabbitmq-storage-rabbitmq-cluster-0-pvc-3abca920-3c68-44eb-b0fd-406a4358b153/mnesia/rabbit@rabbitmq-cluster-0.rabbitmq-cluster.dev.svc.cluster.local
[root@k8s-node02 rabbit@rabbitmq-cluster-0.rabbitmq-cluster.dev.svc.cluster.local]# touch force_load
&lt;/code&gt;&lt;/pre&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://ixuyong.cn/posts/2692178654.html</guid>
            <title>Rabbitmq集群部署</title>
            <link>http://ixuyong.cn/posts/2692178654.html</link>
            <category>Rabbitmq</category>
            <pubDate>Thu, 29 May 2025 20:35:53 +0800</pubDate>
            <description><![CDATA[ &lt;h3 id=&#34;rabbitmq集群部署&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#rabbitmq集群部署&#34;&gt;#&lt;/a&gt; Rabbitmq 集群部署&lt;/h3&gt;
&lt;h4 id=&#34;一-环境配置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#一-环境配置&#34;&gt;#&lt;/a&gt; 一、环境配置&lt;/h4&gt;
&lt;h5 id=&#34;11-关闭防火墙-selinux&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#11-关闭防火墙-selinux&#34;&gt;#&lt;/a&gt; 1.1 关闭防火墙、Selinux&lt;/h5&gt;
&lt;pre&gt;&lt;code&gt;systemctl disable --now firewalld 
setenforce 0
sed -i &#39;s#SELINUX=enforcing#SELINUX=disabled#g&#39; /etc/sysconfig/selinux
sed -i &#39;s#SELINUX=enforcing#SELINUX=disabled#g&#39; /etc/selinux/config
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;12-配置-yum-源&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#12-配置-yum-源&#34;&gt;#&lt;/a&gt; 1.2 配置 yum 源&lt;/h5&gt;
&lt;pre&gt;&lt;code&gt;#rocky linux配置
sed -e &#39;s|^mirrorlist=|#mirrorlist=|g&#39; \
    -e &#39;s|^#baseurl=http://dl.rockylinux.org/$contentdir|baseurl=https://mirrors.aliyun.com/rockylinux|g&#39; \
    -i.bak \
    /etc/yum.repos.d/rocky-*.repo
yum clean all &amp;amp;&amp;amp; yum makecache
mkdir /soft /data /scripts /backup
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;13-安装ntpdate&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#13-安装ntpdate&#34;&gt;#&lt;/a&gt; 1.3 安装 ntpdate&lt;/h5&gt;
&lt;pre&gt;&lt;code&gt;sudo dnf install epel-release -y
sudo dnf config-manager --set-enabled epel
sudo dnf install ntpsec
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;14-配置时间同步&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#14-配置时间同步&#34;&gt;#&lt;/a&gt; 1.4 配置时间同步&lt;/h5&gt;
&lt;pre&gt;&lt;code&gt;ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
echo &#39;Asia/Shanghai&#39; &amp;gt;/etc/timezone
ntpdate time2.aliyun.com
# 加入到crontab
crontab -e
*/5 * * * * /usr/sbin/ntpdate time2.aliyun.com
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;15-配置文件描述符&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#15-配置文件描述符&#34;&gt;#&lt;/a&gt; 1.5 配置文件描述符&lt;/h5&gt;
&lt;pre&gt;&lt;code&gt;ulimit -SHn 65535
vim /etc/security/limits.conf
# 末尾添加如下内容
* soft nofile 65536
* hard nofile 131072
* soft nproc 65535
* hard nproc 655350
* soft memlock unlimited
* hard memlock unlimited
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;16-系统内核参数调优&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#16-系统内核参数调优&#34;&gt;#&lt;/a&gt; 1.6 系统内核参数调优&lt;/h5&gt;
&lt;pre&gt;&lt;code&gt;cat &amp;gt;&amp;gt;/etc/sysctl.conf&amp;lt;&amp;lt;EOF
vm.max_map_count = 262144
vm.swappiness=1

net.ipv4.tcp_fin_timeout=2
net.ipv4.tcp_tw_reuse=1
#net.ipv4.tcp_tw_recycle=1
net.ipv4.tcp_syncookies=1
net.ipv4.tcp_keepalive_time=600
net.ipv4.ip_local_port_range=4000 65000
net.ipv4.tcp_max_syn_backlog=16384
net.ipv4.route.gc_timeout=100
net.ipv4.tcp_max_tw_buckets= 5000

net.ipv4.tcp_syn_retries=1
net.ipv4.tcp_synack_retries=1
net.core.somaxconn=16384
net.core.netdev_max_backlog=16384
net.ipv4.tcp_max_orphans=16384

# 设置最大内存共享段大小bytes
kernel.shmmax=15461882265
kernel.shmall=3774873
# 修改消息队列长度
kernel.msgmax=65535
kernel.msgmnb=65535
EOF
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;17-修改默认资源限制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#17-修改默认资源限制&#34;&gt;#&lt;/a&gt; 1.7 修改默认资源限制&lt;/h5&gt;
&lt;pre&gt;&lt;code&gt;cat &amp;gt;&amp;gt;/etc/systemd/system.conf&amp;lt;&amp;lt; EOF
DefaultLimitNOFILE=65536
DefaultLimitNPROC=32000
DefaultLimitMEMLOCK=infinity
EOF
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;18-执行命令生效状态&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#18-执行命令生效状态&#34;&gt;#&lt;/a&gt; 1.8 执行命令生效状态&lt;/h5&gt;
&lt;pre&gt;&lt;code&gt;sysctl -p
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;19-安装基础软件包&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#19-安装基础软件包&#34;&gt;#&lt;/a&gt; 1.9 安装基础软件包&lt;/h5&gt;
&lt;pre&gt;&lt;code&gt;yum install wget jq psmisc vim unzip net-tools telnet tree yum-utils device-mapper-persistent-data \
lvm2 git nfs-utils iotop httpd-tools dos2unix lrzsz -y
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;110-升级系统&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#110-升级系统&#34;&gt;#&lt;/a&gt; 1.10 升级系统&lt;/h5&gt;
&lt;pre&gt;&lt;code&gt;yum update -y --exclude=kernel* &amp;amp;&amp;amp; reboot
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;二-rabbitmq集群部署&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#二-rabbitmq集群部署&#34;&gt;#&lt;/a&gt; 二、Rabbitmq 集群部署&lt;/h4&gt;
&lt;h5 id=&#34;21-环境准备&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#21-环境准备&#34;&gt;#&lt;/a&gt; 2.1 环境准备&lt;/h5&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;192.168.40.101&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;192.168.40.102&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;192.168.40.103&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;master&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;slave1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;slave2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h5 id=&#34;22-修改hosts&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#22-修改hosts&#34;&gt;#&lt;/a&gt; 2.2 修改 hosts&lt;/h5&gt;
&lt;pre&gt;&lt;code&gt;vim /etc/hosts
192.168.40.101 rabbitmq-01
192.168.40.102 rabbitmq-02
192.168.40.103 rabbitmq-03
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;23-配置hosts&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#23-配置hosts&#34;&gt;#&lt;/a&gt; 2.3 配置 hosts&lt;/h5&gt;
&lt;pre&gt;&lt;code&gt;hostnamectl set-hostname rabbitmq-01
hostnamectl set-hostname rabbitmq-02
hostnamectl set-hostname rabbitmq-03
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;24-安装包下载&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#24-安装包下载&#34;&gt;#&lt;/a&gt; 2.4 安装包下载&lt;/h5&gt;
&lt;pre&gt;&lt;code&gt;wget https://github.com/rabbitmq/erlang-rpm/releases/download/v27.3.1/erlang-27.3.1-1.el8.x86_64.rpm
wget http://repo.iotti.biz/CentOS/7/x86_64/socat-1.7.3.2-5.el7.lux.x86_64.rpm
wget https://github.com/rabbitmq/rabbitmq-server/releases/download/v4.1.0/rabbitmq-server-4.1.0-1.el8.noarch.rpm
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;25-安装rabbitmq&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#25-安装rabbitmq&#34;&gt;#&lt;/a&gt; 2.5 安装 rabbitmq&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;RabbitMQ 是采用 Erlang 语言开发的，所以系统环境必须提供 Erlang 环境，需要是安装 Erlang。&lt;/li&gt;
&lt;li&gt;在 RabiitMQ 安装过程中需要依赖 socat 插件，首先安装该插件。&lt;/li&gt;
&lt;li&gt;Erlang 和 RabbitMQ 版本对照： &lt;a href=&#34;https://www.rabbitmq.com/which-erlang.html&#34;&gt;https://www.rabbitmq.com/which-erlang.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;yum localinstall erlang-27.3.1-1.el8.x86_64.rpm -y
yum localinstall socat-1.7.3.2-5.el7.lux.x86_64.rpm -y
yum localinstall rabbitmq-server-4.1.0-1.el8.noarch.rpm -y
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;26-配置rabbitmq&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#26-配置rabbitmq&#34;&gt;#&lt;/a&gt; 2.6 配置 rabbitmq&lt;/h5&gt;
&lt;p&gt;所有节点创建自定义数据和日志目录&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mkdir -p /data/rabbitmq/data /data/rabbitmq/log
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;所有节点编辑配置文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;vim /etc/rabbitmq/rabbitmq-env.conf
RABBITMQ_MNESIA_BASE=/data/rabbitmq/data
RABBITMQ_LOG_BASE=/data/rabbitmq/log
RABBITMQ_ERLANG_COOKIE=/data/rabbitmq/.erlang.cookie
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;所有节点赋予.erlang.cookie 文件权限（其他 2 台从节点 cookie 值要保持一致，权限为 owner 只读），RabbitMQ 的集群是依赖 erlang 集群，而 erlang 集群是通过这个 cookie 进行通信认证的。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;vim /data/rabbitmq/.erlang.cookie
KAIJQVKJHAGMUCWXZGVG 

chmod -R 400 /data/rabbitmq/.erlang.cookie
chown -R rabbitmq.rabbitmq /data/rabbitmq/
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;27-rabbitmq启动&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#27-rabbitmq启动&#34;&gt;#&lt;/a&gt; 2.7 rabbitmq 启动&lt;/h5&gt;
&lt;p&gt;所有节点启动 web 管理插件和分片插件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;rabbitmq-plugins enable rabbitmq_management
rabbitmq-plugins enable rabbitmq_sharding
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;所有节点设置开机自启&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;systemctl enable rabbitmq-server
systemctl restart rabbitmq-server
systemctl status rabbitmq-server
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;28-加入集群&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#28-加入集群&#34;&gt;#&lt;/a&gt; 2.8 加入集群&lt;/h5&gt;
&lt;p&gt;创建集群，在 node2 和 node3 上执行加入集群命令（主节点无需执行如下操作）:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#1.关闭服务
rabbitmqctl stop_app

#2.加入集群
rabbitmqctl join_cluster rabbit@rabbitmq-01

#3.启动服务
rabbitmqctl start_app

#4.查看集群状态,任意节点执行
rabbitmqctl cluster_status
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://wp-cdn.4ce.cn/v2/gWflncf.jpeg&#34; alt=&#34;Snipaste_2025-05-29_20-40-27.jpg&#34; /&gt;&lt;/p&gt;
&lt;h5 id=&#34;29-配置rabbitmq权限&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#29-配置rabbitmq权限&#34;&gt;#&lt;/a&gt; 2.9 配置 rabbitmq 权限&lt;/h5&gt;
&lt;p&gt;rabbitmq 有一个默认的账号密码 guest，但该情况仅限于本机 localhost 进行访问，所以需要添加一个远程登录的用户。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;角色有四种：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;administrator：可以登录控制台、查看所有信息、并对 rabbitmq 进行管理&lt;/li&gt;
&lt;li&gt;monToring：监控者；登录控制台，查看所有信息&lt;/li&gt;
&lt;li&gt;policymaker：策略制定者；登录控制台指定策略&lt;/li&gt;
&lt;li&gt;managment：普通管理员；登录控制&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;# 添加用户
rabbitmqctl add_user admin 123456

# 为用户添加资源权限(授予访问虚拟机根节点的所有权限)
rabbitmqctl set_permissions -p &amp;quot;/&amp;quot; admin &amp;quot;.*&amp;quot; &amp;quot;.*&amp;quot; &amp;quot;.*&amp;quot;

# 设置用户角色,分配操作权限
rabbitmqctl set_user_tags admin administrator
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这里创建用户 xuyong，密码 123456，设置 adminstator 角色，赋予所有权限&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 添加用户
rabbitmqctl add_user xuyong 123456

# 为用户添加资源权限(授予访问虚拟机根节点的所有权限)
rabbitmqctl set_permissions -p &amp;quot;/&amp;quot; xuyong &amp;quot;.*&amp;quot; &amp;quot;.*&amp;quot; &amp;quot;.*&amp;quot;

# 新增虚拟主机
rabbitmqctl add_vhost /xuyong

# 将新虚拟主机授权给新用户
# rabbitmqctl set_permissions -p vhost_name username “.*” “.*” “.*”(后面三个”*”代表用户拥有配置、写、读全部权限)
rabbitmqctl set_permissions -p &amp;quot;/xuyong&amp;quot; xuyong &amp;quot;.*&amp;quot; &amp;quot;.*&amp;quot; &amp;quot;.*&amp;quot;

#查看权限
rabbitmqctl list_permissions -p /xuyong

# 设置用户角色,分配操作权限
rabbitmqctl set_user_tags xuyong administrator

# 删除guest用户
rabbitmqctl delete_user guest
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在其他节点检查，账户是否已同步&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;rabbitmqctl list_users
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;210-访问rabbitmq&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#210-访问rabbitmq&#34;&gt;#&lt;/a&gt; 2.10 访问 rabbitmq&lt;/h5&gt;
&lt;p&gt;浏览器访问:&lt;a href=&#34;http://192.168.40.101:15672/&#34;&gt;http://192.168.40.101:15672/&lt;/a&gt;&lt;br /&gt;
 用户名: admin&lt;br /&gt;
 密码：123456&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://wp-cdn.4ce.cn/v2/KQpvPU4.jpeg&#34; alt=&#34;Snipaste_2025-05-29_20-29-59.jpg&#34; /&gt;&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
