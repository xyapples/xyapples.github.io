{
    "version": "https://jsonfeed.org/version/1",
    "title": "LinuxSre云原生 • All posts by \"devops\" category",
    "description": "专注于 Linux 运维、云计算、云原⽣等技术",
    "home_page_url": "http://ixuyong.cn",
    "items": [
        {
            "id": "http://ixuyong.cn/posts/1366748664.html",
            "url": "http://ixuyong.cn/posts/1366748664.html",
            "title": "K8S基于Jenkins实现Java项目CI与CD实践（二）",
            "date_published": "2025-06-10T13:57:00.000Z",
            "content_html": "<p><strong><u>场景 1：常规 java 应用，使用 jenkins pipeline 交付到 Kubernetes 集群中</u></strong></p>\n<p>CI 阶段：开发人员 -&gt; 提交代码 -&gt;Gitlab 仓库 -&gt;Jenkins/CI 抓取代码 -&gt; 漏洞扫描 -&gt; 编译 -&gt; 构建镜像 -&gt; 推送 Harbor-&gt; 部署应用至 K8S 测试环境；<br />\nCD 阶段：Jenkins/CD-&gt; 拉取 Harbor 仓库对应项目镜像 -&gt; 部署应用至 K8S 生产环境；</p>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/reddUL2.jpeg\" alt=\"1.jpg\" /></p>\n<h4 id=\"一-提交代码\"><a class=\"anchor\" href=\"#一-提交代码\">#</a> 一、提交代码</h4>\n<p>准备好 Java 代码、Dockerfile、deploy.yaml 资源清单文件  提交到 Gitlab 服务器；</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">git</span> config <span class=\"token parameter variable\">--global</span> user.name <span class=\"token string\">\"xuyong\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>$ <span class=\"token function\">git</span> config <span class=\"token parameter variable\">--global</span> user.email <span class=\"token string\">\"373370405@qq.com\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>$ <span class=\"token function\">git</span> init</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>$ <span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>$ <span class=\"token function\">git</span> commit <span class=\"token parameter variable\">-m</span> <span class=\"token string\">\"first commit\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>$ <span class=\"token function\">git</span> remote remove origin</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>$ <span class=\"token function\">git</span> remote <span class=\"token function\">add</span> origin http://gitlab.hmallleasing.com/root/springboot-cicd.git</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>$ <span class=\"token function\">git</span> push <span class=\"token parameter variable\">-u</span> origin <span class=\"token string\">\"master\"</span></pre></td></tr></table></figure><h4 id=\"二-ci阶段\"><a class=\"anchor\" href=\"#二-ci阶段\">#</a> 二、CI 阶段</h4>\n<p>CI 阶段分为以下 6 步：<br />\n1、获取代码<br />\n 2、漏洞扫描<br />\n 3、检测漏洞扫描结果，如果正常则继续、否则就终止<br />\n 4、使用 maven 进行编译，打包<br />\n 5、制作 Docker 镜像、推送到 Harbor 仓库  (Dockerfile 文件)<br />\n 6、交付应用到 K8S</p>\n<h5 id=\"21-编写pipeline框架\"><a class=\"anchor\" href=\"#21-编写pipeline框架\">#</a> 2.1 编写 Pipeline 框架</h5>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>pipeline <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  agent <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    kubernetes <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      cloud <span class=\"token string\">'kubernetes'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      yaml <span class=\"token string\">''</span>'</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        apiVersion: v1</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        kind: Pod</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        spec:</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>          imagePullSecrets:</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>          - name: harbor-admin</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>          volumes:</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>          - name: data</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            nfs:</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>              server: <span class=\"token number\">192.168</span>.1.75</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>              path: /data/nfs/maven</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>          - name: dockersocket</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            hostPath:</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>              path: /run/docker.sock</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>          containers:</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>          - name: maven</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            image: s.hmallleasing.com/base/maven:3.8.6</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            imagePullPolicy: IfNotPresent</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            command: <span class=\"token punctuation\">[</span><span class=\"token string\">\"cat\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            tty: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            volumeMounts:</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            - name: data</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>              mountPath: /root/.m2</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>          - name: nodejs</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            image: s.hmallleasing.com/base/nodejs:14.20</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            imagePullPolicy: IfNotPresent</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            command: <span class=\"token punctuation\">[</span><span class=\"token string\">\"cat\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            tty: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>          - name: sonar</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            image: s.hmallleasing.com/base/sonar-scanner:2.3.0</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            imagePullPolicy: IfNotPresent</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            command: <span class=\"token punctuation\">[</span><span class=\"token string\">\"cat\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            tty: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>          - name: <span class=\"token function\">docker</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            image: s.hmallleasing.com/base/docker:20.10</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            imagePullPolicy: IfNotPresent</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            command: <span class=\"token punctuation\">[</span><span class=\"token string\">\"cat\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            tty: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            volumeMounts:</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            - name: dockersocket</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>              mountPath: /run/docker.sock</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>          - name: kubectl</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            image: s.hmallleasing.com/base/kubectl:1.32.3</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            imagePullPolicy: IfNotPresent</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            command: <span class=\"token punctuation\">[</span><span class=\"token string\">\"cat\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            tty: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>      <span class=\"token string\">''</span>'</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>  stages <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    stage<span class=\"token punctuation\">(</span><span class=\"token string\">'获取代码'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>      steps <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        container<span class=\"token punctuation\">(</span><span class=\"token string\">'maven'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t\t  <span class=\"token function\">sh</span> <span class=\"token string\">'echo \"获取代码\"'</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    stage<span class=\"token punctuation\">(</span><span class=\"token string\">'代码扫描'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>      steps <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        container<span class=\"token punctuation\">(</span><span class=\"token string\">'sonar'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t\t  <span class=\"token function\">sh</span> <span class=\"token string\">'echo \"代码扫描\"'</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>\t\t</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    stage<span class=\"token punctuation\">(</span><span class=\"token string\">'检查扫描结果'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>      steps <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        container<span class=\"token punctuation\">(</span><span class=\"token string\">'sonar'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t\t  <span class=\"token function\">sh</span> <span class=\"token string\">'echo \"Code Result Check\"'</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>\t\t    </pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    stage<span class=\"token punctuation\">(</span><span class=\"token string\">'代码编译'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>      steps <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        container<span class=\"token punctuation\">(</span><span class=\"token string\">'maven'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t\t  <span class=\"token function\">sh</span> <span class=\"token string\">'echo \"代码编译\"'</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>\t    </pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    stage<span class=\"token punctuation\">(</span><span class=\"token string\">'制作Docker镜像'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>      steps <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>        container<span class=\"token punctuation\">(</span><span class=\"token string\">'docker'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>\t\t  <span class=\"token function\">sh</span> <span class=\"token string\">'echo \"制作Docker镜像\"'</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>\t</pre></td></tr><tr><td data-num=\"90\"></td><td><pre>    stage<span class=\"token punctuation\">(</span><span class=\"token string\">'交付应用至K8S'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>      steps <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>        container<span class=\"token punctuation\">(</span><span class=\"token string\">'kubectl'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>\t\t  <span class=\"token function\">sh</span> <span class=\"token string\">'echo \"交付应用至K8S\"'</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>\t\t</pre></td></tr><tr><td data-num=\"97\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/A7fPIQd.png\" alt=\"1.png\" /></p>\n<h5 id=\"22-获取代码\"><a class=\"anchor\" href=\"#22-获取代码\">#</a> 2.2 获取代码</h5>\n<p><strong>1、Jenkins 上配置 Gitlab 认证信息</strong></p>\n<p>系统管理 -&gt;manage credentials-&gt; 全局 -&gt;Add Credential</p>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/Dhao75j.png\" alt=\"2.png\" /></p>\n<p><strong>2、SlavePod 访问 gitlab</strong></p>\n<p>通过 Coredns 配置自定义域名解析，如果 gitlab 解析至公网，无需配置此步骤；</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@k8s-master01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># kubectl edit cm coredns -n kube-system</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">..</span>.</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        ready</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        hosts <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>           <span class=\"token number\">192.168</span>.1.74 gitlab.hmallleasing.com</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>           fallthrough</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        kubernetes cluster.local in-addr.arpa ip6.arpa <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">..</span>.</pre></td></tr></table></figure><p>测试解析是否生效；</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@k8s-master01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># kubectl exec -it gitlab-0 -n ops -- /bin/bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>root@gitlab-0:/<span class=\"token comment\"># ping gitlab.hmallleasing.com</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>PING gitlab.hmallleasing.com <span class=\"token punctuation\">(</span><span class=\"token number\">192.168</span>.1.74<span class=\"token punctuation\">)</span>: <span class=\"token number\">56</span> data bytes</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">64</span> bytes from <span class=\"token number\">192.168</span>.1.74: <span class=\"token assign-left variable\">seq</span><span class=\"token operator\">=</span><span class=\"token number\">0</span> <span class=\"token assign-left variable\">ttl</span><span class=\"token operator\">=</span><span class=\"token number\">63</span> <span class=\"token assign-left variable\">time</span><span class=\"token operator\">=</span><span class=\"token number\">0.381</span> ms</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">64</span> bytes from <span class=\"token number\">192.168</span>.1.74: <span class=\"token assign-left variable\">seq</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token assign-left variable\">ttl</span><span class=\"token operator\">=</span><span class=\"token number\">63</span> <span class=\"token assign-left variable\">time</span><span class=\"token operator\">=</span><span class=\"token number\">0.203</span> ms</pre></td></tr></table></figure><p><strong>3、生成流水线脚本获取代码</strong></p>\n<p>通过流水线语法 -&gt; 片段生成器 -&gt; 生成流水线脚本，生成 Pipeline 流水线</p>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/O2hXRRW.png\" alt=\"1.png\" /></p>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/8txbe6d.png\" alt=\"2.png\" /></p>\n<p><strong>3、测试获取代码 Pipeline</strong></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>pipeline <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  agent <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    kubernetes <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      cloud <span class=\"token string\">'kubernetes'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      yaml <span class=\"token string\">''</span>'</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        apiVersion: v1</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        kind: Pod</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        spec:</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>          imagePullSecrets:</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>          - name: harbor-admin</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>          volumes:</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>          - name: data</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            nfs:</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>              server: <span class=\"token number\">192.168</span>.1.75</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>              path: /data/nfs/maven</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>          - name: dockersocket</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            hostPath:</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>              path: /run/docker.sock</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>          containers:</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>          - name: maven</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            image: s.hmallleasing.com/base/maven:3.8.6</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            imagePullPolicy: IfNotPresent</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            command: <span class=\"token punctuation\">[</span><span class=\"token string\">\"cat\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            tty: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            volumeMounts:</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            - name: data</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>              mountPath: /root/.m2</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>          - name: nodejs</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            image: s.hmallleasing.com/base/nodejs:14.20</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            imagePullPolicy: IfNotPresent</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            command: <span class=\"token punctuation\">[</span><span class=\"token string\">\"cat\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            tty: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>          - name: sonar</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            image: s.hmallleasing.com/base/sonar-scanner:2.3.0</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            imagePullPolicy: IfNotPresent</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            command: <span class=\"token punctuation\">[</span><span class=\"token string\">\"cat\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            tty: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>          - name: <span class=\"token function\">docker</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            image: s.hmallleasing.com/base/docker:20.10</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            imagePullPolicy: IfNotPresent</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            command: <span class=\"token punctuation\">[</span><span class=\"token string\">\"cat\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            tty: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            volumeMounts:</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            - name: dockersocket</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>              mountPath: /run/docker.sock</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>          - name: kubectl</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            image: s.hmallleasing.com/base/kubectl:1.32.3</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            imagePullPolicy: IfNotPresent</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            command: <span class=\"token punctuation\">[</span><span class=\"token string\">\"cat\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            tty: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>      <span class=\"token string\">''</span>'</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"55\"></td><td><pre>  environment<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    //定义git变量</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    Git_Id <span class=\"token operator\">=</span> <span class=\"token string\">\"gitlab-root-token\"</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    Git_Url <span class=\"token operator\">=</span> <span class=\"token string\">\"http://gitlab.hmallleasing.com/root/springboot-cicd.git\"</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"61\"></td><td><pre>  stages <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    stage<span class=\"token punctuation\">(</span><span class=\"token string\">'获取代码'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>      steps <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        container<span class=\"token punctuation\">(</span><span class=\"token string\">'maven'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t\t  checkout scmGit<span class=\"token punctuation\">(</span>branches: <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>name: <span class=\"token string\">'*/master'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>, extensions: <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>, userRemoteConfigs: <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>credentialsId: <span class=\"token string\">\"<span class=\"token variable\">$&#123;Git_Id&#125;</span>\"</span>, url: <span class=\"token string\">\"<span class=\"token variable\">$&#123;Git_Url&#125;</span>\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t\t  <span class=\"token function\">sh</span> <span class=\"token string\">'pwd &amp;&amp; ls'</span> \t\t  </pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    stage<span class=\"token punctuation\">(</span><span class=\"token string\">'代码扫描'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>      steps <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        container<span class=\"token punctuation\">(</span><span class=\"token string\">'sonar'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t\t  <span class=\"token function\">sh</span> <span class=\"token string\">'echo \"代码扫描\"'</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>\t\t</pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    stage<span class=\"token punctuation\">(</span><span class=\"token string\">'检查扫描结果'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>      steps <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        container<span class=\"token punctuation\">(</span><span class=\"token string\">'sonar'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\t\t  <span class=\"token function\">sh</span> <span class=\"token string\">'echo \"Code Result Check\"'</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>\t\t    </pre></td></tr><tr><td data-num=\"84\"></td><td><pre>    stage<span class=\"token punctuation\">(</span><span class=\"token string\">'代码编译'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>      steps <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>        container<span class=\"token punctuation\">(</span><span class=\"token string\">'maven'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>\t\t  <span class=\"token function\">sh</span> <span class=\"token string\">'echo \"代码编译\"'</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>\t    </pre></td></tr><tr><td data-num=\"91\"></td><td><pre>    stage<span class=\"token punctuation\">(</span><span class=\"token string\">'制作Docker镜像'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>      steps <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>        container<span class=\"token punctuation\">(</span><span class=\"token string\">'docker'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>\t\t  <span class=\"token function\">sh</span> <span class=\"token string\">'echo \"制作Docker镜像\"'</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>\t</pre></td></tr><tr><td data-num=\"98\"></td><td><pre>    stage<span class=\"token punctuation\">(</span><span class=\"token string\">'交付应用至K8S'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>      steps <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>        container<span class=\"token punctuation\">(</span><span class=\"token string\">'kubectl'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>\t\t  <span class=\"token function\">sh</span> <span class=\"token string\">'echo \"交付应用至K8S\"'</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>\t\t</pre></td></tr><tr><td data-num=\"105\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/psokxwc.png\" alt=\"3.png\" /></p>\n<h5 id=\"23-sonarqube漏洞扫描\"><a class=\"anchor\" href=\"#23-sonarqube漏洞扫描\">#</a> 2.3 Sonarqube 漏洞扫描</h5>\n<p><strong>1、配置 dns 解析（如果 sonarqube 解析至公网，无需配置此步骤）</strong><br />\nslavePod 需要访问 sonarqube 服务端，sonarqube 服务端需要回调 jenkins，获取扫描结果 。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@k8s-master01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># kubectl edit cm -n kube-system coredns</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">..</span>.</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        ready</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        hosts <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>           <span class=\"token number\">192.168</span>.1.74 gitlab.hmallleasing.com        <span class=\"token comment\">#gitalb</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>           <span class=\"token number\">192.168</span>.1.74 sonar.hmallleasing.com         <span class=\"token comment\">#sonar</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>           <span class=\"token number\">192.168</span>.1.74 jenkins.hmallleasing.com       <span class=\"token comment\">#jenkins</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>           fallthrough</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        kubernetes cluster.local in-addr.arpa ip6.arpa <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">..</span>.</pre></td></tr></table></figure><p>测试解析是否生效；</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@k8s-master01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># kubectl exec -it gitlab-0 -n ops -- /bin/bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>root@gitlab-0:/<span class=\"token comment\"># ping sonar.hmallleasing.com</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>PING sonar.hmallleasing.com <span class=\"token punctuation\">(</span><span class=\"token number\">192.168</span>.1.74<span class=\"token punctuation\">)</span>: <span class=\"token number\">56</span> data bytes</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">64</span> bytes from <span class=\"token number\">192.168</span>.1.74: <span class=\"token assign-left variable\">seq</span><span class=\"token operator\">=</span><span class=\"token number\">0</span> <span class=\"token assign-left variable\">ttl</span><span class=\"token operator\">=</span><span class=\"token number\">63</span> <span class=\"token assign-left variable\">time</span><span class=\"token operator\">=</span><span class=\"token number\">0.187</span> ms</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">64</span> bytes from <span class=\"token number\">192.168</span>.1.74: <span class=\"token assign-left variable\">seq</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token assign-left variable\">ttl</span><span class=\"token operator\">=</span><span class=\"token number\">63</span> <span class=\"token assign-left variable\">time</span><span class=\"token operator\">=</span><span class=\"token number\">0.202</span> ms</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>root@gitlab-0:/<span class=\"token comment\"># ping jenkins.hmallleasing.com</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>PING jenkins.hmallleasing.com <span class=\"token punctuation\">(</span><span class=\"token number\">192.168</span>.1.74<span class=\"token punctuation\">)</span>: <span class=\"token number\">56</span> data bytes</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token number\">64</span> bytes from <span class=\"token number\">192.168</span>.1.74: <span class=\"token assign-left variable\">seq</span><span class=\"token operator\">=</span><span class=\"token number\">0</span> <span class=\"token assign-left variable\">ttl</span><span class=\"token operator\">=</span><span class=\"token number\">63</span> <span class=\"token assign-left variable\">time</span><span class=\"token operator\">=</span><span class=\"token number\">0.189</span> ms</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token number\">64</span> bytes from <span class=\"token number\">192.168</span>.1.74: <span class=\"token assign-left variable\">seq</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token assign-left variable\">ttl</span><span class=\"token operator\">=</span><span class=\"token number\">63</span> <span class=\"token assign-left variable\">time</span><span class=\"token operator\">=</span><span class=\"token number\">0.202</span> ms</pre></td></tr></table></figure><p><strong>2、Jenkins 集成 Sonarqube</strong></p>\n<p>生成 sonarqube 令牌：用户 -&gt; 我的账号 -&gt; 安全</p>\n<p><em>保存令牌信息：squ_6e57e496a22ebdf0723c3683bd489df57f967f49</em></p>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/WIPhwiL.png\" alt=\"1.png\" /></p>\n<p>配置 sonarqube 认证信息：系统管理 -&gt;manage credentials-&gt; 全局 -&gt;Add Credential</p>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/6hyCvFt.png\" alt=\"1.png\" /></p>\n<p>Jenkins 集成 Sonarqube：系统管理 -&gt; 系统配置 -&gt;SonarQube servers-&gt;Add SonarQube</p>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/TDCKExZ.png\" alt=\"2.png\" /></p>\n<p><strong>3、获取 sonar-scanner 扫描命令（此步骤不用执行）</strong></p>\n<p>项目 -&gt; 手工 -&gt; 显示名</p>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/6xdkGGq.png\" alt=\"3.png\" /></p>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/WV443AU.png\" alt=\"4.png\" /></p>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/kgfxuOS.png\" alt=\"5.png\" /></p>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/bahZPtg.png\" alt=\"6.png\" /></p>\n<p><em>#获取 sonar-scanner 扫描命令，需要在项目目录下进行扫描</em></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>sonar-scanner <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token parameter variable\">-Dsonar.projectKey</span><span class=\"token operator\">=</span>springboot <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token parameter variable\">-Dsonar.sources</span><span class=\"token operator\">=</span>. <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token parameter variable\">-Dsonar.host.url</span><span class=\"token operator\">=</span>http://sonar.hmallleasing.com <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token parameter variable\">-Dsonar.login</span><span class=\"token operator\">=</span>squ_6e57e496a22ebdf0723c3683bd489df57f967f49</pre></td></tr></table></figure><p><strong>4、测试代码扫描 Pipeline</strong></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>pipeline <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  agent <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    kubernetes <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      cloud <span class=\"token string\">'kubernetes'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      yaml <span class=\"token string\">''</span>'</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        apiVersion: v1</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        kind: Pod</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        spec:</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>          imagePullSecrets:</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>          - name: harbor-admin</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>          volumes:</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>          - name: data</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            nfs:</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>              server: <span class=\"token number\">192.168</span>.1.75</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>              path: /data/nfs/maven</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>          - name: dockersocket</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            hostPath:</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>              path: /run/docker.sock</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>          containers:</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>          - name: maven</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            image: s.hmallleasing.com/base/maven:3.8.6</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            imagePullPolicy: IfNotPresent</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            command: <span class=\"token punctuation\">[</span><span class=\"token string\">\"cat\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            tty: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            volumeMounts:</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            - name: data</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>              mountPath: /root/.m2</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>          - name: nodejs</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            image: s.hmallleasing.com/base/nodejs:14.20</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            imagePullPolicy: IfNotPresent</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            command: <span class=\"token punctuation\">[</span><span class=\"token string\">\"cat\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            tty: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>          - name: sonar</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            image: s.hmallleasing.com/base/sonar-scanner:2.3.0</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            imagePullPolicy: IfNotPresent</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            command: <span class=\"token punctuation\">[</span><span class=\"token string\">\"cat\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            tty: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>          - name: <span class=\"token function\">docker</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            image: s.hmallleasing.com/base/docker:20.10</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            imagePullPolicy: IfNotPresent</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            command: <span class=\"token punctuation\">[</span><span class=\"token string\">\"cat\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            tty: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            volumeMounts:</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            - name: dockersocket</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>              mountPath: /run/docker.sock</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>          - name: kubectl</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            image: s.hmallleasing.com/base/kubectl:1.32.3</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            imagePullPolicy: IfNotPresent</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            command: <span class=\"token punctuation\">[</span><span class=\"token string\">\"cat\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            tty: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>      <span class=\"token string\">''</span>'</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"55\"></td><td><pre>  environment<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    //定义git变量</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    Git_Id <span class=\"token operator\">=</span> <span class=\"token string\">\"gitlab-root-token\"</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    Git_Url <span class=\"token operator\">=</span> <span class=\"token string\">\"http://gitlab.hmallleasing.com/root/springboot-cicd.git\"</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"61\"></td><td><pre>  stages <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    stage<span class=\"token punctuation\">(</span><span class=\"token string\">'获取代码'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>      steps <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        container<span class=\"token punctuation\">(</span><span class=\"token string\">'maven'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t\t  checkout scmGit<span class=\"token punctuation\">(</span>branches: <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>name: <span class=\"token string\">'*/master'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>, extensions: <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>, userRemoteConfigs: <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>credentialsId: <span class=\"token string\">\"<span class=\"token variable\">$&#123;Git_Id&#125;</span>\"</span>, url: <span class=\"token string\">\"<span class=\"token variable\">$&#123;Git_Url&#125;</span>\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t\t  <span class=\"token function\">sh</span> <span class=\"token string\">'pwd &amp;&amp; ls'</span> \t\t  </pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    stage<span class=\"token punctuation\">(</span><span class=\"token string\">'代码扫描'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>      steps <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        withSonarQubeEnv<span class=\"token punctuation\">(</span><span class=\"token string\">'sonar-k8s'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>   //jenkins集成sonarqube名称sonar-k8s</pre></td></tr><tr><td data-num=\"73\"></td><td><pre>          container<span class=\"token punctuation\">(</span><span class=\"token string\">'sonar'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>            <span class=\"token function\">sh</span> <span class=\"token string\">'pwd &amp;&amp; ls -l'</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>            <span class=\"token function\">sh</span> <span class=\"token string\">'sonar-scanner \\</pre></td></tr><tr><td data-num=\"76\"></td><td><pre>                  -Dsonar.projectKey=springboot-cicd \\</pre></td></tr><tr><td data-num=\"77\"></td><td><pre>                  -Dsonar.java.binaries=src \\</pre></td></tr><tr><td data-num=\"78\"></td><td><pre>                  -Dsonar.sources=.'</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>\t\t</pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    stage<span class=\"token punctuation\">(</span><span class=\"token string\">'检查扫描结果'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>      steps <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>        container<span class=\"token punctuation\">(</span><span class=\"token string\">'sonar'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>\t\t  <span class=\"token function\">sh</span> <span class=\"token string\">'echo \"Code Result Check\"'</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>\t\t    </pre></td></tr><tr><td data-num=\"90\"></td><td><pre>    stage<span class=\"token punctuation\">(</span><span class=\"token string\">'代码编译'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>      steps <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>        container<span class=\"token punctuation\">(</span><span class=\"token string\">'maven'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>\t\t  <span class=\"token function\">sh</span> <span class=\"token string\">'echo \"代码编译\"'</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>\t    </pre></td></tr><tr><td data-num=\"97\"></td><td><pre>    stage<span class=\"token punctuation\">(</span><span class=\"token string\">'制作Docker镜像'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>      steps <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>        container<span class=\"token punctuation\">(</span><span class=\"token string\">'docker'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>\t\t  <span class=\"token function\">sh</span> <span class=\"token string\">'echo \"制作Docker镜像\"'</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>\t</pre></td></tr><tr><td data-num=\"104\"></td><td><pre>    stage<span class=\"token punctuation\">(</span><span class=\"token string\">'交付应用至K8S'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>      steps <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>        container<span class=\"token punctuation\">(</span><span class=\"token string\">'kubectl'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>\t\t  <span class=\"token function\">sh</span> <span class=\"token string\">'echo \"交付应用至K8S\"'</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>\t\t</pre></td></tr><tr><td data-num=\"111\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/2jIMhwU.png\" alt=\"1.png\" /></p>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/gEwDNX4.png\" alt=\"2.png\" /></p>\n<h5 id=\"24-检查扫描结果\"><a class=\"anchor\" href=\"#24-检查扫描结果\">#</a> 2.4 检查扫描结果</h5>\n<p>1、配置 sonarquber, 让其将检查结果通知 jiekins，如果正常则继续、否则就终止执行</p>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/aU33pHW.png\" alt=\"4.png\" /></p>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/oufVrcE.png\" alt=\"5.png\" /></p>\n<p>URL：<a href=\"http://admin:talent@jenkins.hmallleasing.com/sonarqube-webhook\">http://admin:talent@jenkins.hmallleasing.com/sonarqube-webhook</a><br />\nJenkins 访问地址：<a href=\"http://jenkins.hamlllleasing.com\">jenkins.hamlllleasing.com</a><br />\nJenkins 用户名：admin<br />\nJenkins 密码：talent</p>\n<p><strong>2、检查扫描结果 pipeline</strong></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>pipeline <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  agent <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    kubernetes <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      cloud <span class=\"token string\">'kubernetes'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      yaml <span class=\"token string\">''</span>'</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        apiVersion: v1</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        kind: Pod</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        spec:</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>          imagePullSecrets:</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>          - name: harbor-admin</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>          volumes:</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>          - name: data</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            nfs:</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>              server: <span class=\"token number\">192.168</span>.1.75</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>              path: /data/nfs/maven</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>          - name: dockersocket</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            hostPath:</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>              path: /run/docker.sock</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>          containers:</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>          - name: maven</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            image: s.hmallleasing.com/base/maven:3.8.6</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            imagePullPolicy: IfNotPresent</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            command: <span class=\"token punctuation\">[</span><span class=\"token string\">\"cat\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            tty: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            volumeMounts:</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            - name: data</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>              mountPath: /root/.m2</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>          - name: nodejs</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            image: s.hmallleasing.com/base/nodejs:14.20</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            imagePullPolicy: IfNotPresent</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            command: <span class=\"token punctuation\">[</span><span class=\"token string\">\"cat\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            tty: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>          - name: sonar</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            image: s.hmallleasing.com/base/sonar-scanner:2.3.0</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            imagePullPolicy: IfNotPresent</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            command: <span class=\"token punctuation\">[</span><span class=\"token string\">\"cat\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            tty: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>          - name: <span class=\"token function\">docker</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            image: s.hmallleasing.com/base/docker:20.10</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            imagePullPolicy: IfNotPresent</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            command: <span class=\"token punctuation\">[</span><span class=\"token string\">\"cat\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            tty: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            volumeMounts:</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            - name: dockersocket</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>              mountPath: /run/docker.sock</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>          - name: kubectl</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            image: s.hmallleasing.com/base/kubectl:1.32.3</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            imagePullPolicy: IfNotPresent</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            command: <span class=\"token punctuation\">[</span><span class=\"token string\">\"cat\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            tty: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>      <span class=\"token string\">''</span>'</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"55\"></td><td><pre>  environment<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    //定义git变量</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    Git_Id <span class=\"token operator\">=</span> <span class=\"token string\">\"gitlab-root-token\"</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    Git_Url <span class=\"token operator\">=</span> <span class=\"token string\">\"http://gitlab.hmallleasing.com/root/springboot-cicd.git\"</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"61\"></td><td><pre>  stages <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    stage<span class=\"token punctuation\">(</span><span class=\"token string\">'获取代码'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>      steps <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        container<span class=\"token punctuation\">(</span><span class=\"token string\">'maven'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t\t  checkout scmGit<span class=\"token punctuation\">(</span>branches: <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>name: <span class=\"token string\">'*/master'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>, extensions: <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>, userRemoteConfigs: <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>credentialsId: <span class=\"token string\">\"<span class=\"token variable\">$&#123;Git_Id&#125;</span>\"</span>, url: <span class=\"token string\">\"<span class=\"token variable\">$&#123;Git_Url&#125;</span>\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t\t  <span class=\"token function\">sh</span> <span class=\"token string\">'pwd &amp;&amp; ls'</span> \t\t  </pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    stage<span class=\"token punctuation\">(</span><span class=\"token string\">'代码扫描'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>      steps <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        withSonarQubeEnv<span class=\"token punctuation\">(</span><span class=\"token string\">'sonar-k8s'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>   //jenkins集成sonarqube名称sonar-k8s</pre></td></tr><tr><td data-num=\"73\"></td><td><pre>          container<span class=\"token punctuation\">(</span><span class=\"token string\">'sonar'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>            <span class=\"token function\">sh</span> <span class=\"token string\">'pwd &amp;&amp; ls -l'</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>            <span class=\"token function\">sh</span> <span class=\"token string\">'sonar-scanner \\</pre></td></tr><tr><td data-num=\"76\"></td><td><pre>                  -Dsonar.projectKey=springboot-cicd \\</pre></td></tr><tr><td data-num=\"77\"></td><td><pre>                  -Dsonar.java.binaries=src \\</pre></td></tr><tr><td data-num=\"78\"></td><td><pre>                  -Dsonar.sources=.'</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>\t\t</pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    stage<span class=\"token punctuation\">(</span><span class=\"token string\">'检查扫描结果'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>      steps <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>        container<span class=\"token punctuation\">(</span><span class=\"token string\">'sonar'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>          script <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>            timeout<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>              def qg <span class=\"token operator\">=</span> waitForQualityGate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>              <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>qg.status <span class=\"token operator\">!=</span> <span class=\"token string\">'OK'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>                error <span class=\"token string\">\"Sonarqube代码检查失败, error的原因 <span class=\"token variable\">$&#123;qg.status&#125;</span>\"</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>              <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>\t</pre></td></tr><tr><td data-num=\"97\"></td><td><pre>    stage<span class=\"token punctuation\">(</span><span class=\"token string\">'代码编译'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>      steps <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>        container<span class=\"token punctuation\">(</span><span class=\"token string\">'maven'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>\t\t  <span class=\"token function\">sh</span> <span class=\"token string\">'echo \"代码编译\"'</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>\t    </pre></td></tr><tr><td data-num=\"104\"></td><td><pre>    stage<span class=\"token punctuation\">(</span><span class=\"token string\">'制作Docker镜像'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>      steps <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>        container<span class=\"token punctuation\">(</span><span class=\"token string\">'docker'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>\t\t  <span class=\"token function\">sh</span> <span class=\"token string\">'echo \"制作Docker镜像\"'</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>\t</pre></td></tr><tr><td data-num=\"111\"></td><td><pre>    stage<span class=\"token punctuation\">(</span><span class=\"token string\">'交付应用至K8S'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>      steps <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>        container<span class=\"token punctuation\">(</span><span class=\"token string\">'kubectl'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>\t\t  <span class=\"token function\">sh</span> <span class=\"token string\">'echo \"交付应用至K8S\"'</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>\t\t</pre></td></tr><tr><td data-num=\"118\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/hbERBmv.png\" alt=\"6.png\" /></p>\n<h5 id=\"25-代码编译\"><a class=\"anchor\" href=\"#25-代码编译\">#</a> 2.5 代码编译</h5>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>pipeline <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  agent <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    kubernetes <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      cloud <span class=\"token string\">'kubernetes'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      yaml <span class=\"token string\">''</span>'</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        apiVersion: v1</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        kind: Pod</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        spec:</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>          imagePullSecrets:</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>          - name: harbor-admin</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>          volumes:</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>          - name: data</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            nfs:</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>              server: <span class=\"token number\">192.168</span>.1.75</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>              path: /data/nfs/maven</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>          - name: dockersocket</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            hostPath:</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>              path: /run/docker.sock</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>          containers:</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>          - name: maven</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            image: s.hmallleasing.com/base/maven:3.8.6</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            imagePullPolicy: IfNotPresent</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            command: <span class=\"token punctuation\">[</span><span class=\"token string\">\"cat\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            tty: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            volumeMounts:</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            - name: data</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>              mountPath: /root/.m2</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>          - name: nodejs</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            image: s.hmallleasing.com/base/nodejs:14.20</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            imagePullPolicy: IfNotPresent</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            command: <span class=\"token punctuation\">[</span><span class=\"token string\">\"cat\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            tty: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>          - name: sonar</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            image: s.hmallleasing.com/base/sonar-scanner:2.3.0</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            imagePullPolicy: IfNotPresent</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            command: <span class=\"token punctuation\">[</span><span class=\"token string\">\"cat\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            tty: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>          - name: <span class=\"token function\">docker</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            image: s.hmallleasing.com/base/docker:20.10</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            imagePullPolicy: IfNotPresent</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            command: <span class=\"token punctuation\">[</span><span class=\"token string\">\"cat\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            tty: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            volumeMounts:</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            - name: dockersocket</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>              mountPath: /run/docker.sock</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>          - name: kubectl</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            image: s.hmallleasing.com/base/kubectl:1.32.3</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            imagePullPolicy: IfNotPresent</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            command: <span class=\"token punctuation\">[</span><span class=\"token string\">\"cat\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            tty: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>      <span class=\"token string\">''</span>'</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"55\"></td><td><pre>  environment<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    //定义git变量</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    Git_Id <span class=\"token operator\">=</span> <span class=\"token string\">\"gitlab-root-token\"</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    Git_Url <span class=\"token operator\">=</span> <span class=\"token string\">\"http://gitlab.hmallleasing.com/root/springboot-cicd.git\"</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"61\"></td><td><pre>  stages <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    stage<span class=\"token punctuation\">(</span><span class=\"token string\">'获取代码'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>      steps <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        container<span class=\"token punctuation\">(</span><span class=\"token string\">'maven'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t\t  checkout scmGit<span class=\"token punctuation\">(</span>branches: <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>name: <span class=\"token string\">'*/master'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>, extensions: <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>, userRemoteConfigs: <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>credentialsId: <span class=\"token string\">\"<span class=\"token variable\">$&#123;Git_Id&#125;</span>\"</span>, url: <span class=\"token string\">\"<span class=\"token variable\">$&#123;Git_Url&#125;</span>\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t\t  <span class=\"token function\">sh</span> <span class=\"token string\">'pwd &amp;&amp; ls'</span> \t\t  </pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    stage<span class=\"token punctuation\">(</span><span class=\"token string\">'代码扫描'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>      steps <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        withSonarQubeEnv<span class=\"token punctuation\">(</span><span class=\"token string\">'sonar-k8s'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>   //jenkins集成sonarqube名称sonar-k8s</pre></td></tr><tr><td data-num=\"73\"></td><td><pre>          container<span class=\"token punctuation\">(</span><span class=\"token string\">'sonar'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>            <span class=\"token function\">sh</span> <span class=\"token string\">'pwd &amp;&amp; ls -l'</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>            <span class=\"token function\">sh</span> <span class=\"token string\">'sonar-scanner \\</pre></td></tr><tr><td data-num=\"76\"></td><td><pre>                  -Dsonar.projectKey=springboot-cicd \\</pre></td></tr><tr><td data-num=\"77\"></td><td><pre>                  -Dsonar.java.binaries=src \\</pre></td></tr><tr><td data-num=\"78\"></td><td><pre>                  -Dsonar.sources=.'</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>\t\t</pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    stage<span class=\"token punctuation\">(</span><span class=\"token string\">'检查扫描结果'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>      steps <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>        container<span class=\"token punctuation\">(</span><span class=\"token string\">'sonar'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>          script <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>            timeout<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>              def qg <span class=\"token operator\">=</span> waitForQualityGate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>              <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>qg.status <span class=\"token operator\">!=</span> <span class=\"token string\">'OK'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>                error <span class=\"token string\">\"Sonarqube代码检查失败, error的原因 <span class=\"token variable\">$&#123;qg.status&#125;</span>\"</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>              <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>\t </pre></td></tr><tr><td data-num=\"97\"></td><td><pre>    stage<span class=\"token punctuation\">(</span><span class=\"token string\">'编译代码'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>      steps <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>        container<span class=\"token punctuation\">(</span><span class=\"token string\">'maven'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>          <span class=\"token function\">sh</span> <span class=\"token string\">'pwd &amp;&amp; ls -l'</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>          <span class=\"token function\">sh</span> <span class=\"token string\">'mvn package -Dmaven.test.skip=true'</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>          <span class=\"token function\">sh</span> <span class=\"token string\">'pwd &amp;&amp; ls -l target/*'</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>\t</pre></td></tr><tr><td data-num=\"106\"></td><td><pre>    stage<span class=\"token punctuation\">(</span><span class=\"token string\">'制作Docker镜像'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>      steps <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>        container<span class=\"token punctuation\">(</span><span class=\"token string\">'docker'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>\t\t  <span class=\"token function\">sh</span> <span class=\"token string\">'echo \"制作Docker镜像\"'</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>\t</pre></td></tr><tr><td data-num=\"113\"></td><td><pre>    stage<span class=\"token punctuation\">(</span><span class=\"token string\">'交付应用至K8S'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>      steps <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>        container<span class=\"token punctuation\">(</span><span class=\"token string\">'kubectl'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>\t\t  <span class=\"token function\">sh</span> <span class=\"token string\">'echo \"交付应用至K8S\"'</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>\t\t</pre></td></tr><tr><td data-num=\"120\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/iv0lmND.png\" alt=\"1.png\" /></p>\n<h5 id=\"26-制作docker镜像\"><a class=\"anchor\" href=\"#26-制作docker镜像\">#</a> 2.6 制作 Docker 镜像</h5>\n<p>制作 Docker 镜像、推送到 Harbor 仓库，根据 Dockerfile 文件生成 Docker 镜像</p>\n<p><strong>1、配置 dns 解析（如果 harbor 解析至公网，无需配置此步骤）</strong></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@k8s-master01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># kubectl edit cm -n kube-system coredns</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">..</span>.</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        ready</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        hosts <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>           <span class=\"token number\">192.168</span>.1.74 gitlab.hmallleasing.com        <span class=\"token comment\">#gitalb</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>           <span class=\"token number\">192.168</span>.1.74 sonar.hmallleasing.com         <span class=\"token comment\">#sonar</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>           <span class=\"token number\">192.168</span>.1.74 jenkins.hmallleasing.com       <span class=\"token comment\">#jenkins</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>           <span class=\"token number\">192.168</span>.1.68 s.hmallleasing.com             <span class=\"token comment\">#harbor</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>           fallthrough</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        kubernetes cluster.local in-addr.arpa ip6.arpa <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">..</span>.</pre></td></tr></table></figure><p>测试解析是否生效；</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@k8s-master01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># kubectl exec -it gitlab-0 -n ops -- /bin/bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>root@gitlab-0:/<span class=\"token comment\"># ping s.hmallleasing.com</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>PING s.hmallleasing.com <span class=\"token punctuation\">(</span><span class=\"token number\">192.168</span>.1.68<span class=\"token punctuation\">)</span>: <span class=\"token number\">56</span> data bytes</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">64</span> bytes from <span class=\"token number\">192.168</span>.1.68: <span class=\"token assign-left variable\">seq</span><span class=\"token operator\">=</span><span class=\"token number\">0</span> <span class=\"token assign-left variable\">ttl</span><span class=\"token operator\">=</span><span class=\"token number\">63</span> <span class=\"token assign-left variable\">time</span><span class=\"token operator\">=</span><span class=\"token number\">0.257</span> ms</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">64</span> bytes from <span class=\"token number\">192.168</span>.1.68: <span class=\"token assign-left variable\">seq</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token assign-left variable\">ttl</span><span class=\"token operator\">=</span><span class=\"token number\">63</span> <span class=\"token assign-left variable\">time</span><span class=\"token operator\">=</span><span class=\"token number\">0.198</span> ms</pre></td></tr></table></figure><p><strong>2、配置 harbor 认证信息：系统管理 -&gt;manage credentials-&gt; 全局 -&gt;Add Credential</strong></p>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/eW8zQLR.png\" alt=\"2.png\" /></p>\n<p>3、代码扫描 Pipeline</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>pipeline <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  agent <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    kubernetes <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      cloud <span class=\"token string\">'kubernetes'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      yaml <span class=\"token string\">''</span>'</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        apiVersion: v1</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        kind: Pod</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        spec:</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>          imagePullSecrets:</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>          - name: harbor-admin</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>          volumes:</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>          - name: data</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            nfs:</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>              server: <span class=\"token number\">192.168</span>.1.75</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>              path: /data/nfs/maven</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>          - name: dockersocket</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            hostPath:</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>              path: /run/docker.sock</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>          containers:</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>          - name: maven</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            image: s.hmallleasing.com/base/maven:3.8.6</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            imagePullPolicy: IfNotPresent</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            command: <span class=\"token punctuation\">[</span><span class=\"token string\">\"cat\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            tty: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            volumeMounts:</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            - name: data</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>              mountPath: /root/.m2</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>          - name: nodejs</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            image: s.hmallleasing.com/base/nodejs:14.20</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            imagePullPolicy: IfNotPresent</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            command: <span class=\"token punctuation\">[</span><span class=\"token string\">\"cat\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            tty: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>          - name: sonar</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            image: s.hmallleasing.com/base/sonar-scanner:2.3.0</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            imagePullPolicy: IfNotPresent</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            command: <span class=\"token punctuation\">[</span><span class=\"token string\">\"cat\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            tty: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>          - name: <span class=\"token function\">docker</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            image: s.hmallleasing.com/base/docker:20.10</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            imagePullPolicy: IfNotPresent</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            command: <span class=\"token punctuation\">[</span><span class=\"token string\">\"cat\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            tty: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            volumeMounts:</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            - name: dockersocket</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>              mountPath: /run/docker.sock</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>          - name: kubectl</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            image: s.hmallleasing.com/base/kubectl:1.32.3</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            imagePullPolicy: IfNotPresent</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            command: <span class=\"token punctuation\">[</span><span class=\"token string\">\"cat\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            tty: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>      <span class=\"token string\">''</span>'</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"55\"></td><td><pre>  environment<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    //定义git变量</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    Git_Id <span class=\"token operator\">=</span> <span class=\"token string\">\"gitlab-root-token\"</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    Git_Url <span class=\"token operator\">=</span> <span class=\"token string\">\"http://gitlab.hmallleasing.com/root/springboot-cicd.git\"</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t//Harbor相关的全局变量</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    Url <span class=\"token operator\">=</span> <span class=\"token string\">\"s.hmallleasing.com\"</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    Pro <span class=\"token operator\">=</span> <span class=\"token string\">\"base\"</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    ImageName <span class=\"token operator\">=</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;Url&#125;</span>/<span class=\"token variable\">$&#123;Pro&#125;</span>/springboot\"</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    HARBOR_ID <span class=\"token operator\">=</span> <span class=\"token string\">\"harbor-auth\"</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"67\"></td><td><pre>  stages <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    stage<span class=\"token punctuation\">(</span><span class=\"token string\">'获取代码'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>      steps <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        container<span class=\"token punctuation\">(</span><span class=\"token string\">'maven'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t\t  checkout scmGit<span class=\"token punctuation\">(</span>branches: <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>name: <span class=\"token string\">'*/master'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>, extensions: <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>, userRemoteConfigs: <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>credentialsId: <span class=\"token string\">\"<span class=\"token variable\">$&#123;Git_Id&#125;</span>\"</span>, url: <span class=\"token string\">\"<span class=\"token variable\">$&#123;Git_Url&#125;</span>\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t\t  <span class=\"token function\">sh</span> <span class=\"token string\">'pwd &amp;&amp; ls'</span> \t\t  </pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    stage<span class=\"token punctuation\">(</span><span class=\"token string\">'代码扫描'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>      steps <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        withSonarQubeEnv<span class=\"token punctuation\">(</span><span class=\"token string\">'sonar-k8s'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>   //jenkins集成sonarqube名称sonar-k8s</pre></td></tr><tr><td data-num=\"79\"></td><td><pre>          container<span class=\"token punctuation\">(</span><span class=\"token string\">'sonar'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>            <span class=\"token function\">sh</span> <span class=\"token string\">'pwd &amp;&amp; ls -l'</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>            <span class=\"token function\">sh</span> <span class=\"token string\">'sonar-scanner \\</pre></td></tr><tr><td data-num=\"82\"></td><td><pre>                  -Dsonar.projectKey=springboot-cicd \\</pre></td></tr><tr><td data-num=\"83\"></td><td><pre>                  -Dsonar.java.binaries=src \\</pre></td></tr><tr><td data-num=\"84\"></td><td><pre>                  -Dsonar.sources=.'</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>\t\t</pre></td></tr><tr><td data-num=\"89\"></td><td><pre>    stage<span class=\"token punctuation\">(</span><span class=\"token string\">'检查扫描结果'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>      steps <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>        container<span class=\"token punctuation\">(</span><span class=\"token string\">'sonar'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>          script <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>            timeout<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>              def qg <span class=\"token operator\">=</span> waitForQualityGate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>              <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>qg.status <span class=\"token operator\">!=</span> <span class=\"token string\">'OK'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>                error <span class=\"token string\">\"Sonarqube代码检查失败, error的原因 <span class=\"token variable\">$&#123;qg.status&#125;</span>\"</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>              <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>\t </pre></td></tr><tr><td data-num=\"103\"></td><td><pre>    stage<span class=\"token punctuation\">(</span><span class=\"token string\">'编译代码'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>      steps <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>        container<span class=\"token punctuation\">(</span><span class=\"token string\">'maven'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>          <span class=\"token function\">sh</span> <span class=\"token string\">'pwd &amp;&amp; ls -l'</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>          <span class=\"token function\">sh</span> <span class=\"token string\">'mvn package -Dmaven.test.skip=true'</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>          <span class=\"token function\">sh</span> <span class=\"token string\">'pwd &amp;&amp; ls -l target/*'</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>\t</pre></td></tr><tr><td data-num=\"112\"></td><td><pre>    stage<span class=\"token punctuation\">(</span><span class=\"token string\">'生成镜像Tag'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>      steps <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>        container<span class=\"token punctuation\">(</span><span class=\"token string\">'maven'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>          script <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>            //本次git提交的commid  <span class=\"token punctuation\">(</span>git log <span class=\"token parameter variable\">-n1</span> <span class=\"token parameter variable\">--pretty</span><span class=\"token operator\">=</span>format:<span class=\"token string\">'%h'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>            env.COMMITID <span class=\"token operator\">=</span> sh<span class=\"token punctuation\">(</span>returnStdout: true, script: <span class=\"token string\">\"git log -n1 --pretty=format:'%h'\"</span><span class=\"token punctuation\">)</span>.trim<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>            //构建的时间   <span class=\"token punctuation\">(</span>date +%Y%m%d_%H%M%S<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>            env.BuildTime <span class=\"token operator\">=</span> sh<span class=\"token punctuation\">(</span>returnStdout: true, script: <span class=\"token string\">\"date +%Y%m%d_%H%M%S\"</span><span class=\"token punctuation\">)</span>.trim<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>            </pre></td></tr><tr><td data-num=\"121\"></td><td><pre>            //完整的镜像Tag   <span class=\"token punctuation\">(</span>c106654_20221115_133911<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>            env.ImageTag <span class=\"token operator\">=</span> COMMITID + <span class=\"token string\">\"_\"</span> +  BuildTime</pre></td></tr><tr><td data-num=\"123\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>          </pre></td></tr><tr><td data-num=\"125\"></td><td><pre>          <span class=\"token function\">sh</span> <span class=\"token string\">'echo \"镜像的Tag: $&#123;ImageTag&#125;\"'</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>    stage<span class=\"token punctuation\">(</span><span class=\"token string\">'制作Docker镜像'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>      steps <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>        container<span class=\"token punctuation\">(</span><span class=\"token string\">'docker'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>          withCredentials<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>usernamePassword<span class=\"token punctuation\">(</span>credentialsId: <span class=\"token string\">\"<span class=\"token variable\">$&#123;HARBOR_ID&#125;</span>\"</span>, passwordVariable: <span class=\"token string\">'HARBOR_PASSWORD'</span>, usernameVariable: <span class=\"token string\">'HARBOR_USER'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>              //登陆harbor</pre></td></tr><tr><td data-num=\"134\"></td><td><pre>              <span class=\"token function\">sh</span> <span class=\"token string\">'echo \"$&#123;HARBOR_PASSWORD&#125;\" | docker login $&#123;Url&#125; -u \"$&#123;HARBOR_USER&#125;\" --password-stdin'</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>              //构建镜像</pre></td></tr><tr><td data-num=\"137\"></td><td><pre>              <span class=\"token function\">sh</span> <span class=\"token string\">'docker build -t $&#123;ImageName&#125;:$&#123;ImageTag&#125; .'</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>              //推送镜像</pre></td></tr><tr><td data-num=\"139\"></td><td><pre>              <span class=\"token function\">sh</span> <span class=\"token string\">'docker push $&#123;ImageName&#125;:$&#123;ImageTag&#125;'</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>              //删除镜像</pre></td></tr><tr><td data-num=\"141\"></td><td><pre>              <span class=\"token function\">sh</span> <span class=\"token string\">'docker rmi $&#123;ImageName&#125;:$&#123;ImageTag&#125;'</span> </pre></td></tr><tr><td data-num=\"142\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>    stage<span class=\"token punctuation\">(</span><span class=\"token string\">'交付应用至K8S'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>      steps <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>        container<span class=\"token punctuation\">(</span><span class=\"token string\">'kubectl'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>\t\t  <span class=\"token function\">sh</span> <span class=\"token string\">'echo \"交付应用至K8S\"'</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>\t\t</pre></td></tr><tr><td data-num=\"153\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/Zu1zCdk.png\" alt=\"3.png\" /></p>\n<h5 id=\"27-交付应用到k8s\"><a class=\"anchor\" href=\"#27-交付应用到k8s\">#</a> 2.7 交付应用到 K8S</h5>\n<p><strong>1、将 K8S 的 kubeconfig 文件下载至本地，配置 Jenkins，将 config 文件制作为一个 Scretfile；</strong></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@k8s-master01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># sz /root/.kube/config</span></pre></td></tr></table></figure><p>配置 k8s 认证信息：系统管理 -&gt;manage credentials-&gt; 全局 -&gt;Add Credential</p>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/9AysMkZ.png\" alt=\"1.png\" /></p>\n<p><strong>2、编写 pipeline 流水线</strong></p>\n<p>在 Stage 中引用这个 config 文件，就可以操作对应的集群，部署前需做以下操作；</p>\n<ul>\n<li><em>部署的名称空间需要提前创建</em></li>\n<li><em>需要创建对应 namespace 的 Harbor 认证 Secrets -&gt;harbor-admin</em></li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@k8s-master01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># kubectl create ns dev</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span>root@k8s-master01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># kubectl create secret docker-registry harbor-admin --docker-server=s.hmallleasing.com --docker-username=admin --docker-password=passwd -n dev</span></pre></td></tr></table></figure><p><strong>3、编写 yaml 文件</strong></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>apiVersion: apps/v1</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>kind: Deployment</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>metadata:</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  name: springboot</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  namespace: <span class=\"token punctuation\">&#123;</span>NameSpace<span class=\"token punctuation\">&#125;</span>\t\t\t<span class=\"token comment\">#修改为 &#123;&#125; 特殊字符，后期好替换</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>spec:</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  replicas: <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  selector:</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    matchLabels:</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      app: spring</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  template:</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    metadata:</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      labels:</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        app: spring</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    spec:</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      imagePullSecrets:</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      - name: harbor-admin</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      containers:</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      - name: springboot</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        image: <span class=\"token punctuation\">&#123;</span>Image<span class=\"token punctuation\">&#125;</span>\t\t\t<span class=\"token comment\"># 修改为 &#123;&#125; 特殊字符，后期好替换</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        ports:</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        - name: http</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>          containerPort: <span class=\"token number\">8080</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        env:            <span class=\"token comment\"># 传递初始堆内存和最大堆内存占用</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        - name: XMS_OPTS</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>          valueFrom:</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            resourceFieldRef:</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>              resource: requests.memory</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        - name: XMX_OPTS</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>          valueFrom:</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            resourceFieldRef:</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>              resource: limits.memory</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        resources:</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>          requests:</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            memory: 150Mi</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>          limits:</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            memory: 300Mi</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        readinessProbe:         <span class=\"token comment\"># 就绪探针；如果端口不存活，则从负载均衡中移除</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>          tcpSocket:</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            port: http          <span class=\"token comment\"># http 是一个名字；它会获取这个名字对应的端口；</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>          initialDelaySeconds: <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>          failureThreshold: <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        livenessProbe:          <span class=\"token comment\"># 存活探针；获取 url，状态码不对那么则触发重启操作</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>          httpGet:</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            path: /</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            port: http</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>          initialDelaySeconds: <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>          failureThreshold: <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>---</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>apiVersion: v1</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>kind: Service</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>metadata:</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>  name: spring-svc</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>  namespace: <span class=\"token punctuation\">&#123;</span>namespace<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>spec:</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>  selector:</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    app: spring</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>  ports:</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>  - port: <span class=\"token number\">8080</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    targetPort: <span class=\"token number\">8080</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>---</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>apiVersion: networking.k8s.io/v1</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>kind: Ingress</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>metadata:</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>  name: springboot-ingress</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>  namespace: <span class=\"token punctuation\">&#123;</span>namespace<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>spec:</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>  ingressClassName: <span class=\"token string\">\"nginx\"</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>  rules:</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>  - host: <span class=\"token string\">\"&#123;host&#125;\"</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    http:</pre></td></tr><tr><td data-num=\"73\"></td><td><pre>      paths:</pre></td></tr><tr><td data-num=\"74\"></td><td><pre>      - path: /</pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        pathType: Prefix</pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        backend:</pre></td></tr><tr><td data-num=\"77\"></td><td><pre>          service:</pre></td></tr><tr><td data-num=\"78\"></td><td><pre>            name: spring-svc</pre></td></tr><tr><td data-num=\"79\"></td><td><pre>            port:</pre></td></tr><tr><td data-num=\"80\"></td><td><pre>              number: <span class=\"token number\">8080</span></pre></td></tr></table></figure><p><strong>4、编写交付 K8spipeline</strong></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>pipeline <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  agent <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    kubernetes <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      cloud <span class=\"token string\">'kubernetes'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      yaml <span class=\"token string\">''</span>'</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        apiVersion: v1</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        kind: Pod</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        spec:</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>          imagePullSecrets:</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>          - name: harbor-admin</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>          volumes:</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>          - name: data</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            nfs:</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>              server: <span class=\"token number\">192.168</span>.1.75</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>              path: /data/nfs/maven</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>          - name: dockersocket</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            hostPath:</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>              path: /run/docker.sock</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>          containers:</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>          - name: maven</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            image: s.hmallleasing.com/base/maven:3.8.6</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            imagePullPolicy: IfNotPresent</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            command: <span class=\"token punctuation\">[</span><span class=\"token string\">\"cat\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            tty: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            volumeMounts:</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            - name: data</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>              mountPath: /root/.m2</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>          - name: nodejs</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            image: s.hmallleasing.com/base/nodejs:14.20</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            imagePullPolicy: IfNotPresent</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            command: <span class=\"token punctuation\">[</span><span class=\"token string\">\"cat\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            tty: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>          - name: sonar</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            image: s.hmallleasing.com/base/sonar-scanner:2.3.0</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            imagePullPolicy: IfNotPresent</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            command: <span class=\"token punctuation\">[</span><span class=\"token string\">\"cat\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            tty: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>          - name: <span class=\"token function\">docker</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            image: s.hmallleasing.com/base/docker:20.10</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            imagePullPolicy: IfNotPresent</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            command: <span class=\"token punctuation\">[</span><span class=\"token string\">\"cat\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            tty: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            volumeMounts:</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            - name: dockersocket</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>              mountPath: /run/docker.sock</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>          - name: kubectl</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            image: s.hmallleasing.com/base/kubectl:1.32.3</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            imagePullPolicy: IfNotPresent</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            command: <span class=\"token punctuation\">[</span><span class=\"token string\">\"cat\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            tty: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>      <span class=\"token string\">''</span>'</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"55\"></td><td><pre>  environment<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    //定义git变量</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    Git_Id <span class=\"token operator\">=</span> <span class=\"token string\">\"gitlab-root-token\"</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    Git_Url <span class=\"token operator\">=</span> <span class=\"token string\">\"http://gitlab.hmallleasing.com/root/springboot-cicd.git\"</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t//Harbor相关的全局变量</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    Url <span class=\"token operator\">=</span> <span class=\"token string\">\"s.hmallleasing.com\"</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    Pro <span class=\"token operator\">=</span> <span class=\"token string\">\"base\"</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    ImageName <span class=\"token operator\">=</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;Url&#125;</span>/<span class=\"token variable\">$&#123;Pro&#125;</span>/springboot\"</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    HARBOR_ID <span class=\"token operator\">=</span> <span class=\"token string\">\"harbor-auth\"</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t//对外暴露的域名</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    Ingress_Host <span class=\"token operator\">=</span> <span class=\"token string\">\"spring-dev.hmallleasing.com\"</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"70\"></td><td><pre>  stages <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    stage<span class=\"token punctuation\">(</span><span class=\"token string\">'获取代码'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>      steps <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        container<span class=\"token punctuation\">(</span><span class=\"token string\">'maven'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t\t  checkout scmGit<span class=\"token punctuation\">(</span>branches: <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>name: <span class=\"token string\">'*/master'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>, extensions: <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>, userRemoteConfigs: <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>credentialsId: <span class=\"token string\">\"<span class=\"token variable\">$&#123;Git_Id&#125;</span>\"</span>, url: <span class=\"token string\">\"<span class=\"token variable\">$&#123;Git_Url&#125;</span>\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t\t  <span class=\"token function\">sh</span> <span class=\"token string\">'pwd &amp;&amp; ls'</span> \t\t  </pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    stage<span class=\"token punctuation\">(</span><span class=\"token string\">'代码扫描'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>      steps <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        withSonarQubeEnv<span class=\"token punctuation\">(</span><span class=\"token string\">'sonar-k8s'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>   //jenkins集成sonarqube名称sonar-k8s</pre></td></tr><tr><td data-num=\"82\"></td><td><pre>          container<span class=\"token punctuation\">(</span><span class=\"token string\">'sonar'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>            <span class=\"token function\">sh</span> <span class=\"token string\">'pwd &amp;&amp; ls -l'</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>            <span class=\"token function\">sh</span> <span class=\"token string\">'sonar-scanner \\</pre></td></tr><tr><td data-num=\"85\"></td><td><pre>                  -Dsonar.projectKey=springboot-cicd \\</pre></td></tr><tr><td data-num=\"86\"></td><td><pre>                  -Dsonar.java.binaries=src \\</pre></td></tr><tr><td data-num=\"87\"></td><td><pre>                  -Dsonar.sources=.'</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>\t\t</pre></td></tr><tr><td data-num=\"92\"></td><td><pre>    stage<span class=\"token punctuation\">(</span><span class=\"token string\">'检查扫描结果'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>      steps <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>        container<span class=\"token punctuation\">(</span><span class=\"token string\">'sonar'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>          script <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>            timeout<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>              def qg <span class=\"token operator\">=</span> waitForQualityGate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>              <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>qg.status <span class=\"token operator\">!=</span> <span class=\"token string\">'OK'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>                error <span class=\"token string\">\"Sonarqube代码检查失败, error的原因 <span class=\"token variable\">$&#123;qg.status&#125;</span>\"</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>              <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>\t </pre></td></tr><tr><td data-num=\"106\"></td><td><pre>    stage<span class=\"token punctuation\">(</span><span class=\"token string\">'编译代码'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>      steps <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>        container<span class=\"token punctuation\">(</span><span class=\"token string\">'maven'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>          <span class=\"token function\">sh</span> <span class=\"token string\">'pwd &amp;&amp; ls -l'</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>          <span class=\"token function\">sh</span> <span class=\"token string\">'mvn package -Dmaven.test.skip=true'</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>          <span class=\"token function\">sh</span> <span class=\"token string\">'pwd &amp;&amp; ls -l target/*'</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>\t</pre></td></tr><tr><td data-num=\"115\"></td><td><pre>    stage<span class=\"token punctuation\">(</span><span class=\"token string\">'生成镜像Tag'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>      steps <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>        container<span class=\"token punctuation\">(</span><span class=\"token string\">'maven'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>          script <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>            //本次git提交的commid  <span class=\"token punctuation\">(</span>git log <span class=\"token parameter variable\">-n1</span> <span class=\"token parameter variable\">--pretty</span><span class=\"token operator\">=</span>format:<span class=\"token string\">'%h'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>            env.COMMITID <span class=\"token operator\">=</span> sh<span class=\"token punctuation\">(</span>returnStdout: true, script: <span class=\"token string\">\"git log -n1 --pretty=format:'%h'\"</span><span class=\"token punctuation\">)</span>.trim<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>            //构建的时间   <span class=\"token punctuation\">(</span>date +%Y%m%d_%H%M%S<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>            env.BuildTime <span class=\"token operator\">=</span> sh<span class=\"token punctuation\">(</span>returnStdout: true, script: <span class=\"token string\">\"date +%Y%m%d_%H%M%S\"</span><span class=\"token punctuation\">)</span>.trim<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>            </pre></td></tr><tr><td data-num=\"124\"></td><td><pre>            //完整的镜像Tag   <span class=\"token punctuation\">(</span>c106654_20221115_133911<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>            env.ImageTag <span class=\"token operator\">=</span> COMMITID + <span class=\"token string\">\"_\"</span> +  BuildTime</pre></td></tr><tr><td data-num=\"126\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>          </pre></td></tr><tr><td data-num=\"128\"></td><td><pre>          <span class=\"token function\">sh</span> <span class=\"token string\">'echo \"镜像的Tag: $&#123;ImageTag&#125;\"'</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>    stage<span class=\"token punctuation\">(</span><span class=\"token string\">'制作Docker镜像'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>      steps <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>        container<span class=\"token punctuation\">(</span><span class=\"token string\">'docker'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>          withCredentials<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>usernamePassword<span class=\"token punctuation\">(</span>credentialsId: <span class=\"token string\">\"<span class=\"token variable\">$&#123;HARBOR_ID&#125;</span>\"</span>, passwordVariable: <span class=\"token string\">'HARBOR_PASSWORD'</span>, usernameVariable: <span class=\"token string\">'HARBOR_USER'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>              //登陆harbor</pre></td></tr><tr><td data-num=\"137\"></td><td><pre>              <span class=\"token function\">sh</span> <span class=\"token string\">'echo \"$&#123;HARBOR_PASSWORD&#125;\" | docker login $&#123;Url&#125; -u \"$&#123;HARBOR_USER&#125;\" --password-stdin'</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>              //构建镜像</pre></td></tr><tr><td data-num=\"140\"></td><td><pre>              <span class=\"token function\">sh</span> <span class=\"token string\">'docker build -t $&#123;ImageName&#125;:$&#123;ImageTag&#125; .'</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>              //推送镜像</pre></td></tr><tr><td data-num=\"142\"></td><td><pre>              <span class=\"token function\">sh</span> <span class=\"token string\">'docker push $&#123;ImageName&#125;:$&#123;ImageTag&#125;'</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>              //删除镜像</pre></td></tr><tr><td data-num=\"144\"></td><td><pre>              <span class=\"token function\">sh</span> <span class=\"token string\">'docker rmi $&#123;ImageName&#125;:$&#123;ImageTag&#125;'</span> </pre></td></tr><tr><td data-num=\"145\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>    stage<span class=\"token punctuation\">(</span><span class=\"token string\">'交付应用至K8S'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>      steps <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>        container<span class=\"token punctuation\">(</span><span class=\"token string\">'kubectl'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>          withCredentials<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>file<span class=\"token punctuation\">(</span>credentialsId: <span class=\"token string\">'kubeconfig'</span>, variable: <span class=\"token string\">'KUBECONFIG'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>              <span class=\"token function\">sh</span> <span class=\"token string\">'mkdir -p /root/.kube &amp;&amp; echo $&#123;KUBECONFIG&#125; >/root/.kube/config'</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>              //替换depoy.yaml中<span class=\"token punctuation\">&#123;</span>namespace<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#123;</span>Image<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#123;</span>host<span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"156\"></td><td><pre>              <span class=\"token function\">sh</span> <span class=\"token string\">'cat deploy.yaml'</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>              <span class=\"token function\">sh</span> <span class=\"token string\">'sed -i \"s#&#123;namespace&#125;#dev#g\" deploy.yaml'</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>              <span class=\"token function\">sh</span> <span class=\"token string\">'sed -i \"s#&#123;Image&#125;#$&#123;ImageName&#125;:$&#123;ImageTag&#125;#g\" deploy.yaml'</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>              <span class=\"token function\">sh</span> <span class=\"token string\">'sed -i \"s#&#123;host&#125;#$&#123;Ingress_Host&#125;#g\" deploy.yaml'</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>              <span class=\"token function\">sh</span> <span class=\"token string\">'cat deploy.yaml'</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>              <span class=\"token function\">sh</span> <span class=\"token string\">'kubectl apply -f deploy.yaml'</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>\t\t</pre></td></tr><tr><td data-num=\"167\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"168\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/CtUFtcP.png\" alt=\"1.png\" /></p>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/1F41fQQ.png\" alt=\"2.png\" /></p>\n<h5 id=\"28-配置自动触发构建\"><a class=\"anchor\" href=\"#28-配置自动触发构建\">#</a> 2.8 配置自动触发构建</h5>\n<p><strong>Jenkins 配置：</strong></p>\n<p>#Gitee 配置参考连接 https://blog.csdn.net/hali90s/article/details/126991514</p>\n<p>#Gitlab 配置参考连接 https://blog.csdn.net/weixin_58423196/article/details/146407508</p>\n<p>1、安装插件：<a href=\"https://so.csdn.net/so/search?q=GitLab&amp;spm=1001.2101.3001.7020\">GitLab</a> Plugin</p>\n<p>2、配置 -&gt;Triggers</p>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/1Chji1c.png\" alt=\"1.png\" /></p>\n<p>点击右下角的 &quot;Advanced&quot;，进入触发器的高级配置，在 &quot;Allowed branched&quot; 部分按需选择 webhook 作用于哪些分支，然后点击 &quot;Generate&quot; 生成唯一的 secret token。</p>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/YbtVvMh.png\" alt=\"2.png\" /></p>\n<p><strong>Gitlab 配置：</strong></p>\n<p>1、设置 -&gt; 网络 -&gt; 外部请求 -&gt; 允许 Webhook 和服务对本地网络的请求</p>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/jlcu5UF.png\" alt=\"4.png\" /></p>\n<p>1、Gitlab 点击对应项目 -&gt; 设置 -&gt;Webhooks</p>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/odZ46yy.png\" alt=\"4.png\" /></p>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/UEqybx9.png\" alt=\"6.png\" /></p>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/KBeFU1v.png\" alt=\"1.png\" /></p>\n<h4 id=\"三-cd阶段\"><a class=\"anchor\" href=\"#三-cd阶段\">#</a> 三、CD 阶段</h4>\n<p>CD 阶段：Jenkins/CD-&gt; 拉取 Harbor 仓库对应项目镜像 -&gt; 部署应用至 K8S 生产环境；</p>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/reddUL2.jpeg\" alt=\"1.jpg\" /></p>\n<h5 id=\"31-获取完整的镜像名称\"><a class=\"anchor\" href=\"#31-获取完整的镜像名称\">#</a> 3.1 获取完整的镜像名称</h5>\n<p><strong>1、获取 Harbor 镜像 Tag</strong></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@k8s-master01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># curl -s -uadmin:passwd -H'Content-Type: application/json' -X GET https://s.hmallleasing.com/v2/base/springboot/tags/list | sed -r 's#(\\&#123;.*\\[)(.*)(\\]\\&#125;)#\\2#g' | xargs -d \",\" -n1 | xargs -n1 | sort -t \"_\" -k2 -k3 -nr | head -5</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>3e24684_20230326_153018</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>5041fbd_20230326_144343</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>5da8d15_20230326_143533</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>5da8d15_20230326_005207</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>5da8d15_20230326_004940</pre></td></tr></table></figure><p><strong>2、安装插件</strong></p>\n<p>系统管理 -&gt; 插件管理 -&gt;Active Choices</p>\n<p><strong>3、级联变量的方式来提取对应的 tag</strong><br />\n<strong> 变量：Harbor_Url</strong><br />\n 项目 -&gt; 配置 -&gt; 参数化构建 -&gt;Active Choices Parameter<br />\n 语法：return [&quot;<a href=\"http://s.hmallleasing.com\">s.hmallleasing.com</a>&quot;,&quot;<a href=\"http://harbor.hmallleasing.com\">harbor.hmallleasing.com</a>&quot;]</p>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/pTJQ8re.png\" alt=\"2.png\" /></p>\n<p><strong>变量：Harbor_Pro</strong><br />\n 项目 -&gt; 配置 -&gt; 参数化构建 -&gt;<strong>Active Choices Parameter</strong><br />\n 语法：return [&quot;base&quot;,&quot;nf-flms&quot;,&quot;ops&quot;,&quot;xx&quot;]</p>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/TVJfqv7.png\" alt=\"3.png\" /></p>\n<p><strong>变量：Image_Name</strong><br />\n 项目 -&gt; 配置 -&gt; 参数化构建 -&gt;<strong>Active Choices Parameter</strong><br />\n 语法：return [&quot;springboot&quot;,&quot;nf-flms-statistics&quot;,&quot;nf-flms-order&quot;,&quot;xx&quot;]</p>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/zDHvJft.png\" alt=\"4.png\" /></p>\n<p><strong>级联变量：Image_Tag</strong></p>\n<p>项目 -&gt; 配置 -&gt; 参数化构建 -&gt;<strong>Active Choices Reactive Parameter</strong><br />\n 语法：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>def get_tag <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"bash\"</span>, <span class=\"token string\">\"-c\"</span>, <span class=\"token string\">\"curl -s -uadmin:passwd -H'Content-Type: application/json' -X GET https://s.hmallleasing.com/v2/base/springboot/tags/list | sed -r 's#(<span class=\"token entity\" title=\"\\\\\">\\\\</span>&#123;.*<span class=\"token entity\" title=\"\\\\\">\\\\</span>[)(.*)(<span class=\"token entity\" title=\"\\\\\">\\\\</span>]<span class=\"token entity\" title=\"\\\\\">\\\\</span>&#125;)#<span class=\"token entity\" title=\"\\\\\">\\\\</span>2#g' | xargs -d ',' -n1 | xargs -n1 | sort -t '_' -k2 -k3 -nr | head -5\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin class-name\">return</span> get_tag.execute<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>.text.tokenize<span class=\"token punctuation\">(</span><span class=\"token string\">\"<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/TnMaVGW.png\" alt=\"1.png\" /></p>\n<p>级联变量：Harbor_Url,Harbor_Pro,Image_Name</p>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/gpzEcvH.png\" alt=\"2.png\" /></p>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/xwYX0Db.png\" alt=\"5.png\" /></p>\n<p><strong>4、编写 pipeline 输出完整的镜像名称</strong></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>pipeline <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  agent <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    kubernetes <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      cloud <span class=\"token string\">'kubernetes'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      yaml <span class=\"token string\">''</span>'</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        apiVersion: v1</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        kind: Pod</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        spec:</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>          imagePullSecrets:</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>          - name: harbor-admin</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>          containers:</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>          - name: kubectl</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            image: s.hmallleasing.com/base/kubectl:1.32.3</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            imagePullPolicy: IfNotPresent</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            command: <span class=\"token punctuation\">[</span><span class=\"token string\">\"cat\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            tty: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token string\">''</span>'</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  environment <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      Full_Image <span class=\"token operator\">=</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;Harbor_Url&#125;</span>/<span class=\"token variable\">$&#123;Harbor_Pro&#125;</span>/<span class=\"token variable\">$&#123;Image_Name&#125;</span>:<span class=\"token variable\">$&#123;Image_Tag&#125;</span>\"</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  stages <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    stage<span class=\"token punctuation\">(</span><span class=\"token string\">'输出完整的镜像名称'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      steps <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token function\">sh</span> <span class=\"token string\">'echo 镜像名称-tag: $&#123;Full_Image&#125;'</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/KjO5RQx.png\" alt=\"6.png\" /></p>\n<h5 id=\"32-生产环境中部署对应至k8s\"><a class=\"anchor\" href=\"#32-生产环境中部署对应至k8s\">#</a> 3.2 生产环境中部署对应至 K8S</h5>\n<p>1、编写 yaml</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@k8s-master01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># cat deploy-prod.yaml </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>apiVersion: apps/v1</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>kind: Deployment</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>metadata:</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  name: springboot</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  namespace: prod\t\t\t<span class=\"token comment\">#修改为 &#123;&#125; 特殊字符，后期好替换</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>spec:</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  replicas: <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  selector:</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    matchLabels:</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      app: spring</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  template:</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    metadata:</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      labels:</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        app: spring</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    spec:</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      imagePullSecrets:</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      - name: harbor-admin</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      containers:</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      - name: springboot</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        image: s.hmallleasing.com/base/springboot:f04e3f0_20250611_185645\t\t\t<span class=\"token comment\"># 修改为 &#123;&#125; 特殊字符，后期好替换</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        ports:</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        - name: http</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>          containerPort: <span class=\"token number\">8080</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        env:            <span class=\"token comment\"># 传递初始堆内存和最大堆内存占用</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        - name: XMS_OPTS</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>          valueFrom:</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            resourceFieldRef:</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>              resource: requests.memory</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        - name: XMX_OPTS</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>          valueFrom:</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            resourceFieldRef:</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>              resource: limits.memory</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        resources:</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>          requests:</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            memory: 150Mi</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>          limits:</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            memory: 300Mi</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        readinessProbe:         <span class=\"token comment\"># 就绪探针；如果端口不存活，则从负载均衡中移除</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>          tcpSocket:</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            port: http          <span class=\"token comment\"># http 是一个名字；它会获取这个名字对应的端口；</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>          initialDelaySeconds: <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>          failureThreshold: <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        livenessProbe:          <span class=\"token comment\"># 存活探针；获取 url，状态码不对那么则触发重启操作</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>          httpGet:</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            path: /</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            port: http</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>          initialDelaySeconds: <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>          failureThreshold: <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>---</pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>apiVersion: v1</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>kind: Service</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>metadata:</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>  name: spring-svc</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>  namespace: prod</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>spec:</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>  selector:</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    app: spring</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>  ports:</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>  - port: <span class=\"token number\">8080</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    targetPort: <span class=\"token number\">8080</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>---</pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>apiVersion: networking.k8s.io/v1</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>kind: Ingress</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>metadata:</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>  name: springboot-ingress</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>  namespace: prod</pre></td></tr><tr><td data-num=\"72\"></td><td><pre>spec:</pre></td></tr><tr><td data-num=\"73\"></td><td><pre>  ingressClassName: <span class=\"token string\">\"nginx\"</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>  rules:</pre></td></tr><tr><td data-num=\"75\"></td><td><pre>  - host: <span class=\"token string\">\"spring-prod.hmallleasing.com\"</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    http:</pre></td></tr><tr><td data-num=\"77\"></td><td><pre>      paths:</pre></td></tr><tr><td data-num=\"78\"></td><td><pre>      - path: /</pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        pathType: Prefix</pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        backend:</pre></td></tr><tr><td data-num=\"81\"></td><td><pre>          service:</pre></td></tr><tr><td data-num=\"82\"></td><td><pre>            name: spring-svc</pre></td></tr><tr><td data-num=\"83\"></td><td><pre>            port:</pre></td></tr><tr><td data-num=\"84\"></td><td><pre>              number: <span class=\"token number\">8080</span></pre></td></tr></table></figure><p>2、部署应用</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@k8s-master01 java<span class=\"token punctuation\">]</span><span class=\"token comment\"># kubectl create ns prod</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span>root@k8s-master01 java<span class=\"token punctuation\">]</span><span class=\"token comment\"># kubectl create secret docker-registry harbor-admin --docker-server=s.hmallleasing.com --docker-username=admin --docker-password=passwd -n prod</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">[</span>root@k8s-master01 java<span class=\"token punctuation\">]</span><span class=\"token comment\"># kubectl apply -f deploy-prod.yaml</span></pre></td></tr></table></figure><h5 id=\"33-cd流水线部署指定tag版本到k8s生产环境\"><a class=\"anchor\" href=\"#33-cd流水线部署指定tag版本到k8s生产环境\">#</a> 3.3 CD 流水线部署指定 Tag 版本到 K8S 生产环境</h5>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>pipeline <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  agent <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    kubernetes <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      cloud <span class=\"token string\">'kubernetes'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      yaml <span class=\"token string\">''</span>'</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        apiVersion: v1</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        kind: Pod</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        spec:</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>          imagePullSecrets:</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>          - name: harbor-admin</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>          containers:</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>          - name: kubectl</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            image: s.hmallleasing.com/ops/kubectl:1.22.6</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            imagePullPolicy: IfNotPresent</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            command: <span class=\"token punctuation\">[</span><span class=\"token string\">\"cat\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            tty: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token string\">''</span>'</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  environment <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      Full_Image <span class=\"token operator\">=</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;Harbor_Url&#125;</span>/<span class=\"token variable\">$&#123;Harbor_Pro&#125;</span>/<span class=\"token variable\">$&#123;Image_Name&#125;</span>:<span class=\"token variable\">$&#123;Image_Tag&#125;</span>\"</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  stages <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    stage<span class=\"token punctuation\">(</span><span class=\"token string\">'输出完整的镜像名称'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      steps <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token function\">sh</span> <span class=\"token string\">'echo 镜像名称-tag: $&#123;Full_Image&#125;'</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    stage<span class=\"token punctuation\">(</span><span class=\"token string\">'部署应用至K8S'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      steps <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>          withCredentials<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>file<span class=\"token punctuation\">(</span>credentialsId: <span class=\"token string\">'kubeconfig'</span>, variable: <span class=\"token string\">'KUBECONFIG'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            container<span class=\"token punctuation\">(</span><span class=\"token string\">'kubectl'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>              <span class=\"token function\">sh</span> <span class=\"token string\">'mkdir -p ~/.kube &amp;&amp; echo $&#123;KUBECONFIG&#125; >> ~/.kube/config'</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>              <span class=\"token function\">sh</span> <span class=\"token string\">'kubectl set image deployment/$&#123;Image_Name&#125; $&#123;Image_Name&#125;=$&#123;Full_Image&#125; -n prod'</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/n1DHjdK.png\" alt=\"7.png\" /></p>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/n1DHjdK.png\" alt=\"7.png\" /></p>\n<h5 id=\"34-询问是否需要回退\"><a class=\"anchor\" href=\"#34-询问是否需要回退\">#</a> 3.4 询问是否需要回退</h5>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>pipeline <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  agent <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    kubernetes <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      cloud <span class=\"token string\">'kubernetes'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      yaml <span class=\"token string\">''</span>'</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        apiVersion: v1</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        kind: Pod</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        spec:</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>          imagePullSecrets:</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>          - name: harbor-admin</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>          containers:</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>          - name: kubectl</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            image: s.hmallleasing.com/ops/kubectl:1.22.6</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            imagePullPolicy: IfNotPresent</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            command: <span class=\"token punctuation\">[</span><span class=\"token string\">\"cat\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            tty: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token string\">''</span>'</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  environment <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      Full_Image <span class=\"token operator\">=</span> <span class=\"token string\">\"<span class=\"token variable\">$&#123;Harbor_Url&#125;</span>/<span class=\"token variable\">$&#123;Harbor_Pro&#125;</span>/<span class=\"token variable\">$&#123;Image_Name&#125;</span>:<span class=\"token variable\">$&#123;Image_Tag&#125;</span>\"</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  stages <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    stage<span class=\"token punctuation\">(</span><span class=\"token string\">'输出完整的镜像名称'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      steps <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token function\">sh</span> <span class=\"token string\">'echo 镜像名称-tag: $&#123;Full_Image&#125;'</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    stage<span class=\"token punctuation\">(</span><span class=\"token string\">'部署应用至K8S'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      steps <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>          withCredentials<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>file<span class=\"token punctuation\">(</span>credentialsId: <span class=\"token string\">'kubeconfig'</span>, variable: <span class=\"token string\">'KUBECONFIG'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            container<span class=\"token punctuation\">(</span><span class=\"token string\">'kubectl'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>              <span class=\"token function\">sh</span> <span class=\"token string\">'mkdir -p ~/.kube &amp;&amp; echo $&#123;KUBECONFIG&#125; >> ~/.kube/config'</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>              <span class=\"token function\">sh</span> <span class=\"token string\">'kubectl set image deployment/$&#123;Image_Name&#125; $&#123;Image_Name&#125;=$&#123;Full_Image&#125; -n prod'</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    stage<span class=\"token punctuation\">(</span><span class=\"token string\">'快速回滚'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>      steps <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>          withCredentials<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>file<span class=\"token punctuation\">(</span>credentialsId: <span class=\"token string\">'kubeconfig'</span>, variable: <span class=\"token string\">'KUBECONFIG'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            container<span class=\"token punctuation\">(</span><span class=\"token string\">'kubectl'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>              script <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                timeout<span class=\"token punctuation\">(</span>time:1 , unit: <span class=\"token string\">'HOURS'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                  def UserInput <span class=\"token operator\">=</span> input message: <span class=\"token string\">'是否回退至上一个版本'</span>, parameters: <span class=\"token punctuation\">[</span>choice<span class=\"token punctuation\">(</span>choices: <span class=\"token punctuation\">[</span><span class=\"token string\">'No'</span>, <span class=\"token string\">'Yes'</span><span class=\"token punctuation\">]</span>, name: <span class=\"token string\">'rollback'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>UserInput <span class=\"token operator\">==</span> <span class=\"token string\">\"Yes\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                    <span class=\"token function\">sh</span> <span class=\"token string\">'mkdir -p ~/.kube &amp;&amp; echo $&#123;KUBECONFIG&#125; >> ~/.kube/config'</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                    <span class=\"token function\">sh</span> <span class=\"token string\">'kubectl rollout undo deployment $&#123;Image_Name&#125; -n prod'</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                  <span class=\"token punctuation\">&#125;</span>else <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"没有选择回退\"</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>              <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/Z6xxgHC.png\" alt=\"9.png\" /></p>\n<p>#如果选择 “Yes” 继续，则回退至上一个版本，等待时间为 1 小时</p>\n<p>#如果选择 “No” 继续，则不回退至上一个版本</p>\n<p>#如果没有选择，则不回退至上一个版本</p>\n",
            "tags": [
                "DevOps"
            ]
        },
        {
            "id": "http://ixuyong.cn/posts/889219339.html",
            "url": "http://ixuyong.cn/posts/889219339.html",
            "title": "K8S基于Jenkins实现SpringCloud微服务CI与CD实践（三）",
            "date_published": "2025-06-10T02:28:36.000Z",
            "content_html": "<h3 id=\"k8s基于jenkins实现springcloud微服务ci与cd实践三\"><a class=\"anchor\" href=\"#k8s基于jenkins实现springcloud微服务ci与cd实践三\">#</a> K8S 基于 Jenkins 实现 SpringCloud 微服务 CI 与 CD 实践（三）</h3>\n",
            "tags": [
                "DevOps"
            ]
        },
        {
            "id": "http://ixuyong.cn/posts/1208493697.html",
            "url": "http://ixuyong.cn/posts/1208493697.html",
            "title": "K8S基于Jenkins实现SpringCloud微服务CI与CD实践（一）",
            "date_published": "2025-06-10T02:28:16.000Z",
            "content_html": "<h3 id=\"k8s基于jenkins实现springcloud微服务ci与cd实践一\"><a class=\"anchor\" href=\"#k8s基于jenkins实现springcloud微服务ci与cd实践一\">#</a> K8S 基于 Jenkins 实现 SpringCloud 微服务 CI 与 CD 实践（一）</h3>\n<p>CI 阶段：开发人员 -&gt; 提交代码 -&gt;gitlab 仓库 -&gt;Jenkins/CI 抓取代码 -&gt; 漏洞扫描 -&gt; 编译 -&gt; 构建镜像 -&gt; 推送 Harbor-&gt; 部署应用至 K8S 测试环境；</p>\n<p>CD 阶段：Jenkins/CD-&gt; 拉取 Harbor 仓库对应项目镜像 -&gt; 部署应用至 K8S 测试环境</p>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/reddUL2.jpeg\" alt=\"1.jpg\" /></p>\n<h4 id=\"一-部署harbor\"><a class=\"anchor\" href=\"#一-部署harbor\">#</a> 一、部署 Harbor</h4>\n<h5 id=\"11-安装基础环境\"><a class=\"anchor\" href=\"#11-安装基础环境\">#</a> 1.1 安装基础环境</h5>\n<pre><code>[root@harbor ~]# yum remove docker*\n[root@harbor ~]# yum install -y yum-utils device-mapper-persistent-data lvm2\n[root@harbor ~]# curl -o /etc/yum.repos.d/docker-ce.repo  https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\n[root@harbor ~]# yum list docker-ce --showduplicates |sort -r \n[root@harbor ~]# yum install docker-ce docker-compose -y\n\n###提示：No match for argument: python-pip\n#改成为 Centos 8已经换成python3 使用该命令解决 yum install python3-pip\n[root@harbor ~]# yum -y install python-pip\n#升级\n[root@harbor ~]# pip3 install --upgrade pip\n[root@harbor ~]# pip3 install docker-compose\n[root@Harbor ~]# docker-compose -version\n</code></pre>\n<h5 id=\"12-配置-docker-加速\"><a class=\"anchor\" href=\"#12-配置-docker-加速\">#</a> 1.2 配置 Docker 加速</h5>\n<pre><code>[root@harbor ~]# sudo mkdir -p /etc/docker\n\n#Docker加速1\n[root@harbor ~]# sudo tee /etc/docker/daemon.json &lt;&lt;-'EOF'\n&#123;\n  &quot;registry-mirrors&quot;: [\n    &quot;https://docker.credclouds.com&quot;,\n    &quot;https://k8s.credclouds.com&quot;,\n    &quot;https://quay.credclouds.com&quot;,\n    &quot;https://gcr.credclouds.com&quot;,\n    &quot;https://k8s-gcr.credclouds.com&quot;,\n    &quot;https://ghcr.credclouds.com&quot;,\n    &quot;https://do.nark.eu.org&quot;,\n    &quot;https://docker.m.daocloud.io&quot;,\n    &quot;https://docker.nju.edu.cn&quot;,\n    &quot;https://docker.mirrors.sjtug.sjtu.edu.cn&quot;,\n    &quot;https://docker.1panel.live&quot;,\n    &quot;https://docker.rainbond.cc&quot;\n  ],\n  &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;]\n&#125;\nEOF\n\n#Docker加速2\n[root@harbor ~]# sudo tee /etc/docker/daemon.json &lt;&lt;-'EOF'\n&#123;\n  &quot;registry-mirrors&quot;: [\n    &quot;https://docker.1panel.live&quot;,\n    &quot;https://hub.littlediary.cn&quot;,\n    &quot;https://docker.kejilion.pro&quot;,\n    &quot;https://docker.1ms.run&quot;,\n    &quot;https://lispy.org&quot;,\n    &quot;https://docker.xiaogenban1993.com&quot;,\n    &quot;https://docker.xuanyuan.me&quot;,\n    &quot;https://docker.mybacc.com&quot;,\n    &quot;https://docker-0.unsee.tech&quot;,\n    &quot;https://dockerpull.cn&quot;\n  ],\n  &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;]\n&#125;\nEOF\n\n[root@harbor ~]# systemctl enable docker --now\n</code></pre>\n<h5 id=\"13-装-harbor\"><a class=\"anchor\" href=\"#13-装-harbor\">#</a> 1.3 装 Harbor</h5>\n<pre><code>[root@harbor ~]# cd /soft/\n[root@harbor ~]# wget https://github.com/goharbor/harbor/releases/download/v2.6.1/harbor-offline-installer-v2.6.1.tgz\n[root@harbor soft]# tar xf harbor-offline-installer-v2.6.1.tgz\n[root@harbor soft]# cd harbor\n[root@Harbor harbor]# cp harbor.yml.tmpl harbor.yml\n[root@Harbor harbor]# cat harbor.yml\n...\nhostname: s.hmallleasing.com\n...\nhttp:\n  # port for http, default is 80. If https enabled, this port will redirect to https port\n  port: 80\n\n# https related config\nhttps:\n  # https port for harbor, default is 443\n  port: 443\n  # The path of cert and key files for nginx\n  certificate: /soft/harbor/ssl/hmallleasing.com.pem\n  private_key: /soft/harbor/ssl/hmallleasing.com.key\n...\nharbor_admin_password: Harbor12345\n[root@harbor harbor]#  ./install.sh\n</code></pre>\n<h5 id=\"14-配置-nginx-负载均衡调度\"><a class=\"anchor\" href=\"#14-配置-nginx-负载均衡调度\">#</a> 1.4 配置 Nginx 负载均衡调度</h5>\n<pre><code>[root@lb ~]# vim s.hmallleasing.com.conf\nserver &#123;\n    listen 443 ssl;\n    server_name harbor.hmallleasing.com;\n    client_max_body_size 1G; \n    ssl_prefer_server_ciphers on;\n    ssl_certificate  /etc/nginx/sslkey/_.hmallleasing.com_chain.crt;\n    ssl_certificate_key  /etc/nginx/sslkey/_.hmallleasing.com_key.key;\n    location / &#123;\n        proxy_pass http://192.168.1.134;\n#       include proxy_params;\n#       proxy_set_header Host $http_host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        \n        proxy_connect_timeout 30;\n        proxy_send_timeout 60;\n        proxy_read_timeout 60;\n        \n        proxy_buffering on;\n        proxy_buffer_size 32k;\n        proxy_buffers 4 128k;\n        proxy_temp_file_write_size 10240k;\t\t\n        proxy_max_temp_file_size 10240k;\n    &#125;\n&#125;\n\nserver &#123;\n    listen 80;\n    server_name s.hmallleasing.com;\n    return 302 https://$server_name$request_uri;\n&#125;\n</code></pre>\n<h5 id=\"15-推送镜像至-harbor\"><a class=\"anchor\" href=\"#15-推送镜像至-harbor\">#</a> 1.5 推送镜像至 Harbor</h5>\n<pre><code>[root@harbor harbor]# docker tag beae173ccac6 harbor.hmallleasing.com/ops/busybox.v1\n[root@harbor harbor]# docker login harbor.hmallleasing.com\n[root@harbor harbor]# docker push harbor.hmallleasing.com/ops/busybox.v1\n</code></pre>\n<h5 id=\"16-harbor-停止与启动\"><a class=\"anchor\" href=\"#16-harbor-停止与启动\">#</a> 1.6 Harbor 停止与启动</h5>\n<pre><code>#停用Harbor\n[root@harbor harbor]# pwd\n/soft/harbor\n[root@harbor harbor]# docker-compose down\n #启动Harbor\n[root@harbor harbor]# docker-compose up -d\n[root@harbor harbor]# docker-compose start\n</code></pre>\n<h4 id=\"二-部署gitlab\"><a class=\"anchor\" href=\"#二-部署gitlab\">#</a> 二、部署 Gitlab</h4>\n<p>通常 Gitlab 都是在独立服务器进行部署和维护，但为了更好的掌握 Kubernetes，所以本次课程采用资源清单方式将 Gitlab 以</p>\n<p>StatefulSet 方式交付到 Kubernetes 中；</p>\n<p>Gitlab 以容器方式运行，需要持久化如下几个目录中的数据：</p>\n<table>\n<thead>\n<tr>\n<th><strong>持久化本地位置</strong></th>\n<th><strong>容器位置</strong></th>\n<th><strong>使用</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>${pvc}/data</td>\n<td>/var/opt/gitlab</td>\n<td>用于存储应用程序数据</td>\n</tr>\n<tr>\n<td>${pvc}/logs</td>\n<td>/var/log/gitlab</td>\n<td>用于存储日志</td>\n</tr>\n<tr>\n<td>${pvc}/config</td>\n<td>/etc/gitlab</td>\n<td>用于存储 GitLab 配置文件</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"21下载gitlab镜像推送至harbor\"><a class=\"anchor\" href=\"#21下载gitlab镜像推送至harbor\">#</a> 2.1 下载 Gitlab 镜像推送至 Harbor</h5>\n<pre><code>[root@harbor harbor]# docker pull gitlab/gitlab-ce:14.6.0-ce.0\n[root@harbor harbor]# docker tag gitlab/gitlab-ce:14.6.0-ce.0 s.hmallleasing.com/base/gitlab-ce:14.6.0\n[root@harbor harbor]# docker login s.hmallleasing.com\n[root@harbor harbor]# docker push s.hmallleasing.com/base/gitlab-ce:14.6.0\n</code></pre>\n<h5 id=\"22-创建service\"><a class=\"anchor\" href=\"#22-创建service\">#</a> 2.2 创建 Service</h5>\n<pre><code>[root@master01 gitlab]# cat 01-gitlab-svc.yaml \napiVersion: v1\nkind: Service\nmetadata:\n  name: gitlab-svc\n  namespace: ops\nspec:\n  clusterIP: None\n  selector:\n    app: gitlab\n  ports:\n  - name: http\n    port: 80\n    targetPort: 80\n  - name: https\n    port: 443\n    targetPort: 443\n</code></pre>\n<h5 id=\"23-创建statefulset\"><a class=\"anchor\" href=\"#23-创建statefulset\">#</a> 2.3 创建 Statefulset</h5>\n<pre><code># cat 02-gitlab-sts.yaml \napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  name: gitlab\n  namespace: ops\nspec:\n  serviceName: &quot;gitlab-svc&quot;               # 关联的headlessService\n  selector:\n    matchLabels:\n      app: gitlab\n  template:\n    metadata:\n      labels:\n        app: gitlab\n    spec:\n      imagePullSecrets:\n      - name: harbor-admin\n      containers:\n      - name: gitlab-ce\n        image: s.hmallleasing.com/base/gitlab-ce:14.6.0\n        imagePullPolicy: IfNotPresent\n        env:\n        - name: GITLAB_ROOT_PASSWORD\n          value: &quot;admin123&quot;\n        - name: GITLAB_OMNIBUS_CONFIG\n          value: |\n            external_url &quot;http://gitlab.hmallleasing.com&quot;\n            gitlab_rails['time_zone'] = 'Asia/Shanghai'\n            node_exporter['enable'] = false\n            redis_exporter['enable'] = false\n            postgres_exporter['enable'] = false\n            gitlab_exporter['enable'] = false\n            grafana['enable'] = false\n            grafana['reporting_enabled'] = false\n            prometheus['enable'] = false\n            prometheus['monitor_kubernetes'] = false\n            gitlab_rails['gitlab_email_enabled'] = true\n            gitlab_rails['gitlab_email_from'] = '373370405@qq.com'  #发件邮箱\n            gitlab_rails['gitlab_email_display_name'] = 'Nfzl-Gitlab'  #发件人显示名称\n            gitlab_rails['smtp_enable'] = true\n            gitlab_rails['smtp_address'] = &quot;smtp.qq.com&quot;\n            gitlab_rails['smtp_port'] = 465\n            gitlab_rails['smtp_user_name'] = &quot;373370405@qq.com&quot;   #发件人邮箱账户\n            gitlab_rails['smtp_password'] = &quot;pohleicnfawvb&quot;   #发件人邮箱客户端授权码\n            gitlab_rails['smtp_domain'] = &quot;smtp.qq.com&quot;\n            gitlab_rails['smtp_authentication'] = &quot;login&quot;\n            gitlab_rails['smtp_enable_starttls_auto'] = true\n            gitlab_rails['smtp_tls'] = true\n        ports:\n        - name: http\n          containerPort: 80\n        - name: https\n          containerPort: 443\n        volumeMounts:\n        - name: data\n          mountPath: /etc/gitlab\n          subPath: config\n        - name: data\n          mountPath: /var/opt/gitlab\n          subPath: data\n        - name: data\n          mountPath: /var/log/gitlab\n          subPath: logs\n  volumeClaimTemplates:         # pvc\n  - metadata:\n      name: data\n    spec:\n      accessModes: [&quot;ReadWriteMany&quot;]\n      storageClassName: &quot;nfs-storage&quot;\n      resources:\n        requests:\n          storage: 2Gi\n</code></pre>\n<h5 id=\"24-创建ingress\"><a class=\"anchor\" href=\"#24-创建ingress\">#</a> 2.4 创建 Ingress</h5>\n<pre><code>[root@master01 gitlab]# cat 03-gitlab-ingress.yaml \napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: gitlab-ingress\n  namespace: ops\nspec:\n  ingressClassName: &quot;nginx&quot;\n  rules:\n  - host: &quot;gitlab.hmallleasing.com&quot;\n    http:\n      paths:\n      - path: /\n        pathType: Prefix\n        backend:\n          service:\n            name: gitlab-svc\n            port:\n              name: http\n</code></pre>\n<h5 id=\"25-更新资源清单\"><a class=\"anchor\" href=\"#25-更新资源清单\">#</a> 2.5 更新资源清单</h5>\n<pre><code>[root@master01 gitlab]# kubectl create ns ops\n[root@master01 gitlab]# kubectl create secret docker-registry harbor-admin --docker-server=s.hmallleasing.com --docker-username=admin --docker-password=passwd -n ops\n[root@master01 gitlab]# kubectl apply -f .\n</code></pre>\n<h5 id=\"26-访问gitlab\"><a class=\"anchor\" href=\"#26-访问gitlab\">#</a> 2.6 访问 Gitlab</h5>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/KX8NiKX.png\" alt=\"PixPin_2025-06-09_14-27-11.png\" /></p>\n<h4 id=\"三-部署sonarqube\"><a class=\"anchor\" href=\"#三-部署sonarqube\">#</a> 三、部署 Sonarqube</h4>\n<p>SonarQube 是一个开源的代码质量管理系统，用于检测代码中的错误、漏洞。它可以与 Jenkins 集成，让我们能自动化进行</p>\n<p>代码质量扫描。</p>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/9h7nyjZ.jpeg\" alt=\"1.jpg\" /></p>\n<p><strong>Sonarqube 扫描流程：</strong></p>\n<ol>\n<li>使用 SonarScanner 客户端工具将代码源文件以 http/https 方式推送给 Sonarqube 服务端；</li>\n<li>Sonarqube 服务端基于 ElasticSerach 对代码进行分析，而后将分析结果存储至 Database；</li>\n<li>Sonarqube 服务端读取 Database 数据，然后将扫描结果进行前端展示；</li>\n</ol>\n<p>所以，安装 Sonarqube 之前需要先安装依赖的数据库，后期进行漏洞扫描时还需要借助 SonarScanner 客户端；</p>\n<h5 id=\"31-部署pgsql\"><a class=\"anchor\" href=\"#31-部署pgsql\">#</a> 3.1 部署 Pgsql</h5>\n<h6 id=\"311-下载postgresql镜像推送至harbor\"><a class=\"anchor\" href=\"#311-下载postgresql镜像推送至harbor\">#</a> 3.1.1 下载 postgresql 镜像推送至 Harbor</h6>\n<pre><code>[root@master01 ~]# docker pull postgres:13.8\n[root@master01 ~]# docker tag postgres:13.8 s.hmallleasing.com/base/postgres:13.8\n[root@master01 ~]# docker login s.hmallleasing.com\n[root@master01 ~]# docker push s.hmallleasing.com/base/postgres:13.8\n</code></pre>\n<h6 id=\"312-部署pgsql-sts\"><a class=\"anchor\" href=\"#312-部署pgsql-sts\">#</a> 3.1.2 部署 Pgsql-sts</h6>\n<pre><code>[root@k8s-master01 sonarqube]# cat 01-pgsql-sts.yaml \napiVersion: v1\nkind: Service\nmetadata:\n  name: pgsql-svc\n  namespace: ops\nspec:\n  clusterIP: None\n  selector:\n    app: pgsql\n  ports:\n  - port: 5432\n---\napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  name: postgresql\n  namespace: ops\nspec:\n  serviceName: &quot;pgsql-svc&quot;\n  selector:\n    matchLabels:\n      app: pgsql\n  template:\n    metadata:\n      labels:\n        app: pgsql\n    spec:\n      imagePullSecrets:\n      - name: harbor-admin\n      containers:\n      - name: postgresql\n        image: s.hmallleasing.com/ops/postgres:13.8\n        imagePullPolicy: IfNotPresent\n        env:\n        - name: POSTGRES_DB                   # 数据库\n          value: sonardb\n        - name: POSTGRES_USER                 # 用户\n          value: sonar\n        - name: POSTGRES_PASSWORD             # 密码\n          value: &quot;Superman*2023&quot;\n        ports:\n        - containerPort: 5432\n        volumeMounts:\n        - name: db\n          mountPath: /var/lib/postgresql/data\n        - name: tz-config\n          mountPath: /usr/share/zoneinfo/Asia/Shanghai\n        - name: tz-config\n          mountPath: /etc/localtime\n        - name: timezone\n          mountPath: /etc/timezone\n      volumes:\n      - name: tz-config\n        hostPath:\n          path: /usr/share/zoneinfo/Asia/Shanghai\n          type: &quot;&quot;\n      - name: timezone\n        hostPath:\n          path: /etc/timezone\n          type: &quot;&quot;\n  volumeClaimTemplates:         \n  - metadata:\n      name: db\n    spec:\n      accessModes: [&quot;ReadWriteOnce&quot;]\n      storageClassName: &quot;nfs-storage&quot;\n      resources:\n        requests:\n          storage: 5Gi\n</code></pre>\n<h6 id=\"313-检查postgresql\"><a class=\"anchor\" href=\"#313-检查postgresql\">#</a> 3.1.3 检查 postgresql</h6>\n<pre><code>[root@k8s-master01 sonarqube]# kubectl exec -it postgresql-0 -n ops -- /bin/bash\nroot@postgresql-0:/# psql -Usonar -d sonardb \npsql (13.8 (Debian 13.8-1.pgdg110+1))\nType &quot;help&quot; for help.\n\nsonardb=# \\l\n                             List of databases\n   Name    | Owner | Encoding |  Collate   |   Ctype    | Access privileges \n-----------+-------+----------+------------+------------+-------------------\n postgres  | sonar | UTF8     | en_US.utf8 | en_US.utf8 | \n sonardb   | sonar | UTF8     | en_US.utf8 | en_US.utf8 | \n template0 | sonar | UTF8     | en_US.utf8 | en_US.utf8 | =c/sonar         +\n           |       |          |            |            | sonar=CTc/sonar\n template1 | sonar | UTF8     | en_US.utf8 | en_US.utf8 | =c/sonar         +\n           |       |          |            |            | sonar=CTc/sonar\n(4 rows)\n</code></pre>\n<h5 id=\"32-部署sonarqube\"><a class=\"anchor\" href=\"#32-部署sonarqube\">#</a> 3.2 部署 Sonarqube</h5>\n<h6 id=\"321-下载sonarqube镜像推送至harbor\"><a class=\"anchor\" href=\"#321-下载sonarqube镜像推送至harbor\">#</a> 3.2.1 下载 sonarqube 镜像推送至 Harbor</h6>\n<pre><code>[root@master01 ~]# docker pull sonarqube:9.9.8-community\n[root@master01 ~]# docker tag sonarqube:9.9.8-community s.hmallleasing.com/base/sonarqube:9.9.8\n[root@master01 ~]# docker login s.hmallleasing.com\n[root@master01 ~]# docker push s.hmallleasing.com/base/sonarqube:9.9.8\n</code></pre>\n<h6 id=\"322-部署sonarqube-sts\"><a class=\"anchor\" href=\"#322-部署sonarqube-sts\">#</a> 3.2.2 部署 Sonarqube-sts</h6>\n<pre><code># cat 02-sonarqube-sts.yaml \napiVersion: v1\nkind: Service\nmetadata:\n  name: sonarqube-svc\n  namespace: ops\nspec:\n  clusterIP: None\n  selector:\n    app: sonarqube\n  ports:\n  - name: web\n    port: 9000\n---\napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  name: sonarqube\n  namespace: ops\nspec:\n  serviceName: &quot;sonarqube-svc&quot;\n  selector:\n    matchLabels:\n      app: sonarqube\n  template:\n    metadata:\n      labels:\n        app: sonarqube\n    spec:\n      imagePullSecrets:\n      - name: harbor-admin\n      initContainers:\n      - name: set-kernel\n        image: busybox\n        command: [&quot;sh&quot;, &quot;-c&quot;, &quot;sysctl -w vm.max_map_count=524288 ; sysctl -w fs.file-max=131072 ; ulimit -n 131072 ; ulimit -u 8192&quot;]\n        securityContext:\n          privileged: true\n      containers:\n      - name: sonarqube\n        image: s.hmallleasing.com/base/sonarqube:9.9.8\n        imagePullPolicy: IfNotPresent\n        env:\n        - name: JAVA_OPTS\n          value: -Duser.timezone=Asia/Shanghai\n        - name: SONARQUBE_JDBC_USERNAME               # 连接pgsql用户名\n          value: sonar\n        - name: SONARQUBE_JDBC_PASSWORD               # 连接pgsql密码\n          value: &quot;admin123&quot;\n        - name: SONARQUBE_JDBC_URL                    # 连接pgsql地址/数据库\n          value: jdbc:postgresql://pgsql-svc:5432/sonardb\n        resources:\n          limits:\n            cpu: 1500m\n            memory: 2048Mi\n        ports:\n        - name: web\n          containerPort: 9000\n        volumeMounts:\n        - name: data\n          mountPath: /opt/sonarqube/data\n          subPath: data\n        - name: data\n          mountPath: /opt/sonarqube/logs\n          subPath: logs\n        - name: data\n          mountPath: /opt/sonarqube/extensions\n          subPath: extensions\n        - name: tz-config\n          mountPath: /usr/share/zoneinfo/Asia/Shanghai\n        - name: tz-config\n          mountPath: /etc/localtime\n        - name: timezone\n          mountPath: /etc/timezone\n      volumes:\n      - name: tz-config\n        hostPath:\n          path: /usr/share/zoneinfo/Asia/Shanghai\n          type: &quot;&quot;\n      - name: timezone\n        hostPath:\n          path: /etc/timezone\n          type: &quot;&quot;\n  volumeClaimTemplates:         \n  - metadata:\n      name: data\n    spec:\n      accessModes: [&quot;ReadWriteOnce&quot;]\n      storageClassName: &quot;nfs-storage&quot;\n      resources:\n        requests:\n          storage: 5G\n</code></pre>\n<h6 id=\"323-创建ingress\"><a class=\"anchor\" href=\"#323-创建ingress\">#</a> 3.2.3 创建 Ingress</h6>\n<pre><code>[root@k8s-master01 sonarqube]# cat 03-sonarqube-ingress.yaml \napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: sonarqube-ingress\n  namespace: ops\nspec:\n  ingressClassName: &quot;nginx&quot;\n  rules:\n  - host: &quot;sonar.hmallleasing.com&quot;\n    http:\n      paths:\n      - path: /\n        pathType: Prefix\n        backend:\n          service:\n            name: sonarqube-svc\n            port:\n              name: web\n</code></pre>\n<h6 id=\"324-访问sonarqube\"><a class=\"anchor\" href=\"#324-访问sonarqube\">#</a> 3.2.4 访问 sonarqube</h6>\n<p>通过 http://sonar.hmallleasing.com ，用户名：admin，密码：admin</p>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/uTo5Uoy.png\" alt=\"1.png\" /></p>\n<p>安装中文插件</p>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/gD2k8u1.png\" alt=\"image-20230322101425876.png\" /></p>\n<h4 id=\"四-部署jenkins\"><a class=\"anchor\" href=\"#四-部署jenkins\">#</a> 四、部署 Jenkins</h4>\n<p>既然是基于 Kubernetes 来实现 CI/CD，那么最好将 Jenkins 以 Pod 的形式运行在 Kubernetes 集群中。其次 Jenkins 没有数</p>\n<p>据库，所有的数据都存储在本地，所以只需要将 Jenkins 的数据目录持久化下来就可以了。</p>\n<h5 id=\"41-下载jenkins镜像\"><a class=\"anchor\" href=\"#41-下载jenkins镜像\">#</a> 4.1 下载 Jenkins 镜像</h5>\n<pre><code>[root@master01 ~]# docker pull jenkins/jenkins:2.504.2-lts\n[root@master01 ~]# docker tag jenkins/jenkins:2.504.2-lts s.hmallleasing.com/base/jenkins:2.504.2\n[root@master01 ~]# docker login s.hmallleasing.com\n[root@master01 ~]# docker push s.hmallleasing.com/base/jenkins:2.504.2\n</code></pre>\n<h5 id=\"42-创建rbac\"><a class=\"anchor\" href=\"#42-创建rbac\">#</a> 4.2 创建 RBAC</h5>\n<p>后期 Jenkins 需要创建 Slave Pod 来完成流水线的执行，为此我们需要一些权限。</p>\n<pre><code>[root@k8s-master01 jenkins]# cat 01-jenkins-rbac.yaml \n# serviceaccount\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: jenkins\n  namespace: ops\n---\n# clusterRole\nkind: ClusterRole\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  name: jenkins\nrules:\n  - apiGroups: [&quot;extensions&quot;, &quot;apps&quot;]\n    resources: [&quot;deployments&quot;, &quot;ingresses&quot;]\n    verbs: [&quot;create&quot;, &quot;delete&quot;, &quot;get&quot;, &quot;list&quot;, &quot;watch&quot;, &quot;patch&quot;, &quot;update&quot;]\n  - apiGroups: [&quot;&quot;]\n    resources: [&quot;services&quot;]\n    verbs: [&quot;create&quot;, &quot;delete&quot;, &quot;get&quot;, &quot;list&quot;, &quot;watch&quot;, &quot;patch&quot;, &quot;update&quot;]\n  - apiGroups: [&quot;&quot;]\n    resources: [&quot;pods&quot;]\n    verbs: [&quot;create&quot;, &quot;delete&quot;, &quot;get&quot;, &quot;list&quot;, &quot;patch&quot;, &quot;update&quot;, &quot;watch&quot;]\n  - apiGroups: [&quot;&quot;]\n    resources: [&quot;pods/exec&quot;]\n    verbs: [&quot;create&quot;, &quot;delete&quot;, &quot;get&quot;, &quot;list&quot;, &quot;patch&quot;, &quot;update&quot;, &quot;watch&quot;]\n  - apiGroups: [&quot;&quot;]\n    resources: [&quot;pods/log&quot;, &quot;events&quot;]\n    verbs: [&quot;get&quot;, &quot;list&quot;, &quot;watch&quot;]\n  - apiGroups: [&quot;&quot;]\n    resources: [&quot;secrets&quot;]\n    verbs: [&quot;get&quot;]\n---\n# clusterrolebinding\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: jenkins\n  namespace: ops\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: jenkins\nsubjects:\n  - kind: ServiceAccount\n    name: jenkins\n    namespace: ops\n</code></pre>\n<h5 id=\"43-创建service\"><a class=\"anchor\" href=\"#43-创建service\">#</a> 4.3 创建 Service</h5>\n<pre><code>[root@k8s-master01 jenkins]# cat 02-jenkins-svc.yaml \napiVersion: v1\nkind: Service\nmetadata:\n  name: jenkins-svc\n  namespace: ops\nspec:\n  clusterIP: None\n  selector:\n    app: jenkins\n  ports:\n    - name: http\n      port: 8080\n      targetPort: 8080\n    - name: agent\n      port: 50000\n      targetPort: 50000\n</code></pre>\n<h5 id=\"44-创建statefulset\"><a class=\"anchor\" href=\"#44-创建statefulset\">#</a> 4.4 创建 StatefulSet</h5>\n<pre><code>[root@k8s-master01 jenkins]# cat 03-jenkins-sts.yaml \napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  name: jenkins\n  namespace: ops\nspec:\n  serviceName: &quot;jenkins-svc&quot;\n  selector:\n    matchLabels:\n      app: jenkins\n  template:\n    metadata:\n      labels:\n        app: jenkins\n    spec:\n      serviceAccount: jenkins\n      imagePullSecrets:\n      - name: harbor-admin\n      containers:\n        - name: jenkins\n          image: s.hmallleasing.com/base/jenkins:2.504.2\n          imagePullPolicy: IfNotPresent\n          securityContext:     # 添加参数启用容器root权限\n            privileged: true\n            runAsUser: 0        # root身份运行\n          env:\n          - name: JAVA_OPTS     \n            value: -Duser.timezone=Asia/Shanghai\n          ports:\n            - name: http\n              containerPort: 8080\n            - name: agent\n              containerPort: 50000 \n          resources:\n            limits:\n              cpu: 1500m\n              memory: 4096Mi\n          readinessProbe:          # 就绪探针\n            httpGet:\n              path: /login\n              port: 8080\n            initialDelaySeconds: 60\n            timeoutSeconds: 5\n            failureThreshold: 12\n          volumeMounts:\n            - name: data\n              mountPath: /var/jenkins_home\n            - name: tz-config\n              mountPath: /usr/share/zoneinfo/Asia/Shanghai\n            - name: tz-config\n              mountPath: /etc/localtime\n            - name: timezone\n              mountPath: /etc/timezone\n      volumes:\n      - name: tz-config\n        hostPath:\n          path: /usr/share/zoneinfo/Asia/Shanghai\n          type: &quot;&quot;\n      - name: timezone\n        hostPath:\n          path: /etc/timezone\n          type: &quot;&quot;\n  volumeClaimTemplates:\n  - metadata:\n      name: data\n    spec:\n      accessModes: [&quot;ReadWriteOnce&quot;]\n      storageClassName: &quot;nfs-storage&quot;\n      resources:\n        requests:\n          storage: 5Gi\n</code></pre>\n<h5 id=\"45-创建ingress\"><a class=\"anchor\" href=\"#45-创建ingress\">#</a> 4.5 创建 Ingress</h5>\n<pre><code>[root@k8s-master01 jenkins]# cat 04-jenkins-ingress.yaml \napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: jenkins-ingress\n  namespace: ops\nspec:\n  ingressClassName: &quot;nginx&quot;\n  rules:\n  - host: jenkins.hmallleasing.com\n    http:\n      paths:\n      - path: /\n        pathType: Prefix\n        backend:\n          service:\n            name: jenkins-svc \n            port:\n              name: http\n</code></pre>\n<h5 id=\"46-初始化jenkins\"><a class=\"anchor\" href=\"#46-初始化jenkins\">#</a> 4.6 初始化 Jenkins</h5>\n<p>1、查看 jenkins 对应的初始化密码；</p>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/7oXyJkT.png\" alt=\"1.png\" /></p>\n<p>2、跳过插件安装，进入 jenkins 自行安装即可；</p>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/Yd8GYZ3.png\" alt=\"2.png\" /></p>\n<h5 id=\"47-jenkins配置与插件\"><a class=\"anchor\" href=\"#47-jenkins配置与插件\">#</a> 4.7 Jenkins 配置与插件</h5>\n<p>1、修改默认管理员密码</p>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/QhEqsq2.png\" alt=\"3.png\" /></p>\n<p>2、安装 Jenkins 插件</p>\n<p>#1. 将 jenkins 插件的路径，更改为国内源<br />\n系统管理 -&gt; 插件管理 -&gt; 高级 -&gt; 升级站点 -&gt; 修改 URL-&gt;<a href=\"https://updates.jenkins.io/update-center.json\">https://updates.jenkins.io/update-center.json</a> 替换 https://mirrors.huaweicloud.com/jenkins/updates/update-center.json</p>\n<p>#2. 安装 Jenkins 插件</p>\n<p>中文插件： Localization: Chinese</p>\n<p>Git 插件： git、gitlab</p>\n<p>Sonar 插件： SonarQube Scanner</p>\n<p>Pipeline 插件： pipeline、Stage View、BlueOcean</p>\n<p>Kubernetes 插件： Kubernetes</p>\n<h4 id=\"五-jenkins-pipeline\"><a class=\"anchor\" href=\"#五-jenkins-pipeline\">#</a> 五、Jenkins Pipeline</h4>\n<h5 id=\"51-什么是pipeline\"><a class=\"anchor\" href=\"#51-什么是pipeline\">#</a> 5.1 什么是 Pipeline</h5>\n<p>Pipeline 就是通过 “代码的方式” 将多个步骤的任务连接起来。共同来完成一件事；比如：应用发布就会牵扯到非常多的步骤，获取代码 -&gt; 代码扫描 -&gt; 代码编译 -&gt; 制作镜像 -&gt; 推送仓库 -&gt; 部署应用，将这些步骤通过代码的方式组织在一起完成这次应用发布，这个就可以称之为流水线，亦或者是 Pipeline 流水线；</p>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/YhNTYQC.png\" alt=\"1.png\" /></p>\n<h5 id=\"52-pipeline代码示例\"><a class=\"anchor\" href=\"#52-pipeline代码示例\">#</a> 5.2 Pipeline 代码示例</h5>\n<p>agent: 节点</p>\n<p>stage: 阶段</p>\n<p>steps: 动作</p>\n<pre><code>pipeline&#123;\n    agent any    //目前只有一台jenkins，所以他会在本地执行\n\t\n\tenvironment &#123;       //全局变量\n\t\tHarbor_Url=&quot;s.hmallleasing.com&quot;\n\t\tHarbor_Pro=&quot;base&quot;\n\t&#125;\n\t\n    stages &#123;\n        stage('下载代码') &#123;\n\t\t\tenvironment &#123;     //局部变量\n\t\t\t\tImage_Name=&quot;nf-flms-order:v1.1&quot;\n\t\t\t\tFull_Image=&quot;$&#123;Harbor_Url&#125;/$&#123;Harbor_Pro&#125;/$&#123;Image_Name&#125;&quot;\n\t\t\t&#125;\t\t\n            steps &#123;\n\t\t\t\tsh 'echo &quot;Get Gitlab Code $&#123;Full_Image&#125;&quot;'\n            &#125;\n        &#125;\n        stage('检测代码') &#123;\n\t\t\tenvironment &#123;     //局部变量\n\t\t\t\tImage_Name=&quot;nf-flms-static:v1.1&quot;\n\t\t\t\tFull_Image=&quot;$&#123;Harbor_Url&#125;/$&#123;Harbor_Pro&#125;/$&#123;Image_Name&#125;&quot;\t\t\n\t\t\t&#125;\n            steps &#123;\n                sh 'echo &quot;Unit Test $&#123;Full_Image&#125;&quot;'\n            &#125;\n        &#125;\n        stage('编译代码') &#123;\n            steps &#123;\n                sh 'echo &quot;Build Code&quot;'\n            &#125;\n        &#125;\n        stage('制作镜像') &#123;\n            steps &#123;\n\t\t\t    sh 'echo &quot;Build Docker&quot;'\n            &#125;\n        &#125;\n        stage('部署应用') &#123;\n            steps &#123;\n                sh 'echo &quot;Deploy Code&quot;'\n            &#125;\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<h4 id=\"六-jenkins-slave架构\"><a class=\"anchor\" href=\"#六-jenkins-slave架构\">#</a> 六、 Jenkins Slave 架构</h4>\n<h5 id=\"61-架构基本说明\"><a class=\"anchor\" href=\"#61-架构基本说明\">#</a> 6.1 架构基本说明</h5>\n<p>所谓 JenkinsMaster/Slave 架构，及在 Master 上进行任务分配。然后由 Slave 来完成，不过 Slave 运行方式有两种：</p>\n<ul>\n<li>静态 SLave：需要固定的节点，配置其对应环境，手动注册到 Master，然后执行任务，任务完成节点处于空闲等待状态；</li>\n<li>动态 Slave：由 Master 动态创建 Slave 的 Pod，自动注册到 Master，然后执行任务，任务结束 Pod 自动销毁；</li>\n</ul>\n<p><strong>静态 Jenkins Slave</strong></p>\n<p>1、能够分担主节点上的压力，加快构建速度（所有任务都由 Master 执行，造成构建速度缓慢，且任务多会出现排队现象</p>\n<p>2、能够将特定的任务在特定的主机上运行（比如：不同的任务需要不同的编译环境）</p>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/mayAACO.png\" alt=\"2.png\" /></p>\n<p><strong>痛点：</strong></p>\n<ul>\n<li>1、Master 发生单点故障时，整个 Jenkins 都没办法使用；</li>\n<li>2、每个 Slave 的环境不一样，用于完成不同项目的编译打包工作，但这些不同环境的配置管理及维护都特别困难；</li>\n<li>3、有的 Slave 构建任务频繁，可能出现排队等待，而有的 Slave 又处于空闲状态，所以会出现资源分配严重不均衡；</li>\n<li>4、因为每个 Slave 都需要一台虚拟机，当 Slave 空间时，等于就是空跑，资源浪费明显；</li>\n</ul>\n<p>** 动态 Jenkins Slave **</p>\n<p>所谓动态 Slave，就是根据任务进行动态供应和动态删除。Jenkins Master 和 Jenkins Slave 都是以 Pod 的形式运行在 Kubernetes 集群节点上，Master 运行在其中一个节点上，其配置数据存储在一个持久卷声明中。而 Slave 则随机运行在各个节点上，但它不会一直处于运行状态，而是根据需求动态创建并自动删除。</p>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/ngDX7Wo.png\" alt=\"3.png\" /></p>\n<p><strong>优势：</strong></p>\n<ul>\n<li>1、高可用性：（当 Jenkins Master 故障时，Kubernetes 会自动创建一个新的 Jenkins Master 容器，并将持久卷挂载至新创建的容器，保证数据不会丢失，从而实现 Jenkins 的高可用性。）</li>\n<li>2、高可扩缩性：（当 Kubernetes 集群因资源不足而导致任务长时间排队等待时，可以向集群新增节点，来环节压力。）</li>\n<li>3、资源分配合理：（Kubernetes 动态分配 Slave 至空闲节点，避免因单个节点资源利用率高而导致任务排队等待。）</li>\n</ul>\n<h4 id=\"七-jenkins动态slave配置\"><a class=\"anchor\" href=\"#七-jenkins动态slave配置\">#</a> 七、Jenkins 动态 Slave 配置</h4>\n<h5 id=\"71-配置kubernetes\"><a class=\"anchor\" href=\"#71-配置kubernetes\">#</a> 7.1 配置 Kubernetes</h5>\n<p><em><mark>系统管理 -&gt; 节点管理 -&gt;Cloud-&gt;Add a New Cloud-&gt;Kubernetes</mark></em></p>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/teMdRgu.png\" alt=\"1.png\" /></p>\n<ul>\n<li>Kubernetes 地址： <a href=\"https://kubernetes.default.svc.cluster.local\">https://kubernetes.default.svc.cluster.local</a></li>\n<li>Kubernetes 命名空间：ops</li>\n</ul>\n<p>由于 Jenkins 是通过 Pod 运行在 Kubernetes 集群中，所以通过 service 地址即可连接 Kubernetes 集群，正常通信。</p>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/fJss696.png\" alt=\"2.png\" /></p>\n<h5 id=\"72-配置jenkins\"><a class=\"anchor\" href=\"#72-配置jenkins\">#</a> 7.2 配置 Jenkins</h5>\n<p>Jenkins 地址：<a href=\"http://jenkins-svc.ops.svc.cluster.local:8080\">http://jenkins-svc.ops.svc.cluster.local:8080</a></p>\n<p>Jenkins 通道：jenkins-svc.ops.svc.cluster.local:50000</p>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/8rRPlr9.png\" alt=\"3.png\" /></p>\n<h5 id=\"73-运行测试流水线\"><a class=\"anchor\" href=\"#73-运行测试流水线\">#</a> 7.3 运行测试流水线</h5>\n<p>1、编写流水线</p>\n<pre><code>pipeline &#123;\n  agent &#123;\n    kubernetes &#123;\n      cloud 'kubernetes'\n    &#125;\n  &#125;\n\tstages &#123;\n\t\tstage('输出主机名称') &#123;\n\t\t\tsteps &#123;\n\t\t\t\tsh 'hostname'\n\t\t\t&#125;\n\t\t&#125;\n\t\tstage('等待片刻') &#123;\n\t\t\tsteps &#123;\n\t\t\t\tsh 'sleep 60'\n\t\t\t&#125;\n\t\t&#125;\n\t&#125;\n&#125;\n</code></pre>\n<p>2、jenkins 会自动拉起一个 Pod，运行 agent 容器注册到 Master 节点，然后进行任务的执行</p>\n<pre><code>[root@k8s-master01 03-jenkins]# kubectl get pods -n ops\nNAME                                   READY   STATUS    RESTARTS      AGE\ngitlab-0                               1/1     Running   0             20h\njenkins-0                              1/1     Running   2 (22m ago)   86m\npipeline-daemon1-4-z9rqq-0t4nr-ql2v3   1/1     Running   0             2s    #jenkins slave\npostgresql-0                           1/1     Running   0             17h\nsonarqube-0                            1/1     Running   0             17h\n</code></pre>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/MmlW9RG.png\" alt=\"4.png\" /></p>\n<h4 id=\"八-制作pod模板镜像\"><a class=\"anchor\" href=\"#八-制作pod模板镜像\">#</a> 八、制作 Pod 模板镜像</h4>\n<p>jnlp 镜像是用来连接 JenkinsMaster 以及共享 Master 的 WORKSPACE，但该镜像并没有 maven、docker、kubectl 等常用命令，为此我们需要定制几个镜像，后期通过 Pipeline 将不同的任务交由同一个 Pod 的不同的容器来执行。</p>\n<h5 id=\"81-maven\"><a class=\"anchor\" href=\"#81-maven\">#</a> 8.1 Maven</h5>\n<p>1、下载 settings.xml</p>\n<pre><code>[root@k8s-master01 maven]# wget https://linux.oldxu.net/settings_docker.xml\n</code></pre>\n<p>2、Dockerfile</p>\n<pre><code>[root@k8s-master01 maven]# cat Dockerfile\nFROM maven:3.8.6-openjdk-8\nADD ./settings_docker.xml /usr/share/maven/conf/settings.xml\nRUN /bin/cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime\n</code></pre>\n<p>3、构建镜像并推送私有仓库</p>\n<pre><code>[root@k8s-master01 maven]# docker build -t s.hmallleasing.com/base/maven:3.8.6 .\n[root@k8s-master01 maven]# docker push s.hmallleasing.com/base/maven:3.8.6\n</code></pre>\n<h5 id=\"82-sonar\"><a class=\"anchor\" href=\"#82-sonar\">#</a> 8.2 sonar</h5>\n<pre><code>[root@k8s-master01 ~]# docker pull emeraldsquad/sonar-scanner:2.3.0\n[root@k8s-master01 ~]# docker tag emeraldsquad/sonar-scanner:2.3.0 s.hmallleasing.com/base/sonar-scanner:2.3.0\n[root@k8s-master01 ~]# docker push s.hmallleasing.com/base/sonar-scanner:2.3.0\n</code></pre>\n<h5 id=\"83-nodejs\"><a class=\"anchor\" href=\"#83-nodejs\">#</a> 8.3 NodeJs</h5>\n<p>1、Dockerfile</p>\n<pre><code>[root@k8s-master01 nodejs]# cat Dockerfile\nFROM centos:7\nRUN /bin/cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime\nRUN curl --silent --location https://rpm.nodesource.com/setup_14.x |bash -\nRUN curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo\nRUN yum install nodejs gcc-c++ make vim -y &amp;&amp; \\\n    yum clean all\n</code></pre>\n<p>2、构建镜像并推送私有仓库</p>\n<pre><code>[root@k8s-master01 nodejs]# docker build -t s.hmallleasing.com/base/nodejs:14.20 .\n[root@k8s-master01 nodejs]# docker push s.hmallleasing.com/base/nodejs:14.20\n</code></pre>\n<h5 id=\"84-docker\"><a class=\"anchor\" href=\"#84-docker\">#</a> 8.4 Docker</h5>\n<pre><code>[root@k8s-master01 ~]# docker pull docker:20.10 \n[root@k8s-master01 ~]# docker tag docker:20.10 s.hmallleasing.com/base/docker:20.10\n[root@k8s-master01 ~]# docker push s.hmallleasing.com/base/docker:20.10\n</code></pre>\n<h5 id=\"85-kubectl\"><a class=\"anchor\" href=\"#85-kubectl\">#</a> 8.5 kubectl</h5>\n<p>1、编写 kubernetes.repo 文件</p>\n<pre><code>cat &lt;&lt;EOF&gt; ./kubernetes.repo\n[kubernetes]\nname=Kubernetes\nbaseurl=https://mirrors.aliyun.com/kubernetes-new/core/stable/v1.32/rpm/\nenabled=1\ngpgcheck=0\ngpgkey=https://mirrors.aliyun.com/kubernetes-new/core/stable/v1.32/rpm/repodata/repomd.xml.key\nEOF\n</code></pre>\n<p>2、Dockerfile</p>\n<pre><code>[root@k8s-master01 kubectl]# cat Dockerfile \nFROM centos:7\n# 1、调整时区\nRUN /bin/cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime &amp;&amp; \\\n    echo 'Asia/Shanghai' &gt;/etc/timezone\nRUN curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo\n\n# 2、添加yum源\nADD ./kubernetes.repo /etc/yum.repos.d/kubernetes.repo\n\n# 3、安装Kubectl\nRUN yum makecache &amp;&amp; yum install kubectl-1.32.3 -y &amp;&amp; \\\n    yum clean all\n</code></pre>\n<p>3、构建镜像并推送私有仓库</p>\n<pre><code>[root@k8s-master01 kubectl]# docker build -t s.hmallleasing.com/base/kubectl:1.32.3 .\n[root@k8s-master01 kubectl]# docker push s.hmallleasing.com/base/kubectl:1.32.3\n</code></pre>\n<h4 id=\"九-测试pod模板镜像\"><a class=\"anchor\" href=\"#九-测试pod模板镜像\">#</a> 九、测试 Pod 模板镜像</h4>\n<p>运行一个流水线任务，定义 Pod 模板中的容器名称以及容器镜像地址，而后定义任务，不同的任务由不同的容器来执行</p>\n<h5 id=\"91-定义podtemplate\"><a class=\"anchor\" href=\"#91-定义podtemplate\">#</a> 9.1 定义 podTemplate</h5>\n<pre><code>pipeline &#123;\n  agent &#123;\n    kubernetes &#123;\n      cloud 'kubernetes'\n      yaml '''\n        apiVersion: v1\n        kind: Pod\n        spec:\n          imagePullSecrets:\n          - name: harbor-admin\n          volumes:\n          - name: data\n            nfs:\n              server: 192.168.1.75\n              path: /data/nfs/maven\n          - name: dockersocket\n            hostPath:\n              path: /run/docker.sock\n          containers:\n          - name: maven\n            image: s.hmallleasing.com/base/maven:3.8.6\n            imagePullPolicy: IfNotPresent\n            command: [&quot;cat&quot;]\n            tty: true\n            volumeMounts:\n            - name: data\n              mountPath: /root/.m2\n          - name: nodejs\n            image: s.hmallleasing.com/base/nodejs:14.20\n            imagePullPolicy: IfNotPresent\n            command: [&quot;cat&quot;]\n            tty: true\n          - name: sonar\n            image: s.hmallleasing.com/base/sonar-scanner:2.3.0\n            imagePullPolicy: IfNotPresent\n            command: [&quot;cat&quot;]\n            tty: true\n          - name: docker\n            image: s.hmallleasing.com/base/docker:20.10\n            imagePullPolicy: IfNotPresent\n            command: [&quot;cat&quot;]\n            tty: true\n            volumeMounts:\n            - name: dockersocket\n              mountPath: /run/docker.sock\n          - name: kubectl\n            image: s.hmallleasing.com/base/kubectl:1.32.3\n            imagePullPolicy: IfNotPresent\n            command: [&quot;cat&quot;]\n            tty: true\n      '''\n    &#125;\n  &#125;\n  stages &#123;\n    stage('maven测试') &#123;\n      steps &#123;\n        container('maven') &#123;\n\t\t  sh 'mvn --version'\n        &#125;\n      &#125;\n    &#125;\n\n    stage('nodejs测试') &#123;\n      steps &#123;\n        container('nodejs') &#123;\n\t\t  sh 'node -v'\n        &#125;\n      &#125;\n    &#125;\t\n\t\n    stage('docker测试') &#123;\n      steps &#123;\n        container('docker') &#123;\n\t\t  sh 'docker ps'\n        &#125;\n      &#125;\n    &#125;\t\t\n\n    stage('kubectl测试') &#123;\n      steps &#123;\n        container('kubectl') &#123;\n\t\t  sh 'kubectl version'\n        &#125;\n      &#125;\n    &#125;\t\t\n  &#125;\n&#125;\n</code></pre>\n<p><em><strong>#在 nfs 中创建 /data/maven 文件夹，将 maven 缓存 /root/.m2 挂载至该目录</strong></em></p>\n<h5 id=\"92-运行pipeline\"><a class=\"anchor\" href=\"#92-运行pipeline\">#</a> 9.2 运行 Pipeline</h5>\n<p>构建流水线，检查各个阶段调用容器执行的输出结果是否 OK；</p>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/iLcep5b.png\" alt=\"5.png\" /></p>\n",
            "tags": [
                "DevOps"
            ]
        }
    ]
}