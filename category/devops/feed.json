{
    "version": "https://jsonfeed.org/version/1",
    "title": "LinuxSre云原生 • All posts by \"devops\" category",
    "description": "专注于 Linux 运维、云计算、云原⽣等技术",
    "home_page_url": "http://ixuyong.cn",
    "items": [
        {
            "id": "http://ixuyong.cn/posts/2015283801.html",
            "url": "http://ixuyong.cn/posts/2015283801.html",
            "title": "K8S基于Jenkins实现SpringCloud微服务CI与CD实践（三）",
            "date_published": "2025-06-08T02:28:36.000Z",
            "content_html": "<h3 id=\"k8s基于jenkins实现springcloud微服务ci与cd实践三\"><a class=\"anchor\" href=\"#k8s基于jenkins实现springcloud微服务ci与cd实践三\">#</a> K8S 基于 Jenkins 实现 SpringCloud 微服务 CI 与 CD 实践（三）</h3>\n",
            "tags": [
                "DevOps"
            ]
        },
        {
            "id": "http://ixuyong.cn/posts/1208493697.html",
            "url": "http://ixuyong.cn/posts/1208493697.html",
            "title": "K8S基于Jenkins实现SpringCloud微服务CI与CD实践（一）",
            "date_published": "2025-06-08T02:28:16.000Z",
            "content_html": "<h3 id=\"k8s基于jenkins实现springcloud微服务ci与cd实践一\"><a class=\"anchor\" href=\"#k8s基于jenkins实现springcloud微服务ci与cd实践一\">#</a> K8S 基于 Jenkins 实现 SpringCloud 微服务 CI 与 CD 实践（一）</h3>\n<p>CI 阶段：开发人员 -&gt; 提交代码 -&gt;gitlab 仓库 -&gt;Jenkins/CI 抓取代码 -&gt; 漏洞扫描 -&gt; 编译 -&gt; 构建镜像 -&gt; 推送 Harbor-&gt; 部署应用至 K8S 测试环境；</p>\n<p>CD 阶段：Jenkins/CD-&gt; 拉取 Harbor 仓库对应项目镜像 -&gt; 部署应用至 K8S 测试环境</p>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/reddUL2.jpeg\" alt=\"1.jpg\" /></p>\n<h4 id=\"一-部署harbor\"><a class=\"anchor\" href=\"#一-部署harbor\">#</a> 一、部署 Harbor</h4>\n<h5 id=\"11-安装基础环境\"><a class=\"anchor\" href=\"#11-安装基础环境\">#</a> 1.1 安装基础环境</h5>\n<pre><code>[root@harbor ~]# yum remove docker*\n[root@harbor ~]# yum install -y yum-utils device-mapper-persistent-data lvm2\n[root@harbor ~]# curl -o /etc/yum.repos.d/docker-ce.repo  https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\n[root@harbor ~]# yum list docker-ce --showduplicates |sort -r \n[root@harbor ~]# yum install docker-ce docker-compose -y\n\n###提示：No match for argument: python-pip\n#改成为 Centos 8已经换成python3 使用该命令解决 yum install python3-pip\n[root@harbor ~]# yum -y install python-pip\n#升级\n[root@harbor ~]# pip3 install --upgrade pip\n[root@harbor ~]# pip3 install docker-compose\n[root@Harbor ~]# docker-compose -version\n</code></pre>\n<h5 id=\"12-配置-docker-加速\"><a class=\"anchor\" href=\"#12-配置-docker-加速\">#</a> 1.2 配置 Docker 加速</h5>\n<pre><code>[root@harbor ~]# sudo mkdir -p /etc/docker\n\n#Docker加速1\n[root@harbor ~]# sudo tee /etc/docker/daemon.json &lt;&lt;-'EOF'\n&#123;\n  &quot;registry-mirrors&quot;: [\n    &quot;https://docker.credclouds.com&quot;,\n    &quot;https://k8s.credclouds.com&quot;,\n    &quot;https://quay.credclouds.com&quot;,\n    &quot;https://gcr.credclouds.com&quot;,\n    &quot;https://k8s-gcr.credclouds.com&quot;,\n    &quot;https://ghcr.credclouds.com&quot;,\n    &quot;https://do.nark.eu.org&quot;,\n    &quot;https://docker.m.daocloud.io&quot;,\n    &quot;https://docker.nju.edu.cn&quot;,\n    &quot;https://docker.mirrors.sjtug.sjtu.edu.cn&quot;,\n    &quot;https://docker.1panel.live&quot;,\n    &quot;https://docker.rainbond.cc&quot;\n  ],\n  &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;]\n&#125;\nEOF\n\n#Docker加速2\n[root@harbor ~]# sudo tee /etc/docker/daemon.json &lt;&lt;-'EOF'\n&#123;\n  &quot;registry-mirrors&quot;: [\n    &quot;https://docker.1panel.live&quot;,\n    &quot;https://hub.littlediary.cn&quot;,\n    &quot;https://docker.kejilion.pro&quot;,\n    &quot;https://docker.1ms.run&quot;,\n    &quot;https://lispy.org&quot;,\n    &quot;https://docker.xiaogenban1993.com&quot;,\n    &quot;https://docker.xuanyuan.me&quot;,\n    &quot;https://docker.mybacc.com&quot;,\n    &quot;https://docker-0.unsee.tech&quot;,\n    &quot;https://dockerpull.cn&quot;\n  ],\n  &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;]\n&#125;\nEOF\n\n[root@harbor ~]# systemctl enable docker --now\n</code></pre>\n<h5 id=\"13-装-harbor\"><a class=\"anchor\" href=\"#13-装-harbor\">#</a> 1.3 装 Harbor</h5>\n<pre><code>[root@harbor ~]# cd /soft/\n[root@harbor ~]# wget https://github.com/goharbor/harbor/releases/download/v2.6.1/harbor-offline-installer-v2.6.1.tgz\n[root@harbor soft]# tar xf harbor-offline-installer-v2.6.1.tgz\n[root@harbor soft]# cd harbor\n[root@Harbor harbor]# cp harbor.yml.tmpl harbor.yml\n[root@Harbor harbor]# cat harbor.yml\n...\nhostname: s.hmallleasing.com\n...\nhttp:\n  # port for http, default is 80. If https enabled, this port will redirect to https port\n  port: 80\n\n# https related config\nhttps:\n  # https port for harbor, default is 443\n  port: 443\n  # The path of cert and key files for nginx\n  certificate: /soft/harbor/ssl/hmallleasing.com.pem\n  private_key: /soft/harbor/ssl/hmallleasing.com.key\n...\nharbor_admin_password: Harbor12345\n[root@harbor harbor]#  ./install.sh\n</code></pre>\n<h5 id=\"14-配置-nginx-负载均衡调度\"><a class=\"anchor\" href=\"#14-配置-nginx-负载均衡调度\">#</a> 1.4 配置 Nginx 负载均衡调度</h5>\n<pre><code>[root@lb ~]# vim s.hmallleasing.com.conf\nserver &#123;\n    listen 443 ssl;\n    server_name harbor.hmallleasing.com;\n    client_max_body_size 1G; \n    ssl_prefer_server_ciphers on;\n    ssl_certificate  /etc/nginx/sslkey/_.hmallleasing.com_chain.crt;\n    ssl_certificate_key  /etc/nginx/sslkey/_.hmallleasing.com_key.key;\n    location / &#123;\n        proxy_pass http://192.168.1.134;\n#       include proxy_params;\n#       proxy_set_header Host $http_host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        \n        proxy_connect_timeout 30;\n        proxy_send_timeout 60;\n        proxy_read_timeout 60;\n        \n        proxy_buffering on;\n        proxy_buffer_size 32k;\n        proxy_buffers 4 128k;\n        proxy_temp_file_write_size 10240k;\t\t\n        proxy_max_temp_file_size 10240k;\n    &#125;\n&#125;\n\nserver &#123;\n    listen 80;\n    server_name s.hmallleasing.com;\n    return 302 https://$server_name$request_uri;\n&#125;\n</code></pre>\n<h5 id=\"15-推送镜像至-harbor\"><a class=\"anchor\" href=\"#15-推送镜像至-harbor\">#</a> 1.5 推送镜像至 Harbor</h5>\n<pre><code>[root@harbor harbor]# docker tag beae173ccac6 harbor.hmallleasing.com/ops/busybox.v1\n[root@harbor harbor]# docker login harbor.hmallleasing.com\n[root@harbor harbor]# docker push harbor.hmallleasing.com/ops/busybox.v1\n</code></pre>\n<h5 id=\"16-harbor-停止与启动\"><a class=\"anchor\" href=\"#16-harbor-停止与启动\">#</a> 1.6 Harbor 停止与启动</h5>\n<pre><code>#停用Harbor\n[root@harbor harbor]# pwd\n/soft/harbor\n[root@harbor harbor]# docker-compose down\n #启动Harbor\n[root@harbor harbor]# docker-compose up -d\n[root@harbor harbor]# docker-compose start\n</code></pre>\n<h4 id=\"二-部署gitlab\"><a class=\"anchor\" href=\"#二-部署gitlab\">#</a> 二、部署 Gitlab</h4>\n<p>通常 Gitlab 都是在独立服务器进行部署和维护，但为了更好的掌握 Kubernetes，所以本次课程采用资源清单方式将 Gitlab 以</p>\n<p>StatefulSet 方式交付到 Kubernetes 中；</p>\n<p>Gitlab 以容器方式运行，需要持久化如下几个目录中的数据：</p>\n<table>\n<thead>\n<tr>\n<th><strong>持久化本地位置</strong></th>\n<th><strong>容器位置</strong></th>\n<th><strong>使用</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>${pvc}/data</td>\n<td>/var/opt/gitlab</td>\n<td>用于存储应用程序数据</td>\n</tr>\n<tr>\n<td>${pvc}/logs</td>\n<td>/var/log/gitlab</td>\n<td>用于存储日志</td>\n</tr>\n<tr>\n<td>${pvc}/config</td>\n<td>/etc/gitlab</td>\n<td>用于存储 GitLab 配置文件</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"21下载gitlab镜像推送至harbor\"><a class=\"anchor\" href=\"#21下载gitlab镜像推送至harbor\">#</a> 2.1 下载 Gitlab 镜像推送至 Harbor</h5>\n<pre><code>[root@harbor harbor]# docker pull gitlab/gitlab-ce:14.6.0-ce.0\n[root@harbor harbor]# docker tag gitlab/gitlab-ce:14.6.0-ce.0 s.hmallleasing.com/base/gitlab-ce:14.6.0\n[root@harbor harbor]# docker login s.hmallleasing.com\n[root@harbor harbor]# docker push s.hmallleasing.com/base/gitlab-ce:14.6.0\n</code></pre>\n<h5 id=\"22-创建service\"><a class=\"anchor\" href=\"#22-创建service\">#</a> 2.2 创建 Service</h5>\n<pre><code>[root@master01 gitlab]# cat 01-gitlab-svc.yaml \napiVersion: v1\nkind: Service\nmetadata:\n  name: gitlab-svc\n  namespace: ops\nspec:\n  clusterIP: None\n  selector:\n    app: gitlab\n  ports:\n  - name: http\n    port: 80\n    targetPort: 80\n  - name: https\n    port: 443\n    targetPort: 443\n</code></pre>\n<h5 id=\"23-创建statefulset\"><a class=\"anchor\" href=\"#23-创建statefulset\">#</a> 2.3 创建 Statefulset</h5>\n<pre><code># cat 02-gitlab-sts.yaml \napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  name: gitlab\n  namespace: ops\nspec:\n  serviceName: &quot;gitlab-svc&quot;               # 关联的headlessService\n  selector:\n    matchLabels:\n      app: gitlab\n  template:\n    metadata:\n      labels:\n        app: gitlab\n    spec:\n      imagePullSecrets:\n      - name: harbor-admin\n      containers:\n      - name: gitlab-ce\n        image: s.hmallleasing.com/base/gitlab-ce:14.6.0\n        imagePullPolicy: IfNotPresent\n        env:\n        - name: GITLAB_ROOT_PASSWORD\n          value: &quot;admin123&quot;\n        - name: GITLAB_OMNIBUS_CONFIG\n          value: |\n            external_url &quot;http://gitlab.hmallleasing.com&quot;\n            gitlab_rails['time_zone'] = 'Asia/Shanghai'\n            node_exporter['enable'] = false\n            redis_exporter['enable'] = false\n            postgres_exporter['enable'] = false\n            gitlab_exporter['enable'] = false\n            grafana['enable'] = false\n            grafana['reporting_enabled'] = false\n            prometheus['enable'] = false\n            prometheus['monitor_kubernetes'] = false\n            gitlab_rails['gitlab_email_enabled'] = true\n            gitlab_rails['gitlab_email_from'] = '373370405@qq.com'  #发件邮箱\n            gitlab_rails['gitlab_email_display_name'] = 'Nfzl-Gitlab'  #发件人显示名称\n            gitlab_rails['smtp_enable'] = true\n            gitlab_rails['smtp_address'] = &quot;smtp.qq.com&quot;\n            gitlab_rails['smtp_port'] = 465\n            gitlab_rails['smtp_user_name'] = &quot;373370405@qq.com&quot;   #发件人邮箱账户\n            gitlab_rails['smtp_password'] = &quot;pohleicnfawvbgei&quot;   #发件人邮箱客户端授权码\n            gitlab_rails['smtp_domain'] = &quot;smtp.qq.com&quot;\n            gitlab_rails['smtp_authentication'] = &quot;login&quot;\n            gitlab_rails['smtp_enable_starttls_auto'] = true\n            gitlab_rails['smtp_tls'] = true\n        ports:\n        - name: http\n          containerPort: 80\n        - name: https\n          containerPort: 443\n        volumeMounts:\n        - name: data\n          mountPath: /etc/gitlab\n          subPath: config\n        - name: data\n          mountPath: /var/opt/gitlab\n          subPath: data\n        - name: data\n          mountPath: /var/log/gitlab\n          subPath: logs\n  volumeClaimTemplates:         # pvc\n  - metadata:\n      name: data\n    spec:\n      accessModes: [&quot;ReadWriteMany&quot;]\n      storageClassName: &quot;nfs-storage&quot;\n      resources:\n        requests:\n          storage: 2Gi\n</code></pre>\n<h5 id=\"24-创建ingress\"><a class=\"anchor\" href=\"#24-创建ingress\">#</a> 2.4 创建 Ingress</h5>\n<pre><code>[root@master01 gitlab]# cat 03-gitlab-ingress.yaml \napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: gitlab-ingress\n  namespace: ops\nspec:\n  ingressClassName: &quot;nginx&quot;\n  rules:\n  - host: &quot;gitlab.hmallleasing.com&quot;\n    http:\n      paths:\n      - path: /\n        pathType: Prefix\n        backend:\n          service:\n            name: gitlab-svc\n            port:\n              name: http\n</code></pre>\n<h5 id=\"25-更新资源清单\"><a class=\"anchor\" href=\"#25-更新资源清单\">#</a> 2.5 更新资源清单</h5>\n<pre><code>[root@master01 gitlab]# kubectl create ns ops\n[root@master01 gitlab]# kubectl create secret docker-registry harbor-admin --docker-server=s.hmallleasing.com --docker-username=admin --docker-password=passwd -n ops\n[root@master01 gitlab]# kubectl apply -f .\n</code></pre>\n<h5 id=\"26-访问gitlab\"><a class=\"anchor\" href=\"#26-访问gitlab\">#</a> 2.6 访问 Gitlab</h5>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/KX8NiKX.png\" alt=\"PixPin_2025-06-09_14-27-11.png\" /></p>\n<h4 id=\"三-部署sonarqube\"><a class=\"anchor\" href=\"#三-部署sonarqube\">#</a> 三、部署 Sonarqube</h4>\n<p>SonarQube 是一个开源的代码质量管理系统，用于检测代码中的错误、漏洞。它可以与 Jenkins 集成，让我们能自动化进行</p>\n<p>代码质量扫描。</p>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/9h7nyjZ.jpeg\" alt=\"1.jpg\" /></p>\n<p><strong>Sonarqube 扫描流程：</strong></p>\n<ol>\n<li>使用 SonarScanner 客户端工具将代码源文件以 http/https 方式推送给 Sonarqube 服务端；</li>\n<li>Sonarqube 服务端基于 ElasticSerach 对代码进行分析，而后将分析结果存储至 Database；</li>\n<li>Sonarqube 服务端读取 Database 数据，然后将扫描结果进行前端展示；</li>\n</ol>\n<p>所以，安装 Sonarqube 之前需要先安装依赖的数据库，后期进行漏洞扫描时还需要借助 SonarScanner 客户端；</p>\n<h5 id=\"31-部署pgsql\"><a class=\"anchor\" href=\"#31-部署pgsql\">#</a> 3.1 部署 Pgsql</h5>\n<h6 id=\"311-下载postgresql镜像推送至harbor\"><a class=\"anchor\" href=\"#311-下载postgresql镜像推送至harbor\">#</a> 3.1.1 下载 postgresql 镜像推送至 Harbor</h6>\n<pre><code>[root@master01 ~]# docker pull postgres:13.8\n[root@master01 ~]# docker tag postgres:13.8 s.hmallleasing.com/base/postgres:13.8\n[root@master01 ~]# docker login s.hmallleasing.com\n[root@master01 ~]# docker push s.hmallleasing.com/base/postgres:13.8\n</code></pre>\n<h6 id=\"312-部署pgsql-sts\"><a class=\"anchor\" href=\"#312-部署pgsql-sts\">#</a> 3.1.2 部署 Pgsql-sts</h6>\n<pre><code>[root@k8s-master01 sonarqube]# cat 01-pgsql-sts.yaml \napiVersion: v1\nkind: Service\nmetadata:\n  name: pgsql-svc\n  namespace: ops\nspec:\n  clusterIP: None\n  selector:\n    app: pgsql\n  ports:\n  - port: 5432\n---\napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  name: postgresql\n  namespace: ops\nspec:\n  serviceName: &quot;pgsql-svc&quot;\n  selector:\n    matchLabels:\n      app: pgsql\n  template:\n    metadata:\n      labels:\n        app: pgsql\n    spec:\n      imagePullSecrets:\n      - name: harbor-admin\n      containers:\n      - name: postgresql\n        image: s.hmallleasing.com/ops/postgres:13.8\n        imagePullPolicy: IfNotPresent\n        env:\n        - name: POSTGRES_DB                   # 数据库\n          value: sonardb\n        - name: POSTGRES_USER                 # 用户\n          value: sonar\n        - name: POSTGRES_PASSWORD             # 密码\n          value: &quot;Superman*2023&quot;\n        ports:\n        - containerPort: 5432\n        volumeMounts:\n        - name: db\n          mountPath: /var/lib/postgresql/data\n        - name: tz-config\n          mountPath: /usr/share/zoneinfo/Asia/Shanghai\n        - name: tz-config\n          mountPath: /etc/localtime\n        - name: timezone\n          mountPath: /etc/timezone\n      volumes:\n      - name: tz-config\n        hostPath:\n          path: /usr/share/zoneinfo/Asia/Shanghai\n          type: &quot;&quot;\n      - name: timezone\n        hostPath:\n          path: /etc/timezone\n          type: &quot;&quot;\n  volumeClaimTemplates:         \n  - metadata:\n      name: db\n    spec:\n      accessModes: [&quot;ReadWriteOnce&quot;]\n      storageClassName: &quot;nfs-storage&quot;\n      resources:\n        requests:\n          storage: 5Gi\n</code></pre>\n<h6 id=\"313-检查postgresql\"><a class=\"anchor\" href=\"#313-检查postgresql\">#</a> 3.1.3 检查 postgresql</h6>\n<pre><code>[root@k8s-master01 sonarqube]# kubectl exec -it postgresql-0 -n ops -- /bin/bash\nroot@postgresql-0:/# psql -Usonar -d sonardb \npsql (13.8 (Debian 13.8-1.pgdg110+1))\nType &quot;help&quot; for help.\n\nsonardb=# \\l\n                             List of databases\n   Name    | Owner | Encoding |  Collate   |   Ctype    | Access privileges \n-----------+-------+----------+------------+------------+-------------------\n postgres  | sonar | UTF8     | en_US.utf8 | en_US.utf8 | \n sonardb   | sonar | UTF8     | en_US.utf8 | en_US.utf8 | \n template0 | sonar | UTF8     | en_US.utf8 | en_US.utf8 | =c/sonar         +\n           |       |          |            |            | sonar=CTc/sonar\n template1 | sonar | UTF8     | en_US.utf8 | en_US.utf8 | =c/sonar         +\n           |       |          |            |            | sonar=CTc/sonar\n(4 rows)\n</code></pre>\n<h5 id=\"32-部署sonarqube\"><a class=\"anchor\" href=\"#32-部署sonarqube\">#</a> 3.2 部署 Sonarqube</h5>\n<h6 id=\"321-下载sonarqube镜像推送至harbor\"><a class=\"anchor\" href=\"#321-下载sonarqube镜像推送至harbor\">#</a> 3.2.1 下载 sonarqube 镜像推送至 Harbor</h6>\n<pre><code>[root@master01 ~]# docker pull sonarqube:9.9.8-community\n[root@master01 ~]# docker tag sonarqube:9.9.8-community s.hmallleasing.com/base/sonarqube:9.9.8\n[root@master01 ~]# docker login s.hmallleasing.com\n[root@master01 ~]# docker push s.hmallleasing.com/base/sonarqube:9.9.8\n</code></pre>\n<h6 id=\"322-部署sonarqube-sts\"><a class=\"anchor\" href=\"#322-部署sonarqube-sts\">#</a> 3.2.2 部署 Sonarqube-sts</h6>\n<pre><code># cat 02-sonarqube-sts.yaml \napiVersion: v1\nkind: Service\nmetadata:\n  name: sonarqube-svc\n  namespace: ops\nspec:\n  clusterIP: None\n  selector:\n    app: sonarqube\n  ports:\n  - name: web\n    port: 9000\n---\napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  name: sonarqube\n  namespace: ops\nspec:\n  serviceName: &quot;sonarqube-svc&quot;\n  selector:\n    matchLabels:\n      app: sonarqube\n  template:\n    metadata:\n      labels:\n        app: sonarqube\n    spec:\n      imagePullSecrets:\n      - name: harbor-admin\n      initContainers:\n      - name: set-kernel\n        image: busybox\n        command: [&quot;sh&quot;, &quot;-c&quot;, &quot;sysctl -w vm.max_map_count=524288 ; sysctl -w fs.file-max=131072 ; ulimit -n 131072 ; ulimit -u 8192&quot;]\n        securityContext:\n          privileged: true\n      containers:\n      - name: sonarqube\n        image: s.hmallleasing.com/base/sonarqube:9.9.8\n        imagePullPolicy: IfNotPresent\n        env:\n        - name: JAVA_OPTS\n          value: -Duser.timezone=Asia/Shanghai\n        - name: SONARQUBE_JDBC_USERNAME               # 连接pgsql用户名\n          value: sonar\n        - name: SONARQUBE_JDBC_PASSWORD               # 连接pgsql密码\n          value: &quot;admin123&quot;\n        - name: SONARQUBE_JDBC_URL                    # 连接pgsql地址/数据库\n          value: jdbc:postgresql://pgsql-svc:5432/sonardb\n        resources:\n          limits:\n            cpu: 1500m\n            memory: 2048Mi\n        ports:\n        - name: web\n          containerPort: 9000\n        volumeMounts:\n        - name: data\n          mountPath: /opt/sonarqube/data\n          subPath: data\n        - name: data\n          mountPath: /opt/sonarqube/logs\n          subPath: logs\n        - name: data\n          mountPath: /opt/sonarqube/extensions\n          subPath: extensions\n        - name: tz-config\n          mountPath: /usr/share/zoneinfo/Asia/Shanghai\n        - name: tz-config\n          mountPath: /etc/localtime\n        - name: timezone\n          mountPath: /etc/timezone\n      volumes:\n      - name: tz-config\n        hostPath:\n          path: /usr/share/zoneinfo/Asia/Shanghai\n          type: &quot;&quot;\n      - name: timezone\n        hostPath:\n          path: /etc/timezone\n          type: &quot;&quot;\n  volumeClaimTemplates:         \n  - metadata:\n      name: data\n    spec:\n      accessModes: [&quot;ReadWriteOnce&quot;]\n      storageClassName: &quot;nfs-storage&quot;\n      resources:\n        requests:\n          storage: 5G\n</code></pre>\n<h6 id=\"323-创建ingress\"><a class=\"anchor\" href=\"#323-创建ingress\">#</a> 3.2.3 创建 Ingress</h6>\n<pre><code>[root@k8s-master01 sonarqube]# cat 03-sonarqube-ingress.yaml \napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: sonarqube-ingress\n  namespace: ops\nspec:\n  ingressClassName: &quot;nginx&quot;\n  rules:\n  - host: &quot;sonar.hmallleasing.com&quot;\n    http:\n      paths:\n      - path: /\n        pathType: Prefix\n        backend:\n          service:\n            name: sonarqube-svc\n            port:\n              name: web\n</code></pre>\n<h6 id=\"324-访问sonarqube\"><a class=\"anchor\" href=\"#324-访问sonarqube\">#</a> 3.2.4 访问 sonarqube</h6>\n<p>通过 http://sonar.hmallleasing.com ，用户名：admin，密码：admin</p>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/uTo5Uoy.png\" alt=\"1.png\" /></p>\n<p>安装中文插件</p>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/gD2k8u1.png\" alt=\"image-20230322101425876.png\" /></p>\n<h4 id=\"四-部署jenkins\"><a class=\"anchor\" href=\"#四-部署jenkins\">#</a> 四、部署 Jenkins</h4>\n<p>既然是基于 Kubernetes 来实现 CI/CD，那么最好将 Jenkins 以 Pod 的形式运行在 Kubernetes 集群中。其次 Jenkins 没有数</p>\n<p>据库，所有的数据都存储在本地，所以只需要将 Jenkins 的数据目录持久化下来就可以了。</p>\n<h5 id=\"41-下载jenkins镜像\"><a class=\"anchor\" href=\"#41-下载jenkins镜像\">#</a> 4.1 下载 Jenkins 镜像</h5>\n<pre><code>[root@master01 ~]# docker pull jenkins/jenkins:2.504.2-lts\n[root@master01 ~]# docker tag jenkins/jenkins:2.504.2-lts s.hmallleasing.com/base/jenkins:2.504.2\n[root@master01 ~]# docker login s.hmallleasing.com\n[root@master01 ~]# docker push s.hmallleasing.com/base/jenkins:2.504.2\n</code></pre>\n<h5 id=\"42-创建rbac\"><a class=\"anchor\" href=\"#42-创建rbac\">#</a> 4.2 创建 RBAC</h5>\n<p>后期 Jenkins 需要创建 Slave Pod 来完成流水线的执行，为此我们需要一些权限。</p>\n<pre><code>[root@k8s-master01 jenkins]# cat 01-jenkins-rbac.yaml \n# serviceaccount\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: jenkins\n  namespace: ops\n---\n# clusterRole\nkind: ClusterRole\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  name: jenkins\nrules:\n  - apiGroups: [&quot;extensions&quot;, &quot;apps&quot;]\n    resources: [&quot;deployments&quot;, &quot;ingresses&quot;]\n    verbs: [&quot;create&quot;, &quot;delete&quot;, &quot;get&quot;, &quot;list&quot;, &quot;watch&quot;, &quot;patch&quot;, &quot;update&quot;]\n  - apiGroups: [&quot;&quot;]\n    resources: [&quot;services&quot;]\n    verbs: [&quot;create&quot;, &quot;delete&quot;, &quot;get&quot;, &quot;list&quot;, &quot;watch&quot;, &quot;patch&quot;, &quot;update&quot;]\n  - apiGroups: [&quot;&quot;]\n    resources: [&quot;pods&quot;]\n    verbs: [&quot;create&quot;, &quot;delete&quot;, &quot;get&quot;, &quot;list&quot;, &quot;patch&quot;, &quot;update&quot;, &quot;watch&quot;]\n  - apiGroups: [&quot;&quot;]\n    resources: [&quot;pods/exec&quot;]\n    verbs: [&quot;create&quot;, &quot;delete&quot;, &quot;get&quot;, &quot;list&quot;, &quot;patch&quot;, &quot;update&quot;, &quot;watch&quot;]\n  - apiGroups: [&quot;&quot;]\n    resources: [&quot;pods/log&quot;, &quot;events&quot;]\n    verbs: [&quot;get&quot;, &quot;list&quot;, &quot;watch&quot;]\n  - apiGroups: [&quot;&quot;]\n    resources: [&quot;secrets&quot;]\n    verbs: [&quot;get&quot;]\n---\n# clusterrolebinding\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: jenkins\n  namespace: ops\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: jenkins\nsubjects:\n  - kind: ServiceAccount\n    name: jenkins\n    namespace: ops\n</code></pre>\n<h5 id=\"43-创建service\"><a class=\"anchor\" href=\"#43-创建service\">#</a> 4.3 创建 Service</h5>\n<pre><code>[root@k8s-master01 jenkins]# cat 02-jenkins-svc.yaml \napiVersion: v1\nkind: Service\nmetadata:\n  name: jenkins-svc\n  namespace: ops\nspec:\n  clusterIP: None\n  selector:\n    app: jenkins\n  ports:\n    - name: http\n      port: 8080\n      targetPort: 8080\n    - name: agent\n      port: 50000\n      targetPort: 50000\n</code></pre>\n<h5 id=\"44-创建statefulset\"><a class=\"anchor\" href=\"#44-创建statefulset\">#</a> 4.4 创建 StatefulSet</h5>\n<pre><code>[root@k8s-master01 jenkins]# cat 03-jenkins-sts.yaml \napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  name: jenkins\n  namespace: ops\nspec:\n  serviceName: &quot;jenkins-svc&quot;\n  selector:\n    matchLabels:\n      app: jenkins\n  template:\n    metadata:\n      labels:\n        app: jenkins\n    spec:\n      serviceAccount: jenkins\n      imagePullSecrets:\n      - name: harbor-admin\n      containers:\n        - name: jenkins\n          image: s.hmallleasing.com/base/jenkins:2.504.2\n          imagePullPolicy: IfNotPresent\n          securityContext:     # 添加参数启用容器root权限\n            privileged: true\n            runAsUser: 0        # root身份运行\n          env:\n          - name: JAVA_OPTS     \n            value: -Duser.timezone=Asia/Shanghai\n          ports:\n            - name: http\n              containerPort: 8080\n            - name: agent\n              containerPort: 50000 \n          resources:\n            limits:\n              cpu: 1500m\n              memory: 4096Mi\n          readinessProbe:          # 就绪探针\n            httpGet:\n              path: /login\n              port: 8080\n            initialDelaySeconds: 60\n            timeoutSeconds: 5\n            failureThreshold: 12\n          volumeMounts:\n            - name: data\n              mountPath: /var/jenkins_home\n            - name: tz-config\n              mountPath: /usr/share/zoneinfo/Asia/Shanghai\n            - name: tz-config\n              mountPath: /etc/localtime\n            - name: timezone\n              mountPath: /etc/timezone\n      volumes:\n      - name: tz-config\n        hostPath:\n          path: /usr/share/zoneinfo/Asia/Shanghai\n          type: &quot;&quot;\n      - name: timezone\n        hostPath:\n          path: /etc/timezone\n          type: &quot;&quot;\n  volumeClaimTemplates:\n  - metadata:\n      name: data\n    spec:\n      accessModes: [&quot;ReadWriteOnce&quot;]\n      storageClassName: &quot;nfs-storage&quot;\n      resources:\n        requests:\n          storage: 5Gi\n</code></pre>\n<h5 id=\"45-创建ingress\"><a class=\"anchor\" href=\"#45-创建ingress\">#</a> 4.5 创建 Ingress</h5>\n<pre><code>[root@k8s-master01 jenkins]# cat 04-jenkins-ingress.yaml \napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: jenkins-ingress\n  namespace: ops\nspec:\n  ingressClassName: &quot;nginx&quot;\n  rules:\n  - host: jenkins.hmallleasing.com\n    http:\n      paths:\n      - path: /\n        pathType: Prefix\n        backend:\n          service:\n            name: jenkins-svc \n            port:\n              name: http\n</code></pre>\n<h5 id=\"46-初始化jenkins\"><a class=\"anchor\" href=\"#46-初始化jenkins\">#</a> 4.6 初始化 Jenkins</h5>\n<p>1、查看 jenkins 对应的初始化密码；</p>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/7oXyJkT.png\" alt=\"1.png\" /></p>\n<p>2、跳过插件安装，进入 jenkins 自行安装即可；</p>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/Yd8GYZ3.png\" alt=\"2.png\" /></p>\n<h5 id=\"47-jenkins配置与插件\"><a class=\"anchor\" href=\"#47-jenkins配置与插件\">#</a> 4.7 Jenkins 配置与插件</h5>\n<p>1、修改默认管理员密码</p>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/QhEqsq2.png\" alt=\"3.png\" /></p>\n<p>2、安装 Jenkins 插件</p>\n<p>#1. 将 jenkins 插件的路径，更改为国内源<br />\n系统管理 -&gt; 插件管理 -&gt; 高级 -&gt; 升级站点 -&gt; 修改 URL-&gt;<a href=\"https://updates.jenkins.io/update-center.json\">https://updates.jenkins.io/update-center.json</a> 替换 https://mirrors.huaweicloud.com/jenkins/updates/update-center.json</p>\n<p>#2. 安装 Jenkins 插件</p>\n<p>中文插件： Localization: Chinese</p>\n<p>Git 插件： git、gitlab</p>\n<p>Sonar 插件： SonarQube Scanner</p>\n<p>Pipeline 插件： pipeline、Stage View、BlueOcean</p>\n<p>Kubernetes 插件： Kubernetes</p>\n<h4 id=\"五-jenkins-pipeline\"><a class=\"anchor\" href=\"#五-jenkins-pipeline\">#</a> 五、Jenkins Pipeline</h4>\n<h5 id=\"51-什么是pipeline\"><a class=\"anchor\" href=\"#51-什么是pipeline\">#</a> 5.1 什么是 Pipeline</h5>\n<p>Pipeline 就是通过 “代码的方式” 将多个步骤的任务连接起来。共同来完成一件事；比如：应用发布就会牵扯到非常多的步骤，获取代码 -&gt; 代码扫描 -&gt; 代码编译 -&gt; 制作镜像 -&gt; 推送仓库 -&gt; 部署应用，将这些步骤通过代码的方式组织在一起完成这次应用发布，这个就可以称之为流水线，亦或者是 Pipeline 流水线；</p>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/YhNTYQC.png\" alt=\"1.png\" /></p>\n<h5 id=\"52-pipeline代码示例\"><a class=\"anchor\" href=\"#52-pipeline代码示例\">#</a> 5.2 Pipeline 代码示例</h5>\n<p>agent: 节点</p>\n<p>stage: 阶段</p>\n<p>steps: 动作</p>\n<pre><code>pipeline&#123;\n    agent any    //目前只有一台jenkins，所以他会在本地执行\n\t\n\tenvironment &#123;       //全局变量\n\t\tHarbor_Url=&quot;s.hmallleasing.com&quot;\n\t\tHarbor_Pro=&quot;base&quot;\n\t&#125;\n\t\n    stages &#123;\n        stage('下载代码') &#123;\n\t\t\tenvironment &#123;     //局部变量\n\t\t\t\tImage_Name=&quot;nf-flms-order:v1.1&quot;\n\t\t\t\tFull_Image=&quot;$&#123;Harbor_Url&#125;/$&#123;Harbor_Pro&#125;/$&#123;Image_Name&#125;&quot;\n\t\t\t&#125;\t\t\n            steps &#123;\n\t\t\t\tsh 'echo &quot;Get Gitlab Code $&#123;Full_Image&#125;&quot;'\n            &#125;\n        &#125;\n        stage('检测代码') &#123;\n\t\t\tenvironment &#123;     //局部变量\n\t\t\t\tImage_Name=&quot;nf-flms-static:v1.1&quot;\n\t\t\t\tFull_Image=&quot;$&#123;Harbor_Url&#125;/$&#123;Harbor_Pro&#125;/$&#123;Image_Name&#125;&quot;\t\t\n\t\t\t&#125;\n            steps &#123;\n                sh 'echo &quot;Unit Test $&#123;Full_Image&#125;&quot;'\n            &#125;\n        &#125;\n        stage('编译代码') &#123;\n            steps &#123;\n                sh 'echo &quot;Build Code&quot;'\n            &#125;\n        &#125;\n        stage('制作镜像') &#123;\n            steps &#123;\n\t\t\t    sh 'echo &quot;Build Docker&quot;'\n            &#125;\n        &#125;\n        stage('部署应用') &#123;\n            steps &#123;\n                sh 'echo &quot;Deploy Code&quot;'\n            &#125;\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<h4 id=\"六-jenkins-slave架构\"><a class=\"anchor\" href=\"#六-jenkins-slave架构\">#</a> 六、 Jenkins Slave 架构</h4>\n<h5 id=\"61-架构基本说明\"><a class=\"anchor\" href=\"#61-架构基本说明\">#</a> 6.1 架构基本说明</h5>\n<p>所谓 JenkinsMaster/Slave 架构，及在 Master 上进行任务分配。然后由 Slave 来完成，不过 Slave 运行方式有两种：</p>\n<ul>\n<li>静态 SLave：需要固定的节点，配置其对应环境，手动注册到 Master，然后执行任务，任务完成节点处于空闲等待状态；</li>\n<li>动态 Slave：由 Master 动态创建 Slave 的 Pod，自动注册到 Master，然后执行任务，任务结束 Pod 自动销毁；</li>\n</ul>\n<p><strong>静态 Jenkins Slave</strong></p>\n<p>1、能够分担主节点上的压力，加快构建速度（所有任务都由 Master 执行，造成构建速度缓慢，且任务多会出现排队现象</p>\n<p>2、能够将特定的任务在特定的主机上运行（比如：不同的任务需要不同的编译环境）</p>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/mayAACO.png\" alt=\"2.png\" /></p>\n<p><strong>痛点：</strong></p>\n<ul>\n<li>1、Master 发生单点故障时，整个 Jenkins 都没办法使用；</li>\n<li>2、每个 Slave 的环境不一样，用于完成不同项目的编译打包工作，但这些不同环境的配置管理及维护都特别困难；</li>\n<li>3、有的 Slave 构建任务频繁，可能出现排队等待，而有的 Slave 又处于空闲状态，所以会出现资源分配严重不均衡；</li>\n<li>4、因为每个 Slave 都需要一台虚拟机，当 Slave 空间时，等于就是空跑，资源浪费明显；</li>\n</ul>\n<p>** 动态 Jenkins Slave **</p>\n<p>所谓动态 Slave，就是根据任务进行动态供应和动态删除。Jenkins Master 和 Jenkins Slave 都是以 Pod 的形式运行在 Kubernetes 集群节点上，Master 运行在其中一个节点上，其配置数据存储在一个持久卷声明中。而 Slave 则随机运行在各个节点上，但它不会一直处于运行状态，而是根据需求动态创建并自动删除。</p>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/ngDX7Wo.png\" alt=\"3.png\" /></p>\n<p><strong>优势：</strong></p>\n<ul>\n<li>1、高可用性：（当 Jenkins Master 故障时，Kubernetes 会自动创建一个新的 Jenkins Master 容器，并将持久卷挂载至新创建的容器，保证数据不会丢失，从而实现 Jenkins 的高可用性。）</li>\n<li>2、高可扩缩性：（当 Kubernetes 集群因资源不足而导致任务长时间排队等待时，可以向集群新增节点，来环节压力。）</li>\n<li>3、资源分配合理：（Kubernetes 动态分配 Slave 至空闲节点，避免因单个节点资源利用率高而导致任务排队等待。）</li>\n</ul>\n<h4 id=\"七-jenkins动态slave配置\"><a class=\"anchor\" href=\"#七-jenkins动态slave配置\">#</a> 七、Jenkins 动态 Slave 配置</h4>\n<h5 id=\"71-配置kubernetes\"><a class=\"anchor\" href=\"#71-配置kubernetes\">#</a> 7.1 配置 Kubernetes</h5>\n<p><em><mark>系统管理 -&gt; 节点管理 -&gt;Cloud-&gt;Add a New Cloud-&gt;Kubernetes</mark></em></p>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/teMdRgu.png\" alt=\"1.png\" /></p>\n<ul>\n<li>Kubernetes 地址： <a href=\"https://kubernetes.default.svc.cluster.local\">https://kubernetes.default.svc.cluster.local</a></li>\n<li>Kubernetes 命名空间：ops</li>\n</ul>\n<p>由于 Jenkins 是通过 Pod 运行在 Kubernetes 集群中，所以通过 service 地址即可连接 Kubernetes 集群，正常通信。</p>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/fJss696.png\" alt=\"2.png\" /></p>\n<h5 id=\"72-配置jenkins\"><a class=\"anchor\" href=\"#72-配置jenkins\">#</a> 7.2 配置 Jenkins</h5>\n<p>Jenkins 地址：<a href=\"http://jenkins-svc.ops.svc.cluster.local:8080\">http://jenkins-svc.ops.svc.cluster.local:8080</a></p>\n<p>Jenkins 通道：jenkins-svc.ops.svc.cluster.local:50000</p>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/8rRPlr9.png\" alt=\"3.png\" /></p>\n<h5 id=\"73-运行测试流水线\"><a class=\"anchor\" href=\"#73-运行测试流水线\">#</a> 7.3 运行测试流水线</h5>\n<p>1、编写流水线</p>\n<pre><code>pipeline &#123;\n  agent &#123;\n    kubernetes &#123;\n      cloud 'kubernetes'\n    &#125;\n  &#125;\n\tstages &#123;\n\t\tstage('输出主机名称') &#123;\n\t\t\tsteps &#123;\n\t\t\t\tsh 'hostname'\n\t\t\t&#125;\n\t\t&#125;\n\t\tstage('等待片刻') &#123;\n\t\t\tsteps &#123;\n\t\t\t\tsh 'sleep 60'\n\t\t\t&#125;\n\t\t&#125;\n\t&#125;\n&#125;\n</code></pre>\n<p>2、jenkins 会自动拉起一个 Pod，运行 agent 容器注册到 Master 节点，然后进行任务的执行</p>\n<pre><code>[root@k8s-master01 03-jenkins]# kubectl get pods -n ops\nNAME                                   READY   STATUS    RESTARTS      AGE\ngitlab-0                               1/1     Running   0             20h\njenkins-0                              1/1     Running   2 (22m ago)   86m\npipeline-daemon1-4-z9rqq-0t4nr-ql2v3   1/1     Running   0             2s    #jenkins slave\npostgresql-0                           1/1     Running   0             17h\nsonarqube-0                            1/1     Running   0             17h\n</code></pre>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/MmlW9RG.png\" alt=\"4.png\" /></p>\n<h4 id=\"八-制作pod模板镜像\"><a class=\"anchor\" href=\"#八-制作pod模板镜像\">#</a> 八、制作 Pod 模板镜像</h4>\n<p>jnlp 镜像是用来连接 JenkinsMaster 以及共享 Master 的 WORKSPACE，但该镜像并没有 maven、docker、kubectl 等常用命令，为此我们需要定制几个镜像，后期通过 Pipeline 将不同的任务交由同一个 Pod 的不同的容器来执行。</p>\n<h5 id=\"81-maven\"><a class=\"anchor\" href=\"#81-maven\">#</a> 8.1 Maven</h5>\n<p>1、下载 settings.xml</p>\n<pre><code>[root@k8s-master01 maven]# wget https://linux.oldxu.net/settings_docker.xml\n</code></pre>\n<p>2、Dockerfile</p>\n<pre><code>[root@k8s-master01 maven]# cat Dockerfile\nFROM maven:3.8.6-openjdk-8\nADD ./settings_docker.xml /usr/share/maven/conf/settings.xml\nRUN /bin/cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime\n</code></pre>\n<p>3、构建镜像并推送私有仓库</p>\n<pre><code>[root@k8s-master01 maven]# docker build -t s.hmallleasing.com/base/maven:3.8.6 .\n[root@k8s-master01 maven]# docker push s.hmallleasing.com/base/maven:3.8.6\n</code></pre>\n<h5 id=\"82-sonar\"><a class=\"anchor\" href=\"#82-sonar\">#</a> 8.2 sonar</h5>\n<pre><code>[root@k8s-master01 ~]# docker pull emeraldsquad/sonar-scanner:2.3.0\n[root@k8s-master01 ~]# docker tag emeraldsquad/sonar-scanner:2.3.0 s.hmallleasing.com/base/sonar-scanner:2.3.0\n[root@k8s-master01 ~]# docker push s.hmallleasing.com/base/sonar-scanner:2.3.0\n</code></pre>\n<h5 id=\"83-nodejs\"><a class=\"anchor\" href=\"#83-nodejs\">#</a> 8.3 NodeJs</h5>\n<p>1、Dockerfile</p>\n<pre><code>[root@k8s-master01 nodejs]# cat Dockerfile\nFROM centos:7\nRUN /bin/cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime\nRUN curl --silent --location https://rpm.nodesource.com/setup_14.x |bash -\nRUN curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo\nRUN yum install nodejs gcc-c++ make vim -y &amp;&amp; \\\n    yum clean all\n</code></pre>\n<p>2、构建镜像并推送私有仓库</p>\n<pre><code>[root@k8s-master01 nodejs]# docker build -t s.hmallleasing.com/base/nodejs:14.20 .\n[root@k8s-master01 nodejs]# docker push s.hmallleasing.com/base/nodejs:14.20\n</code></pre>\n<h5 id=\"84-docker\"><a class=\"anchor\" href=\"#84-docker\">#</a> 8.4 Docker</h5>\n<pre><code>[root@k8s-master01 ~]# docker pull docker:20.10 \n[root@k8s-master01 ~]# docker tag docker:20.10 s.hmallleasing.com/base/docker:20.10\n[root@k8s-master01 ~]# docker push s.hmallleasing.com/base/docker:20.10\n</code></pre>\n<h5 id=\"85-kubectl\"><a class=\"anchor\" href=\"#85-kubectl\">#</a> 8.5 kubectl</h5>\n<p>1、编写 kubernetes.repo 文件</p>\n<pre><code>cat &lt;&lt;EOF&gt; ./kubernetes.repo\n[kubernetes]\nname=Kubernetes\nbaseurl=https://mirrors.aliyun.com/kubernetes-new/core/stable/v1.32/rpm/\nenabled=1\ngpgcheck=0\ngpgkey=https://mirrors.aliyun.com/kubernetes-new/core/stable/v1.32/rpm/repodata/repomd.xml.key\nEOF\n</code></pre>\n<p>2、Dockerfile</p>\n<pre><code>[root@k8s-master01 kubectl]# cat Dockerfile \nFROM centos:7\n# 1、调整时区\nRUN /bin/cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime &amp;&amp; \\\n    echo 'Asia/Shanghai' &gt;/etc/timezone\nRUN curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo\n\n# 2、添加yum源\nADD ./kubernetes.repo /etc/yum.repos.d/kubernetes.repo\n\n# 3、安装Kubectl\nRUN yum makecache &amp;&amp; yum install kubectl-1.32.3 -y &amp;&amp; \\\n    yum clean all\n</code></pre>\n<p>3、构建镜像并推送私有仓库</p>\n<pre><code>[root@k8s-master01 kubectl]# docker build -t s.hmallleasing.com/base/kubectl:1.32.3 .\n[root@k8s-master01 kubectl]# docker push s.hmallleasing.com/base/kubectl:1.32.3\n</code></pre>\n<h4 id=\"九-测试pod模板镜像\"><a class=\"anchor\" href=\"#九-测试pod模板镜像\">#</a> 九、测试 Pod 模板镜像</h4>\n<p>运行一个流水线任务，定义 Pod 模板中的容器名称以及容器镜像地址，而后定义任务，不同的任务由不同的容器来执行</p>\n<h5 id=\"91-定义podtemplate\"><a class=\"anchor\" href=\"#91-定义podtemplate\">#</a> 9.1 定义 podTemplate</h5>\n<pre><code>pipeline &#123;\n  agent &#123;\n    kubernetes &#123;\n      cloud 'kubernetes'\n      yaml '''\n        apiVersion: v1\n        kind: Pod\n        spec:\n          imagePullSecrets:\n          - name: harbor-admin\n          volumes:\n          - name: data\n            nfs:\n              server: 192.168.1.75\n              path: /data/nfs/maven\n          - name: dockersocket\n            hostPath:\n              path: /run/docker.sock\n          containers:\n          - name: maven\n            image: s.hmallleasing.com/base/maven:3.8.6\n            imagePullPolicy: IfNotPresent\n            command: [&quot;cat&quot;]\n            tty: true\n            volumeMounts:\n            - name: data\n              mountPath: /root/.m2\n          - name: nodejs\n            image: s.hmallleasing.com/base/nodejs:14.20\n            imagePullPolicy: IfNotPresent\n            command: [&quot;cat&quot;]\n            tty: true\n          - name: sonar\n            image: s.hmallleasing.com/base/sonar-scanner:2.3.0\n            imagePullPolicy: IfNotPresent\n            command: [&quot;cat&quot;]\n            tty: true\n          - name: docker\n            image: s.hmallleasing.com/base/docker:20.10\n            imagePullPolicy: IfNotPresent\n            command: [&quot;cat&quot;]\n            tty: true\n            volumeMounts:\n            - name: dockersocket\n              mountPath: /run/docker.sock\n          - name: kubectl\n            image: s.hmallleasing.com/base/kubectl:1.32.3\n            imagePullPolicy: IfNotPresent\n            command: [&quot;cat&quot;]\n            tty: true\n      '''\n    &#125;\n  &#125;\n  stages &#123;\n    stage('maven测试') &#123;\n      steps &#123;\n        container('maven') &#123;\n\t\t  sh 'mvn --version'\n        &#125;\n      &#125;\n    &#125;\n\n    stage('nodejs测试') &#123;\n      steps &#123;\n        container('nodejs') &#123;\n\t\t  sh 'node -v'\n        &#125;\n      &#125;\n    &#125;\t\n\t\n    stage('docker测试') &#123;\n      steps &#123;\n        container('docker') &#123;\n\t\t  sh 'docker ps'\n        &#125;\n      &#125;\n    &#125;\t\t\n\n    stage('kubectl测试') &#123;\n      steps &#123;\n        container('kubectl') &#123;\n\t\t  sh 'kubectl version'\n        &#125;\n      &#125;\n    &#125;\t\t\n  &#125;\n&#125;\n</code></pre>\n<p><em><strong>#在 nfs 中创建 /data/maven 文件夹，将 maven 缓存 /root/.m2 挂载至该目录</strong></em></p>\n<h5 id=\"92-运行pipeline\"><a class=\"anchor\" href=\"#92-运行pipeline\">#</a> 9.2 运行 Pipeline</h5>\n<p>构建流水线，检查各个阶段调用容器执行的输出结果是否 OK；</p>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/iLcep5b.png\" alt=\"5.png\" /></p>\n",
            "tags": [
                "DevOps"
            ]
        }
    ]
}