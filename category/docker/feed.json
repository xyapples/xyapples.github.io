{
    "version": "https://jsonfeed.org/version/1",
    "title": "LinuxSre云原生 • All posts by \"docker\" category",
    "description": "专注于 Linux 运维、云计算、云原⽣等技术",
    "home_page_url": "http://ixuyong.cn",
    "items": [
        {
            "id": "http://ixuyong.cn/posts/1888662579.html",
            "url": "http://ixuyong.cn/posts/1888662579.html",
            "title": "Containerd常用命令",
            "date_published": "2025-05-14T12:29:07.000Z",
            "content_html": "<h3 id=\"containerd常用命令\"><a class=\"anchor\" href=\"#containerd常用命令\">#</a> Containerd 常用命令</h3>\n<h4 id=\"安装containerd\"><a class=\"anchor\" href=\"#安装containerd\">#</a> 安装 Containerd</h4>\n<p><strong>配置安装源</strong></p>\n<pre><code>yum install wget jq psmisc vim net-tools telnet yum-utils device-mapper-persistent-data lvm2 git -y\nyum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\n</code></pre>\n<p><strong>安装 docker-ce、containerd</strong></p>\n<pre><code>yum install docker-ce containerd -y\n</code></pre>\n<p><em>可以无需启动 Docker，只需要配置和启动 Containerd 即可。</em></p>\n<p><strong>配置 Containerd 所需的模块</strong></p>\n<pre><code># cat &lt;&lt;EOF | sudo tee /etc/modules-load.d/containerd.conf\noverlay\nbr_netfilter\nEOF\n</code></pre>\n<p><strong>加载模块</strong></p>\n<pre><code># cat &lt;&lt;EOF | sudo tee /etc/sysctl.d/99-kubernetes-cri.conf\nnet.bridge.bridge-nf-call-iptables  = 1\nnet.ipv4.ip_forward                 = 1\nnet.bridge.bridge-nf-call-ip6tables = 1\nEOF\n</code></pre>\n<p><strong>配置 Containerd 所需的内核</strong></p>\n<pre><code># cat &lt;&lt;EOF | sudo tee /etc/sysctl.d/99-kubernetes-cri.conf\nnet.bridge.bridge-nf-call-iptables  = 1\nnet.ipv4.ip_forward                 = 1\nnet.bridge.bridge-nf-call-ip6tables = 1\nEOF\n</code></pre>\n<p><strong>加载内核</strong></p>\n<pre><code>sysctl --system\n</code></pre>\n<p><strong>生成 Containerd 的配置文件</strong></p>\n<pre><code>mkdir -p /etc/containerd\ncontainerd config default | tee /etc/containerd/config.toml\n</code></pre>\n<p><strong>更改 Containerd 的 Cgroup 和 Pause 镜像</strong></p>\n<pre><code>sed -i 's#SystemdCgroup = false#SystemdCgroup = true#g' /etc/containerd/config.toml\nsed -i 's#k8s.gcr.io/pause#registry.cn-hangzhou.aliyuncs.com/google_containers/pause#g'  /etc/containerd/config.toml\nsed -i 's#registry.gcr.io/pause#registry.cn-hangzhou.aliyuncs.com/google_containers/pause#g'  /etc/containerd/config.toml\nsed -i 's#registry.k8s.io/pause#registry.cn-hangzhou.aliyuncs.com/google_containers/pause#g'  /etc/containerd/config.toml\n</code></pre>\n<p><strong>启动 Containerd，并配置开机自启动</strong></p>\n<pre><code>systemctl daemon-reload\nsystemctl enable --now containerd\nsystemctl status  containerd \n</code></pre>\n<h4 id=\"containerd-配置镜像加速\"><a class=\"anchor\" href=\"#containerd-配置镜像加速\">#</a> Containerd 配置镜像加速</h4>\n<p>打开 /etc/containerd/config.toml 文件，找到 [plugins.&quot;io.containerd.grpc.v1.cri&quot;.registry.mirrors] 部分，添加所需的镜像源配置</p>\n<pre><code># vim /etc/containerd/config.toml\n#添加以下配置镜像加速服务\n[plugins.&quot;io.containerd.grpc.v1.cri&quot;.registry.mirrors]\n  [plugins.&quot;io.containerd.grpc.v1.cri&quot;.registry.mirrors.&quot;docker.io&quot;]\n    endpoint = [\n      &quot;https://docker.io&quot;,\n      &quot;https://6qxc6b6n.mirror.aliyuncs.com&quot;,\n      &quot;https://docker.m.daocloud.io&quot;,\n      &quot;https://dockerproxy.com/&quot;\n    ]\n  [plugins.&quot;io.containerd.grpc.v1.cri&quot;.registry.mirrors.&quot;gcr.io&quot;]\n    endpoint = [\n      &quot;https://gcr.m.daocloud.io&quot;,\n      &quot;https://gcr.nju.edu.cn&quot;,\n      &quot;https://gcr.dockerproxy.com&quot;\n    ]\n</code></pre>\n<p><strong>重新启动 Containerd</strong></p>\n<pre><code>systemctl daemon-reload\nsystemctl restart containerd\n</code></pre>\n<h4 id=\"containerd常用操作命令实践\"><a class=\"anchor\" href=\"#containerd常用操作命令实践\">#</a> Containerd 常用操作命令实践</h4>\n<h5 id=\"查看containerd命名空间\"><a class=\"anchor\" href=\"#查看containerd命名空间\">#</a> <strong>查看 Containerd 命名空间</strong></h5>\n<p>namespace 来于指定类似于工作空间的隔离区域</p>\n<pre><code>[root@k8s-node02 ~]# ctr namespace ls \nNAME    LABELS \ndefault        \nk8s.io         \nmoby \n</code></pre>\n<h5 id=\"查看containerd镜像\"><a class=\"anchor\" href=\"#查看containerd镜像\">#</a> <strong>查看 Containerd 镜像</strong></h5>\n<p>因为没有指定 namespace，所以查看的是默认命名空间下的镜像</p>\n<pre><code>ctr images ls\n</code></pre>\n<p>查看指定命名空间 k8s.io 下的镜像</p>\n<pre><code>ctr -n k8s.io images ls\n</code></pre>\n<h5 id=\"拉取containerd镜像\"><a class=\"anchor\" href=\"#拉取containerd镜像\">#</a> <strong>拉取 Containerd 镜像</strong></h5>\n<p>拉取指定命名空间 k8s.io 镜像 pause-amd64:3.2</p>\n<pre><code> ctr -n k8s.io images pull registry.aliyuncs.com/google_containers/pause-amd64:3.2\n ctr -n k8s.io images pull docker.io/library/nginx:1.21\n</code></pre>\n<h5 id=\"删除containerd镜像\"><a class=\"anchor\" href=\"#删除containerd镜像\">#</a> <strong>删除 containerd 镜像</strong></h5>\n<pre><code>ctr -n k8s.io images rm registry.aliyuncs.com/google_containers/pause-amd64:3.2\n</code></pre>\n<h5 id=\"导出containerd镜像\"><a class=\"anchor\" href=\"#导出containerd镜像\">#</a> <strong>导出 Containerd 镜像</strong></h5>\n<pre><code>ctr -n k8s.io images export pause.tar.gz registry.aliyuncs.com/google_containers/pause-amd64:3.2\n</code></pre>\n<h5 id=\"导入containerd镜像\"><a class=\"anchor\" href=\"#导入containerd镜像\">#</a> <strong>导入 Containerd 镜像</strong></h5>\n<pre><code>ctr -n k8s.io image import pause.tar.gz\n</code></pre>\n<p><em>docker save -o 命令导出来的镜像可以用 ctr images import 导出，同理 ctr images export 导出来的镜像也可以有 docker load 还原。</em></p>\n<h5 id=\"标记containerd镜像\"><a class=\"anchor\" href=\"#标记containerd镜像\">#</a> <strong>标记 Containerd 镜像</strong></h5>\n<pre><code>ctr -n k8s.io images tag registry.aliyuncs.com/google_containers/pause-amd64:3.2 pause:3.2\n</code></pre>\n<h5 id=\"运行containerd容器\"><a class=\"anchor\" href=\"#运行containerd容器\">#</a> ** 运行 Containerd 容器 **</h5>\n<p>在后台运行一个 centos 镜像的容器，名称叫做 centos_k8s</p>\n<pre><code> ctr -n k8s.io  run -d  docker.io/library/nginx:1.21 web\n</code></pre>\n<h5 id=\"查看运行容器的task\"><a class=\"anchor\" href=\"#查看运行容器的task\">#</a> <strong>查看运行容器的 task</strong></h5>\n<pre><code>ctr -n k8s.io task ls\n</code></pre>\n<h5 id=\"启动指定容器task\"><a class=\"anchor\" href=\"#启动指定容器task\">#</a> 启动指定容器 task</h5>\n<pre><code>ctr -n k8s.io task start -d centos_k8s\n</code></pre>\n<h5 id=\"进入指定容器task\"><a class=\"anchor\" href=\"#进入指定容器task\">#</a> 进入指定容器 task</h5>\n<pre><code>ctr -n k8s.io task exec --exec-id 3118 -t web /bin/bash\n</code></pre>\n<h5 id=\"删除指定容器task\"><a class=\"anchor\" href=\"#删除指定容器task\">#</a> 删除指定容器 task</h5>\n<pre><code>ctr -n k8s.io task rm -f web\n</code></pre>\n<h5 id=\"停止指定容器task\"><a class=\"anchor\" href=\"#停止指定容器task\">#</a> 停止指定容器 task</h5>\n<pre><code>ctr -n k8s.io task kill --signal 9 centos_k8s\n</code></pre>\n<h5 id=\"314-查看容器\"><a class=\"anchor\" href=\"#314-查看容器\">#</a> 3.14 查看容器</h5>\n<pre><code>ctr -n k8s.io c list\n</code></pre>\n<h5 id=\"删除容器\"><a class=\"anchor\" href=\"#删除容器\">#</a> 删除容器</h5>\n<pre><code>ctr -n k8s.io c rm centos\n</code></pre>\n<p>删除容器以前需要将 task 删除，不然会报以下错误</p>\n<pre><code>[root@k8s-node02 ~]# ctr -n k8s.io c rm web \nERRO[0000] failed to delete container &quot;web&quot;              error=&quot;cannot delete a non stopped container: &#123;running 0 0001-01-01 00:00:00 +0000 UTC&#125;&quot;\nctr: cannot delete a non stopped container: &#123;running 0 0001-01-01 00:00:00 +0000 UTC&#125;\n</code></pre>\n<h4 id=\"docker与containerd常用命令对比\"><a class=\"anchor\" href=\"#docker与containerd常用命令对比\">#</a> Docker 与 Containerd 常用命令对比</h4>\n<table>\n<thead>\n<tr>\n<th>说明</th>\n<th>docker 命令</th>\n<th>containerd 命令</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>查看本地镜像</td>\n<td>docker images</td>\n<td>ctr images ls</td>\n</tr>\n<tr>\n<td>拉取镜像</td>\n<td>docker pull imagename</td>\n<td>ctr images pull imagename</td>\n</tr>\n<tr>\n<td>推送镜像</td>\n<td>docker push imagename</td>\n<td>ctr images push imagename</td>\n</tr>\n<tr>\n<td>给镜像打标签</td>\n<td>docker tag imagename tagname</td>\n<td>ctr images tag imagename tagname</td>\n</tr>\n<tr>\n<td>导出镜像</td>\n<td>docker save filename imagename</td>\n<td>ctr images export filename imagename</td>\n</tr>\n<tr>\n<td>导入镜像</td>\n<td>docker load filename</td>\n<td>ctr image import filename</td>\n</tr>\n<tr>\n<td>运行并创建容器</td>\n<td>docker run [options] imagename commond</td>\n<td>ctr run [options]  imagenamecontainername</td>\n</tr>\n<tr>\n<td>进入容器</td>\n<td>docker exec [options] names commond</td>\n<td>ctr task exec [options]  names commond</td>\n</tr>\n<tr>\n<td>查看运行的容器</td>\n<td>docker ps</td>\n<td>ctr task list</td>\n</tr>\n<tr>\n<td>删除容器</td>\n<td>docker rm [options] names</td>\n<td>1.ctr task rm -f names 2. ctr c rm -f names</td>\n</tr>\n</tbody>\n</table>\n",
            "tags": [
                "Docker"
            ]
        },
        {
            "id": "http://ixuyong.cn/posts/3364424907.html",
            "url": "http://ixuyong.cn/posts/3364424907.html",
            "title": "阿里云+Github构建镜像仓库",
            "date_published": "2025-04-26T08:20:14.000Z",
            "content_html": "<h3 id=\"阿里云github构建镜像仓库解决-k8sgcrio访问\"><a class=\"anchor\" href=\"#阿里云github构建镜像仓库解决-k8sgcrio访问\">#</a> 阿里云 + github 构建镜像仓库解决 k8s.gcr.io 访问</h3>\n<p><a href=\"http://xn--k8s-xi9d897o.gcr.io/\">由于 k8s.gcr.io/</a> 镜像仓库位于国外，国内使用 kubeadm 构建 docker 集群时无法访问相应的 docker 镜像。</p>\n<h4 id=\"1-登录github创建仓库\"><a class=\"anchor\" href=\"#1-登录github创建仓库\">#</a> <strong>1.</strong> 登录 Github 创建仓库</h4>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/vgZkKBC.png\" alt=\"1.png\" /></p>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/VnJlhBE.png\" alt=\"2.png\" /></p>\n<h4 id=\"2-创建dockerfile\"><a class=\"anchor\" href=\"#2-创建dockerfile\">#</a> <strong>2.</strong> 创建 Dockerfile</h4>\n<p>仓库下面创建一个 Dockerfile，以 ingress-nginx-controller 为例下的 dockerfile 内容如下：</p>\n<pre><code>[root@manager ~]# mkdir ingress-nginx-controller\n[root@manager ~]# cd ingress-nginx-controller/\n[root@manager ingress-nginx-controller]# cat Dockerfile \nFROM registry.k8s.io/ingress-nginx/controller:v1.12.1 \n</code></pre>\n<h4 id=\"3-ssh免密登录github\"><a class=\"anchor\" href=\"#3-ssh免密登录github\">#</a> 3. SSH 免密登录 GitHub</h4>\n<pre><code>[root@manager ingress-nginx-controller]# ssh-keygen\n[root@manager ingress-nginx-controller]# cat ~/.ssh/id_rsa.pub\n</code></pre>\n<p>进入<em> GitHub</em> 的个人设置，找到【<em>SSH and GPG keys</em>】，然后点击新增 SSH Key，进入如下界面，<em>title</em> 输入你对于当前<em> SSH key</em> 的备注，下面的<em> key</em> 就粘贴上一步生成的<em> id_rsa.pub</em> 内的内容</p>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/3djSHRS.png\" alt=\"3.png\" /></p>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/8gVcVu4.png\" alt=\"5.png\" /></p>\n<h4 id=\"4-推送dockerfile至github\"><a class=\"anchor\" href=\"#4-推送dockerfile至github\">#</a> 4. 推送 Dockerfile 至 Github</h4>\n<pre><code>[root@manager ingress-nginx-controller]# yum install git -y\n[root@manager ingress-nginx-controller]# git --version\n[root@manager ingress-nginx-controller]# git config --global user.email &quot;373370405@qq.com&quot;\n[root@manager ingress-nginx-controller]# git config --global color.ui true\n[root@manager ingress-nginx-controller]# git init\n[root@manager ingress-nginx-controller]# git add .\n[root@manager ingress-nginx-controller]# git commit -m &quot;first commit&quot;\n[root@manager ingress-nginx-controller]# git branch -M main\n[root@manager ingress-nginx-controller]# git remote add origin git@github.com:xyapples/ingress-nginx-controller.git   #添加远程仓库\n[root@manager ingress-nginx-controller]# git remote -v\n[root@manager ingress-nginx-controller]# git push -u origin main\n[root@manager ingress-nginx-controller]# git remote remove origin  #移除远程仓库\n</code></pre>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/N3t49eX.png\" alt=\"6.png\" /></p>\n<h4 id=\"5-登录阿里云创建镜像仓库\"><a class=\"anchor\" href=\"#5-登录阿里云创建镜像仓库\">#</a> <strong>5.</strong> 登录阿里云创建镜像仓库</h4>\n<p>登录阿里云镜像：<a href=\"https://cr.console.aliyun.com/%EF%BC%8C%E5%88%9B%E5%BB%BA%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93%EF%BC%9A\">https://cr.console.aliyun.com/，创建镜像仓库：</a></p>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/1zFqa35.png\" alt=\"7.png\" /></p>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/PhzoeeT.png\" alt=\"1.png\" /></p>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/iYAbB0x.png\" alt=\"2.png\" /></p>\n<h4 id=\"6-构建镜像\"><a class=\"anchor\" href=\"#6-构建镜像\">#</a> 6. 构建镜像</h4>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/KD3DI7J.png\" alt=\"3.png\" /></p>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/WiwNBRK.png\" alt=\"4.png\" /></p>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/155pUrE.png\" alt=\"7.png\" /></p>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/155pUrE.png\" alt=\"7.png\" /></p>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/AU1371X.png\" alt=\"8.png\" /></p>\n",
            "tags": [
                "Docker"
            ]
        }
    ]
}