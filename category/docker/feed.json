{
    "version": "https://jsonfeed.org/version/1",
    "title": "LinuxSre云原生 • All posts by \"docker\" category",
    "description": "专注于 Linux 运维、云计算、云原⽣等技术",
    "home_page_url": "http://ixuyong.cn",
    "items": [
        {
            "id": "http://ixuyong.cn/posts/1888662579.html",
            "url": "http://ixuyong.cn/posts/1888662579.html",
            "title": "Containerd常用命令",
            "date_published": "2025-05-14T12:29:07.000Z",
            "content_html": "<h3 id=\"containerd常用命令\"><a class=\"anchor\" href=\"#containerd常用命令\">#</a> Containerd 常用命令</h3>\n<h4 id=\"1-安装containerd\"><a class=\"anchor\" href=\"#1-安装containerd\">#</a> 1. 安装 Containerd</h4>\n<p><strong>1.1 配置安装源</strong></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>yum <span class=\"token function\">install</span> <span class=\"token function\">wget</span> jq psmisc <span class=\"token function\">vim</span> net-tools telnet yum-utils device-mapper-persistent-data lvm2 <span class=\"token function\">git</span> <span class=\"token parameter variable\">-y</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</pre></td></tr></table></figure><p><strong>1.2 安装 docker-ce、containerd</strong></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>yum <span class=\"token function\">install</span> docker-ce containerd <span class=\"token parameter variable\">-y</span></pre></td></tr></table></figure><p><em>可以无需启动 Docker，只需要配置和启动 Containerd 即可。</em></p>\n<p><strong>1.3 配置 Containerd 所需的模块</strong></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># cat &lt;&lt;EOF | sudo tee /etc/modules-load.d/containerd.conf</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>overlay</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>br_netfilter</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>EOF</pre></td></tr></table></figure><p><strong>1.4 加载模块</strong></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># cat &lt;&lt;EOF | sudo tee /etc/sysctl.d/99-kubernetes-cri.conf</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>net.bridge.bridge-nf-call-iptables  <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>net.ipv4.ip_forward                 <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>net.bridge.bridge-nf-call-ip6tables <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>EOF</pre></td></tr></table></figure><p><strong>1.5 配置 Containerd 所需的内核</strong></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># cat &lt;&lt;EOF | sudo tee /etc/sysctl.d/99-kubernetes-cri.conf</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>net.bridge.bridge-nf-call-iptables  <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>net.ipv4.ip_forward                 <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>net.bridge.bridge-nf-call-ip6tables <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>EOF</pre></td></tr></table></figure><p><strong>1.6 加载内核</strong></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sysctl</span> <span class=\"token parameter variable\">--system</span></pre></td></tr></table></figure><p><strong>1.7 生成 Containerd 的配置文件</strong></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mkdir</span> <span class=\"token parameter variable\">-p</span> /etc/containerd</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>containerd config default <span class=\"token operator\">|</span> <span class=\"token function\">tee</span> /etc/containerd/config.toml</pre></td></tr></table></figure><p><strong>1.8 更改 Containerd 的 Cgroup 和 Pause 镜像</strong></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sed</span> <span class=\"token parameter variable\">-i</span> <span class=\"token string\">'s#SystemdCgroup = false#SystemdCgroup = true#g'</span> /etc/containerd/config.toml</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">sed</span> <span class=\"token parameter variable\">-i</span> <span class=\"token string\">'s#k8s.gcr.io/pause#registry.cn-hangzhou.aliyuncs.com/google_containers/pause#g'</span>  /etc/containerd/config.toml</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">sed</span> <span class=\"token parameter variable\">-i</span> <span class=\"token string\">'s#registry.gcr.io/pause#registry.cn-hangzhou.aliyuncs.com/google_containers/pause#g'</span>  /etc/containerd/config.toml</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">sed</span> <span class=\"token parameter variable\">-i</span> <span class=\"token string\">'s#registry.k8s.io/pause#registry.cn-hangzhou.aliyuncs.com/google_containers/pause#g'</span>  /etc/containerd/config.toml</pre></td></tr></table></figure><p><strong>1.9 启动 Containerd，并配置开机自启动</strong></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>systemctl daemon-reload</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>systemctl <span class=\"token builtin class-name\">enable</span> <span class=\"token parameter variable\">--now</span> containerd</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>systemctl status  containerd</pre></td></tr></table></figure><h4 id=\"2-containerd-配置镜像加速\"><a class=\"anchor\" href=\"#2-containerd-配置镜像加速\">#</a> 2. Containerd 配置镜像加速</h4>\n<p>打开 /etc/containerd/config.toml 文件，找到 [plugins.&quot;io.containerd.grpc.v1.cri&quot;.registry.mirrors] 部分，添加所需的镜像源配置</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># vim /etc/containerd/config.toml</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#添加以下配置镜像加速服务</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">[</span>plugins.<span class=\"token string\">\"io.containerd.grpc.v1.cri\"</span>.registry.mirrors<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">[</span>plugins.<span class=\"token string\">\"io.containerd.grpc.v1.cri\"</span>.registry.mirrors.<span class=\"token string\">\"docker.io\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    endpoint <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token string\">\"https://docker.io\"</span>,</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token string\">\"https://6qxc6b6n.mirror.aliyuncs.com\"</span>,</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token string\">\"https://docker.m.daocloud.io\"</span>,</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token string\">\"https://dockerproxy.com/\"</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">[</span>plugins.<span class=\"token string\">\"io.containerd.grpc.v1.cri\"</span>.registry.mirrors.<span class=\"token string\">\"gcr.io\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    endpoint <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token string\">\"https://gcr.m.daocloud.io\"</span>,</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token string\">\"https://gcr.nju.edu.cn\"</span>,</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token string\">\"https://gcr.dockerproxy.com\"</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p><strong>重新启动 Containerd</strong></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>systemctl daemon-reload</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>systemctl restart containerd</pre></td></tr></table></figure><h4 id=\"3-containerd常用操作命令实践\"><a class=\"anchor\" href=\"#3-containerd常用操作命令实践\">#</a> 3. Containerd 常用操作命令实践</h4>\n<h5 id=\"31-查看containerd命名空间\"><a class=\"anchor\" href=\"#31-查看containerd命名空间\">#</a> <strong>3.1 查看 Containerd 命名空间</strong></h5>\n<p>namespace 来于指定类似于工作空间的隔离区域</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@k8s-node02 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># ctr namespace ls </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>NAME    LABELS </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>default        </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>k8s.io         </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>moby</pre></td></tr></table></figure><h5 id=\"32-查看containerd镜像\"><a class=\"anchor\" href=\"#32-查看containerd镜像\">#</a> <strong>3.2 查看 Containerd 镜像</strong></h5>\n<p>因为没有指定 namespace，所以查看的是默认命名空间下的镜像</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ctr images <span class=\"token function\">ls</span></pre></td></tr></table></figure><p>查看指定命名空间 k8s.io 下的镜像</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ctr <span class=\"token parameter variable\">-n</span> k8s.io images <span class=\"token function\">ls</span></pre></td></tr></table></figure><h5 id=\"33-拉取containerd镜像\"><a class=\"anchor\" href=\"#33-拉取containerd镜像\">#</a> <strong>3.3 拉取 Containerd 镜像</strong></h5>\n<p>拉取指定命名空间 k8s.io 镜像 pause-amd64:3.2</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ctr <span class=\"token parameter variable\">-n</span> k8s.io images pull registry.aliyuncs.com/google_containers/pause-amd64:3.2</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> ctr <span class=\"token parameter variable\">-n</span> k8s.io images pull docker.io/library/nginx:1.21</pre></td></tr></table></figure><h5 id=\"34-删除containerd镜像\"><a class=\"anchor\" href=\"#34-删除containerd镜像\">#</a> <strong>3.4 删除 containerd 镜像</strong></h5>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ctr <span class=\"token parameter variable\">-n</span> k8s.io images <span class=\"token function\">rm</span> registry.aliyuncs.com/google_containers/pause-amd64:3.2</pre></td></tr></table></figure><h5 id=\"35-导出containerd镜像\"><a class=\"anchor\" href=\"#35-导出containerd镜像\">#</a> <strong>3.5 导出 Containerd 镜像</strong></h5>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ctr <span class=\"token parameter variable\">-n</span> k8s.io images <span class=\"token builtin class-name\">export</span> pause.tar.gz registry.aliyuncs.com/google_containers/pause-amd64:3.2</pre></td></tr></table></figure><h5 id=\"36-导入containerd镜像\"><a class=\"anchor\" href=\"#36-导入containerd镜像\">#</a> <strong>3.6 导入 Containerd 镜像</strong></h5>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ctr <span class=\"token parameter variable\">-n</span> k8s.io image <span class=\"token function\">import</span> pause.tar.gz</pre></td></tr></table></figure><p><em>docker save -o 命令导出来的镜像可以用 ctr images import 导出，同理 ctr images export 导出来的镜像也可以有 docker load 还原。</em></p>\n<h5 id=\"37-标记containerd镜像\"><a class=\"anchor\" href=\"#37-标记containerd镜像\">#</a> <strong>3.7 标记 Containerd 镜像</strong></h5>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ctr <span class=\"token parameter variable\">-n</span> k8s.io images tag registry.aliyuncs.com/google_containers/pause-amd64:3.2 pause:3.2</pre></td></tr></table></figure><h5 id=\"38-运行containerd容器\"><a class=\"anchor\" href=\"#38-运行containerd容器\">#</a> <strong>3.8 运行 Containerd 容器</strong></h5>\n<p>在后台运行一个 centos 镜像的容器，名称叫做 centos_k8s</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ctr <span class=\"token parameter variable\">-n</span> k8s.io  run <span class=\"token parameter variable\">-d</span>  docker.io/library/nginx:1.21 web</pre></td></tr></table></figure><h5 id=\"39-查看运行容器的task\"><a class=\"anchor\" href=\"#39-查看运行容器的task\">#</a> <strong>3.9 查看运行容器的 task</strong></h5>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ctr <span class=\"token parameter variable\">-n</span> k8s.io task <span class=\"token function\">ls</span></pre></td></tr></table></figure><h5 id=\"310-启动指定容器task\"><a class=\"anchor\" href=\"#310-启动指定容器task\">#</a> 3.10 启动指定容器 task</h5>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ctr <span class=\"token parameter variable\">-n</span> k8s.io task start <span class=\"token parameter variable\">-d</span> centos_k8s</pre></td></tr></table></figure><h5 id=\"311-进入指定容器task\"><a class=\"anchor\" href=\"#311-进入指定容器task\">#</a> 3.11 进入指定容器 task</h5>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ctr <span class=\"token parameter variable\">-n</span> k8s.io task <span class=\"token builtin class-name\">exec</span> --exec-id <span class=\"token number\">3118</span> <span class=\"token parameter variable\">-t</span> web /bin/bash</pre></td></tr></table></figure><h5 id=\"312-删除指定容器task\"><a class=\"anchor\" href=\"#312-删除指定容器task\">#</a> 3.12 删除指定容器 task</h5>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ctr <span class=\"token parameter variable\">-n</span> k8s.io task <span class=\"token function\">rm</span> <span class=\"token parameter variable\">-f</span> web</pre></td></tr></table></figure><h5 id=\"313-停止指定容器task\"><a class=\"anchor\" href=\"#313-停止指定容器task\">#</a> 3.13 停止指定容器 task</h5>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ctr <span class=\"token parameter variable\">-n</span> k8s.io task <span class=\"token function\">kill</span> <span class=\"token parameter variable\">--signal</span> <span class=\"token number\">9</span> centos_k8s</pre></td></tr></table></figure><h5 id=\"314-查看容器\"><a class=\"anchor\" href=\"#314-查看容器\">#</a> 3.14 查看容器</h5>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ctr <span class=\"token parameter variable\">-n</span> k8s.io c list</pre></td></tr></table></figure><h5 id=\"315-删除容器\"><a class=\"anchor\" href=\"#315-删除容器\">#</a> 3.15 删除容器</h5>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ctr <span class=\"token parameter variable\">-n</span> k8s.io c <span class=\"token function\">rm</span> centos</pre></td></tr></table></figure><p>删除容器以前需要将 task 删除，不然会报以下错误</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@k8s-node02 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># ctr -n k8s.io c rm web </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>ERRO<span class=\"token punctuation\">[</span>0000<span class=\"token punctuation\">]</span> failed to delete container <span class=\"token string\">\"web\"</span>              <span class=\"token assign-left variable\">error</span><span class=\"token operator\">=</span><span class=\"token string\">\"cannot delete a non stopped container: &#123;running 0 0001-01-01 00:00:00 +0000 UTC&#125;\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>ctr: cannot delete a non stopped container: <span class=\"token punctuation\">&#123;</span>running <span class=\"token number\">0</span> 0001-01-01 00:00:00 +0000 UTC<span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"4-docker与containerd常用命令对比\"><a class=\"anchor\" href=\"#4-docker与containerd常用命令对比\">#</a> 4. Docker 与 Containerd 常用命令对比</h4>\n<table>\n<thead>\n<tr>\n<th>说明</th>\n<th>docker 命令</th>\n<th>containerd 命令</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>查看本地镜像</td>\n<td>docker images</td>\n<td>ctr images ls</td>\n</tr>\n<tr>\n<td>拉取镜像</td>\n<td>docker pull imagename</td>\n<td>ctr images pull imagename</td>\n</tr>\n<tr>\n<td>推送镜像</td>\n<td>docker push imagename</td>\n<td>ctr images push imagename</td>\n</tr>\n<tr>\n<td>给镜像打标签</td>\n<td>docker tag imagename tagname</td>\n<td>ctr images tag imagename tagname</td>\n</tr>\n<tr>\n<td>导出镜像</td>\n<td>docker save filename imagename</td>\n<td>ctr images export filename imagename</td>\n</tr>\n<tr>\n<td>导入镜像</td>\n<td>docker load filename</td>\n<td>ctr image import filename</td>\n</tr>\n<tr>\n<td>运行并创建容器</td>\n<td>docker run [options] imagename commond</td>\n<td>ctr run [options]  imagenamecontainername</td>\n</tr>\n<tr>\n<td>进入容器</td>\n<td>docker exec [options] names commond</td>\n<td>ctr task exec [options]  names commond</td>\n</tr>\n<tr>\n<td>查看运行的容器</td>\n<td>docker ps</td>\n<td>ctr task list</td>\n</tr>\n<tr>\n<td>删除容器</td>\n<td>docker rm [options] names</td>\n<td>1.ctr task rm -f names 2. ctr c rm -f names</td>\n</tr>\n</tbody>\n</table>\n",
            "tags": [
                "Docker"
            ]
        },
        {
            "id": "http://ixuyong.cn/posts/3364424907.html",
            "url": "http://ixuyong.cn/posts/3364424907.html",
            "title": "阿里云+Github构建镜像仓库",
            "date_published": "2025-04-26T08:20:14.000Z",
            "content_html": "<h3 id=\"阿里云github构建镜像仓库解决-k8sgcrio访问\"><a class=\"anchor\" href=\"#阿里云github构建镜像仓库解决-k8sgcrio访问\">#</a> 阿里云 + github 构建镜像仓库解决 k8s.gcr.io 访问</h3>\n<p><a href=\"http://xn--k8s-xi9d897o.gcr.io/\">由于 k8s.gcr.io/</a> 镜像仓库位于国外，国内使用 kubeadm 构建 docker 集群时无法访问相应的 docker 镜像。</p>\n<h4 id=\"1-登录github创建仓库\"><a class=\"anchor\" href=\"#1-登录github创建仓库\">#</a> <strong>1.</strong> 登录 Github 创建仓库</h4>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/vgZkKBC.png\" alt=\"1.png\" /></p>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/VnJlhBE.png\" alt=\"2.png\" /></p>\n<h4 id=\"2-创建dockerfile\"><a class=\"anchor\" href=\"#2-创建dockerfile\">#</a> <strong>2.</strong> 创建 Dockerfile</h4>\n<p>仓库下面创建一个 Dockerfile，以 ingress-nginx-controller 为例下的 dockerfile 内容如下：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@manager ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># mkdir ingress-nginx-controller</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span>root@manager ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># cd ingress-nginx-controller/</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">[</span>root@manager ingress-nginx-controller<span class=\"token punctuation\">]</span><span class=\"token comment\"># cat Dockerfile </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>FROM registry.k8s.io/ingress-nginx/controller:v1.12.1</pre></td></tr></table></figure><h4 id=\"3-ssh免密登录github\"><a class=\"anchor\" href=\"#3-ssh免密登录github\">#</a> 3. SSH 免密登录 GitHub</h4>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@manager ingress-nginx-controller<span class=\"token punctuation\">]</span><span class=\"token comment\"># ssh-keygen</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span>root@manager ingress-nginx-controller<span class=\"token punctuation\">]</span><span class=\"token comment\"># cat ~/.ssh/id_rsa.pub</span></pre></td></tr></table></figure><p>进入<em> GitHub</em> 的个人设置，找到【<em>SSH and GPG keys</em>】，然后点击新增 SSH Key，进入如下界面，<em>title</em> 输入你对于当前<em> SSH key</em> 的备注，下面的<em> key</em> 就粘贴上一步生成的<em> id_rsa.pub</em> 内的内容</p>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/3djSHRS.png\" alt=\"3.png\" /></p>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/8gVcVu4.png\" alt=\"5.png\" /></p>\n<h4 id=\"4-推送dockerfile至github\"><a class=\"anchor\" href=\"#4-推送dockerfile至github\">#</a> 4. 推送 Dockerfile 至 Github</h4>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@manager ingress-nginx-controller<span class=\"token punctuation\">]</span><span class=\"token comment\"># yum install git -y</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span>root@manager ingress-nginx-controller<span class=\"token punctuation\">]</span><span class=\"token comment\"># git --version</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">[</span>root@manager ingress-nginx-controller<span class=\"token punctuation\">]</span><span class=\"token comment\"># git config --global user.email \"373370405@qq.com\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">[</span>root@manager ingress-nginx-controller<span class=\"token punctuation\">]</span><span class=\"token comment\"># git config --global color.ui true</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">[</span>root@manager ingress-nginx-controller<span class=\"token punctuation\">]</span><span class=\"token comment\"># git init</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">[</span>root@manager ingress-nginx-controller<span class=\"token punctuation\">]</span><span class=\"token comment\"># git add .</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">[</span>root@manager ingress-nginx-controller<span class=\"token punctuation\">]</span><span class=\"token comment\"># git commit -m \"first commit\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">[</span>root@manager ingress-nginx-controller<span class=\"token punctuation\">]</span><span class=\"token comment\"># git branch -M main</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">[</span>root@manager ingress-nginx-controller<span class=\"token punctuation\">]</span><span class=\"token comment\"># git remote add origin git@github.com:xyapples/ingress-nginx-controller.git   #添加远程仓库</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">[</span>root@manager ingress-nginx-controller<span class=\"token punctuation\">]</span><span class=\"token comment\"># git remote -v</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">[</span>root@manager ingress-nginx-controller<span class=\"token punctuation\">]</span><span class=\"token comment\"># git push -u origin main</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">[</span>root@manager ingress-nginx-controller<span class=\"token punctuation\">]</span><span class=\"token comment\"># git remote remove origin  #移除远程仓库</span></pre></td></tr></table></figure><p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/N3t49eX.png\" alt=\"6.png\" /></p>\n<h4 id=\"5-登录阿里云创建镜像仓库\"><a class=\"anchor\" href=\"#5-登录阿里云创建镜像仓库\">#</a> <strong>5.</strong> 登录阿里云创建镜像仓库</h4>\n<p>登录阿里云镜像：<a href=\"https://cr.console.aliyun.com/%EF%BC%8C%E5%88%9B%E5%BB%BA%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93%EF%BC%9A\">https://cr.console.aliyun.com/，创建镜像仓库：</a></p>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/1zFqa35.png\" alt=\"7.png\" /></p>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/PhzoeeT.png\" alt=\"1.png\" /></p>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/iYAbB0x.png\" alt=\"2.png\" /></p>\n<h4 id=\"6-构建镜像\"><a class=\"anchor\" href=\"#6-构建镜像\">#</a> 6. 构建镜像</h4>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/KD3DI7J.png\" alt=\"3.png\" /></p>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/WiwNBRK.png\" alt=\"4.png\" /></p>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/155pUrE.png\" alt=\"7.png\" /></p>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/155pUrE.png\" alt=\"7.png\" /></p>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/AU1371X.png\" alt=\"8.png\" /></p>\n",
            "tags": [
                "Docker"
            ]
        }
    ]
}