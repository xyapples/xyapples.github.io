<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>LinuxSre云原生 • Posts by &#34;redis&#34; category</title>
        <link>http://ixuyong.cn</link>
        <description>专注于 Linux 运维、云计算、云原⽣等技术</description>
        <language>zh-CN</language>
        <pubDate>Mon, 12 May 2025 21:21:44 +0800</pubDate>
        <lastBuildDate>Mon, 12 May 2025 21:21:44 +0800</lastBuildDate>
        <category>Harbor</category>
        <category>Kubernetes</category>
        <category>Redis</category>
        <category>MySQL</category>
        <category>Windows</category>
        <category>Docker</category>
        <category>rsync</category>
        <item>
            <guid isPermalink="true">http://ixuyong.cn/posts/1490514396.html</guid>
            <title>Redis Cluster集群部署</title>
            <link>http://ixuyong.cn/posts/1490514396.html</link>
            <category>Redis</category>
            <pubDate>Mon, 12 May 2025 21:21:44 +0800</pubDate>
            <description><![CDATA[ &lt;h3 id=&#34;redis-cluster集群部署&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#redis-cluster集群部署&#34;&gt;#&lt;/a&gt; Redis Cluster 集群部署&lt;/h3&gt;
&lt;h4 id=&#34;1-环境配置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-环境配置&#34;&gt;#&lt;/a&gt; 1、环境配置&lt;/h4&gt;
&lt;h5 id=&#34;11-关闭防火墙-selinux&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#11-关闭防火墙-selinux&#34;&gt;#&lt;/a&gt; 1.1 关闭防火墙、Selinux&lt;/h5&gt;
&lt;pre&gt;&lt;code&gt;systemctl disable --now firewalld 
setenforce 0
sed -i &#39;s#SELINUX=enforcing#SELINUX=disabled#g&#39; /etc/sysconfig/selinux
sed -i &#39;s#SELINUX=enforcing#SELINUX=disabled#g&#39; /etc/selinux/config
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;11-配置yum源&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#11-配置yum源&#34;&gt;#&lt;/a&gt; 1.1 配置 yum 源&lt;/h5&gt;
&lt;pre&gt;&lt;code&gt;#rocky linux配置
sed -e &#39;s|^mirrorlist=|#mirrorlist=|g&#39; \
    -e &#39;s|^#baseurl=http://dl.rockylinux.org/$contentdir|baseurl=https://mirrors.aliyun.com/rockylinux|g&#39; \
    -i.bak \
    /etc/yum.repos.d/rocky-*.repo
yum clean all &amp;amp;&amp;amp; yum makecache
mkdir /soft /data /scripts /backup
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;13-配置文件描述符&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#13-配置文件描述符&#34;&gt;#&lt;/a&gt; 1.3 配置文件描述符&lt;/h5&gt;
&lt;pre&gt;&lt;code&gt;ulimit -SHn 65535
vim /etc/security/limits.conf
# 末尾添加如下内容
* soft nofile 65536
* hard nofile 131072
* soft nproc 65535
* hard nproc 655350
* soft memlock unlimited
* hard memlock unlimited
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;14-系统内核参数调优&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#14-系统内核参数调优&#34;&gt;#&lt;/a&gt; 1.4 系统内核参数调优&lt;/h5&gt;
&lt;pre&gt;&lt;code&gt;# 修改/etc/sysctl.conf文件
cat &amp;gt;&amp;gt; /etc/sysctl.conf &amp;lt;&amp;lt;EOF
vm.max_map_count = 262144
vm.swappiness=1

net.ipv4.tcp_fin_timeout=2
net.ipv4.tcp_tw_reuse=1
#net.ipv4.tcp_tw_recycle=1
net.ipv4.tcp_syncookies=1
net.ipv4.tcp_keepalive_time=600
net.ipv4.ip_local_port_range=4000 65000
net.ipv4.tcp_max_syn_backlog=16384
net.ipv4.route.gc_timeout=100
net.ipv4.tcp_max_tw_buckets= 5000

net.ipv4.tcp_syn_retries=1
net.ipv4.tcp_synack_retries=1
net.core.somaxconn=16384
net.core.netdev_max_backlog=16384
net.ipv4.tcp_max_orphans=16384

# 设置最大内存共享段大小bytes
kernel.shmmax=15461882265
kernel.shmall=3774873
# 修改消息队列长度
kernel.msgmax=65535
kernel.msgmnb=65535
EOF
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;15-修改默认限制内存&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#15-修改默认限制内存&#34;&gt;#&lt;/a&gt; 1.5 修改默认限制内存&lt;/h5&gt;
&lt;pre&gt;&lt;code&gt;cat &amp;gt;&amp;gt;/etc/systemd/system.conf&amp;lt;&amp;lt; EOF
DefaultLimitNOFILE=65536
DefaultLimitNPROC=32000
DefaultLimitMEMLOCK=infinity
EOF
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;16-执行命令生效状态&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#16-执行命令生效状态&#34;&gt;#&lt;/a&gt; 1.6 执行命令生效状态&lt;/h5&gt;
&lt;pre&gt;&lt;code&gt;sysctl -p
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;17-安装基础软件包&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#17-安装基础软件包&#34;&gt;#&lt;/a&gt; 1.7 安装基础软件包&lt;/h5&gt;
&lt;pre&gt;&lt;code&gt;yum install wget jq psmisc vim unzip net-tools telnet tree yum-utils device-mapper-persistent-data \
lvm2 git ntpdate nfs-utils iotop httpd-tools dos2unix lrzsz -y
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;18-升级系统&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#18-升级系统&#34;&gt;#&lt;/a&gt; 1.8 升级系统&lt;/h5&gt;
&lt;pre&gt;&lt;code&gt;yum update -y --exclude=kernel* &amp;amp;&amp;amp; reboot
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;2-redis-cluster部署&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-redis-cluster部署&#34;&gt;#&lt;/a&gt; 2、Redis cluster 部署&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;192.168.1.135&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;192.168.1.136&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;192.168.1.137&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;node1：7001&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;node1：7001&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;node1：7001&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;node2：7002&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;node2：7002&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;node2：7002&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;node3：7003&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;node3：7003&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;node3：7003&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h5 id=&#34;21-安装包下载&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#21-安装包下载&#34;&gt;#&lt;/a&gt; 2.1 安装包下载&lt;/h5&gt;
&lt;pre&gt;&lt;code&gt;wget https://download.redis.io/releases/redis-7.2.1.tar.gz
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;22-安装-redis&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#22-安装-redis&#34;&gt;#&lt;/a&gt; 2.2 安装 redis&lt;/h5&gt;
&lt;pre&gt;&lt;code&gt;yum install gcc-c++ -y
mkdir /soft
tar -xzvf redis-7.2.1.tar.gz -C /soft
ln -s /soft/redis-7.2.1 /soft/redis
cd /soft/redis
make
make install prefix=/soft/redis
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;23-生成集群配置文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#23-生成集群配置文件&#34;&gt;#&lt;/a&gt; 2.3 生成集群配置文件&lt;/h5&gt;
&lt;pre&gt;&lt;code&gt;mkdir -p /soft/redis/data/7001
mkdir -p /soft/redis/data/7002
mkdir -p /soft/redis/data/7003
mkdir -p /soft/redis/log
cd /soft/redis
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;redis_7001.conf 配置文件&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cat &amp;gt; /soft/redis/redis_7001.conf &amp;lt;&amp;lt;EOF
protected-mode yes
port 7001
requirepass admin123
masterauth admin123
cluster-enabled yes
cluster-config-file nodes-7001.conf
cluster-node-timeout 5000
maxmemory 2GB
maxmemory-policy volatile-lru
tcp-backlog 511
timeout 0
tcp-keepalive 300
daemonize yes
pidfile /soft/redis/data/redis7001.pid
loglevel notice
logfile &amp;quot;/soft/redis/log/redis7001.log&amp;quot;
#databases 16
always-show-logo no
set-proc-title yes
proc-title-template &amp;quot;&amp;#123;title&amp;#125; &amp;#123;listen-addr&amp;#125; &amp;#123;server-mode&amp;#125;&amp;quot;
locale-collate &amp;quot;&amp;quot;
stop-writes-on-bgsave-error yes
rdbcompression yes
rdbchecksum yes
dbfilename dump.rdb
rdb-del-sync-files no
dir /soft/redis/data/7001
replica-serve-stale-data yes
replica-read-only yes
repl-diskless-sync yes
repl-diskless-sync-delay 5
repl-diskless-sync-max-replicas 0
repl-diskless-load disabled
repl-disable-tcp-nodelay no
replica-priority 100
acllog-max-len 128
lazyfree-lazy-eviction no
lazyfree-lazy-expire no
lazyfree-lazy-server-del no
replica-lazy-flush no
lazyfree-lazy-user-del no
lazyfree-lazy-user-flush no
oom-score-adj no
oom-score-adj-values 0 200 800
disable-thp yes
appendonly no
appendfilename &amp;quot;appendonly.aof&amp;quot;
appenddirname &amp;quot;appendonlydir&amp;quot;
appendfsync everysec
no-appendfsync-on-rewrite no
auto-aof-rewrite-percentage 100
auto-aof-rewrite-min-size 64mb
aof-load-truncated yes
aof-use-rdb-preamble yes
aof-timestamp-enabled no
slowlog-log-slower-than 10000
slowlog-max-len 128
latency-monitor-threshold 0
notify-keyspace-events &amp;quot;&amp;quot;
hash-max-listpack-entries 512
hash-max-listpack-value 64
list-max-listpack-size -2
list-compress-depth 0
set-max-intset-entries 512
set-max-listpack-entries 128
set-max-listpack-value 64
zset-max-listpack-entries 128
zset-max-listpack-value 64
hll-sparse-max-bytes 3000
stream-node-max-bytes 4096
stream-node-max-entries 100
activerehashing yes
client-output-buffer-limit normal 0 0 0
client-output-buffer-limit replica 256mb 64mb 60
client-output-buffer-limit pubsub 32mb 8mb 60
hz 10
dynamic-hz yes
aof-rewrite-incremental-fsync yes
rdb-save-incremental-fsync yes
jemalloc-bg-thread yes
EOF
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;redis_7002.conf 配置文件&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cat &amp;gt; /soft/redis/redis_7002.conf &amp;lt;&amp;lt;EOF
protected-mode yes
port 7002
requirepass admin123
masterauth admin123
cluster-enabled yes
cluster-config-file nodes-7002.conf
cluster-node-timeout 5000
maxmemory 2GB
maxmemory-policy  volatile-lru
tcp-backlog 511
timeout 0
tcp-keepalive 300
daemonize yes
pidfile /soft/redis/data/redis7002.pid
loglevel notice
logfile &amp;quot;/soft/redis/log/redis7002.log&amp;quot;
#databases 16
always-show-logo no
set-proc-title yes
proc-title-template &amp;quot;&amp;#123;title&amp;#125; &amp;#123;listen-addr&amp;#125; &amp;#123;server-mode&amp;#125;&amp;quot;
locale-collate &amp;quot;&amp;quot;
stop-writes-on-bgsave-error yes
rdbcompression yes
rdbchecksum yes
dbfilename dump.rdb
rdb-del-sync-files no
dir /soft/redis/data/7002
replica-serve-stale-data yes
replica-read-only yes
repl-diskless-sync yes
repl-diskless-sync-delay 5
repl-diskless-sync-max-replicas 0
repl-diskless-load disabled
repl-disable-tcp-nodelay no
replica-priority 100
acllog-max-len 128
lazyfree-lazy-eviction no
lazyfree-lazy-expire no
lazyfree-lazy-server-del no
replica-lazy-flush no
lazyfree-lazy-user-del no
lazyfree-lazy-user-flush no
oom-score-adj no
oom-score-adj-values 0 200 800
disable-thp yes
appendonly no
appendfilename &amp;quot;appendonly.aof&amp;quot;
appenddirname &amp;quot;appendonlydir&amp;quot;
appendfsync everysec
no-appendfsync-on-rewrite no
auto-aof-rewrite-percentage 100
auto-aof-rewrite-min-size 64mb
aof-load-truncated yes
aof-use-rdb-preamble yes
aof-timestamp-enabled no
slowlog-log-slower-than 10000
slowlog-max-len 128
latency-monitor-threshold 0
notify-keyspace-events &amp;quot;&amp;quot;
hash-max-listpack-entries 512
hash-max-listpack-value 64
list-max-listpack-size -2
list-compress-depth 0
set-max-intset-entries 512
set-max-listpack-entries 128
set-max-listpack-value 64
zset-max-listpack-entries 128
zset-max-listpack-value 64
hll-sparse-max-bytes 3000
stream-node-max-bytes 4096
stream-node-max-entries 100
activerehashing yes
client-output-buffer-limit normal 0 0 0
client-output-buffer-limit replica 256mb 64mb 60
client-output-buffer-limit pubsub 32mb 8mb 60
hz 10
dynamic-hz yes
aof-rewrite-incremental-fsync yes
rdb-save-incremental-fsync yes
jemalloc-bg-thread yes
EOF
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;redis_7003.conf 配置文件&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cat &amp;gt; /soft/redis/redis_7003.conf &amp;lt;&amp;lt;EOF
protected-mode yes
port 7003
requirepass admin123
masterauth admin123
cluster-enabled yes
cluster-config-file nodes-7003.conf
cluster-node-timeout 5000
maxmemory 2GB
maxmemory-policy  volatile-lru
tcp-backlog 511
timeout 0
tcp-keepalive 300
daemonize yes
pidfile /soft/redis/data/redis7003.pid
loglevel notice
logfile &amp;quot;/soft/redis/log/redis7003.log&amp;quot;
#databases 16
always-show-logo no
set-proc-title yes
proc-title-template &amp;quot;&amp;#123;title&amp;#125; &amp;#123;listen-addr&amp;#125; &amp;#123;server-mode&amp;#125;&amp;quot;
locale-collate &amp;quot;&amp;quot;
stop-writes-on-bgsave-error yes
rdbcompression yes
rdbchecksum yes
dbfilename dump.rdb
rdb-del-sync-files no
dir /soft/redis/data/7003
replica-serve-stale-data yes
replica-read-only yes
repl-diskless-sync yes
repl-diskless-sync-delay 5
repl-diskless-sync-max-replicas 0
repl-diskless-load disabled
repl-disable-tcp-nodelay no
replica-priority 100
acllog-max-len 128
lazyfree-lazy-eviction no
lazyfree-lazy-expire no
lazyfree-lazy-server-del no
replica-lazy-flush no
lazyfree-lazy-user-del no
lazyfree-lazy-user-flush no
oom-score-adj no
oom-score-adj-values 0 200 800
disable-thp yes
appendonly no
appendfilename &amp;quot;appendonly.aof&amp;quot;
appenddirname &amp;quot;appendonlydir&amp;quot;
appendfsync everysec
no-appendfsync-on-rewrite no
auto-aof-rewrite-percentage 100
auto-aof-rewrite-min-size 64mb
aof-load-truncated yes
aof-use-rdb-preamble yes
aof-timestamp-enabled no
slowlog-log-slower-than 10000
slowlog-max-len 128
latency-monitor-threshold 0
notify-keyspace-events &amp;quot;&amp;quot;
hash-max-listpack-entries 512
hash-max-listpack-value 64
list-max-listpack-size -2
list-compress-depth 0
set-max-intset-entries 512
set-max-listpack-entries 128
set-max-listpack-value 64
zset-max-listpack-entries 128
zset-max-listpack-value 64
hll-sparse-max-bytes 3000
stream-node-max-bytes 4096
stream-node-max-entries 100
activerehashing yes
client-output-buffer-limit normal 0 0 0
client-output-buffer-limit replica 256mb 64mb 60
client-output-buffer-limit pubsub 32mb 8mb 60
hz 10
dynamic-hz yes
aof-rewrite-incremental-fsync yes
rdb-save-incremental-fsync yes
jemalloc-bg-thread yes
EOF
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;24-redis开机自启&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#24-redis开机自启&#34;&gt;#&lt;/a&gt; 2.4 Redis 开机自启&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;redis_7001.service&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cat &amp;lt;&amp;lt; &amp;quot;EOF&amp;quot; &amp;gt; /usr/lib/systemd/system/redis_7001.service
[Unit]
Description=Redis 7001 service
Documentation=https://redis.io/documentation
Wants=network-online.target
After=network-online.target
[Service]
Type=forking
LimitNOFILE=10032
User=root
Group=root
ExecStart=/soft/redis/src/redis-server /soft/redis/redis_7001.conf
PrivateTmp=true
[Install]
WantedBy=multi-user.target
EOF
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;redis_7002.service&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cat &amp;lt;&amp;lt; &amp;quot;EOF&amp;quot; &amp;gt; /usr/lib/systemd/system/redis_7002.service
[Unit]
Description=Redis 7002 service
Documentation=https://redis.io/documentation
Wants=network-online.target
After=network-online.target
[Service]
Type=forking
LimitNOFILE=10032
User=root
Group=root
ExecStart=/soft/redis/src/redis-server /soft/redis/redis_7002.conf
PrivateTmp=true
[Install]
WantedBy=multi-user.target
EOF
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;redis_7003.service&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cat &amp;lt;&amp;lt; &amp;quot;EOF&amp;quot; &amp;gt; /usr/lib/systemd/system/redis_7003.service
[Unit]
Description=Redis 7003 service
Documentation=https://redis.io/documentation
Wants=network-online.target
After=network-online.target
[Service]
Type=forking
LimitNOFILE=10032
User=root
Group=root
ExecStart=/soft/redis/src/redis-server /soft/redis/redis_7003.conf
PrivateTmp=true
[Install]
WantedBy=multi-user.target
EOF
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;设置开机自启&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;chown -R root.root /soft/redis
systemctl daemon-reload
systemctl enable redis_7001.service
systemctl enable redis_7002.service
systemctl enable redis_7003.service
systemctl start redis_7001.service
systemctl start redis_7002.service
systemctl start redis_7003.service
systemctl status redis_7001.service
systemctl status redis_7002.service
systemctl status redis_7003.service
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;25-启动redis集群服务&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#25-启动redis集群服务&#34;&gt;#&lt;/a&gt; 2.5 启动 redis 集群服务&lt;/h5&gt;
&lt;p&gt;--cluster-replicas 2 表示为集群中的每个主节点创建 2 个从节点&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd /soft/redis/src
./redis-cli --cluster create \  
192.168.1.135:7001 192.168.1.135:7002 192.168.1.135:7003 \  
192.168.1.136:7001 192.168.1.136:7002 192.168.1.136:7003 \ 
192.168.1.137:7001 192.168.1.137:7002 192.168.1.137:7003 \ 
--cluster-replicas 2 -a admin123 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输入创建集群的命令后会出现以下提示，注意 Can I set the above configuration? (type &#39;yes&#39; to accept): yes，该处请输入 yes&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@qnyp_node01 src]# ./redis-cli --cluster create \
&amp;gt; 192.168.1.135:7001 192.168.1.135:7002 192.168.1.135:7003 \
&amp;gt; 192.168.1.136:7001 192.168.1.136:7002 192.168.1.136:7003 \
&amp;gt; 192.168.1.137:7001 192.168.1.137:7002 192.168.1.137:7003 \
&amp;gt; --cluster-replicas 2 -a admin123
Warning: Using a password with &#39;-a&#39; or &#39;-u&#39; option on the command line interface may not be safe.
&amp;gt;&amp;gt;&amp;gt; Performing hash slots allocation on 9 nodes...
Master[0] -&amp;gt; Slots 0 - 5460
Master[1] -&amp;gt; Slots 5461 - 10922
Master[2] -&amp;gt; Slots 10923 - 16383
Adding replica 192.168.1.136:7002 to 192.168.1.135:7001
Adding replica 192.168.1.137:7002 to 192.168.1.135:7001
Adding replica 192.168.1.135:7003 to 192.168.1.136:7001
Adding replica 192.168.1.137:7003 to 192.168.1.136:7001
Adding replica 192.168.1.136:7003 to 192.168.1.137:7001
Adding replica 192.168.1.135:7002 to 192.168.1.137:7001
M: 928637d72deb6a2e7935f8a7bb5ebd9455cf64a7 192.168.1.135:7001
   slots:[0-5460] (5461 slots) master
S: 4508bee0c33784e0d5be25b64e4c7e677cd9d396 192.168.1.135:7002
   replicates f9133541e2175958117753ef4e206ea43a21f07c
S: a0e13083fcc1d6e96398f3bb2ea5581b7a64e05e 192.168.1.135:7003
   replicates 06ea827f8d328d9d776c9643109317b0100727a6
M: 06ea827f8d328d9d776c9643109317b0100727a6 192.168.1.136:7001
   slots:[5461-10922] (5462 slots) master
S: 1d1b9817e39ee8987a3518f62a9b91c3ab666eff 192.168.1.136:7002
   replicates 928637d72deb6a2e7935f8a7bb5ebd9455cf64a7
S: a73c099dcc63f5d46a11d0f61c91270ef61290ff 192.168.1.136:7003
   replicates f9133541e2175958117753ef4e206ea43a21f07c
M: f9133541e2175958117753ef4e206ea43a21f07c 192.168.1.137:7001
   slots:[10923-16383] (5461 slots) master
S: 626dc659bb1059ec40039869241f7de88a49cd87 192.168.1.137:7002
   replicates 928637d72deb6a2e7935f8a7bb5ebd9455cf64a7
S: 622f73cd06c5658f8d02056925ac708750f12c1a 192.168.1.137:7003
   replicates 06ea827f8d328d9d776c9643109317b0100727a6
Can I set the above configuration? (type &#39;yes&#39; to accept):
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输完 yes 后，会出现如下提示，[OK] All 16384 slots covered. 说明成功啦&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Can I set the above configuration? (type &#39;yes&#39; to accept): yes
&amp;gt;&amp;gt;&amp;gt; Nodes configuration updated
&amp;gt;&amp;gt;&amp;gt; Assign a different config epoch to each node
&amp;gt;&amp;gt;&amp;gt; Sending CLUSTER MEET messages to join the cluster
Waiting for the cluster to join
..
&amp;gt;&amp;gt;&amp;gt; Performing Cluster Check (using node 192.168.1.135:7001)
M: 928637d72deb6a2e7935f8a7bb5ebd9455cf64a7 192.168.1.135:7001
   slots:[0-5460] (5461 slots) master
   2 additional replica(s)
M: 06ea827f8d328d9d776c9643109317b0100727a6 192.168.1.136:7001
   slots:[5461-10922] (5462 slots) master
   2 additional replica(s)
S: 622f73cd06c5658f8d02056925ac708750f12c1a 192.168.1.137:7003
   slots: (0 slots) slave
   replicates 06ea827f8d328d9d776c9643109317b0100727a6
S: 1d1b9817e39ee8987a3518f62a9b91c3ab666eff 192.168.1.136:7002
   slots: (0 slots) slave
   replicates 928637d72deb6a2e7935f8a7bb5ebd9455cf64a7
S: a73c099dcc63f5d46a11d0f61c91270ef61290ff 192.168.1.136:7003
   slots: (0 slots) slave
   replicates f9133541e2175958117753ef4e206ea43a21f07c
S: a0e13083fcc1d6e96398f3bb2ea5581b7a64e05e 192.168.1.135:7003
   slots: (0 slots) slave
   replicates 06ea827f8d328d9d776c9643109317b0100727a6
M: f9133541e2175958117753ef4e206ea43a21f07c 192.168.1.137:7001
   slots:[10923-16383] (5461 slots) master
   2 additional replica(s)
S: 626dc659bb1059ec40039869241f7de88a49cd87 192.168.1.137:7002
   slots: (0 slots) slave
   replicates 928637d72deb6a2e7935f8a7bb5ebd9455cf64a7
S: 4508bee0c33784e0d5be25b64e4c7e677cd9d396 192.168.1.135:7002
   slots: (0 slots) slave
   replicates f9133541e2175958117753ef4e206ea43a21f07c
[OK] All nodes agree about slots configuration.
&amp;gt;&amp;gt;&amp;gt; Check for open slots...
&amp;gt;&amp;gt;&amp;gt; Check slots coverage...
[OK] All 16384 slots covered.
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;26-访问reids集群并验证&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#26-访问reids集群并验证&#34;&gt;#&lt;/a&gt; 2.6 访问 reids 集群并验证&lt;/h5&gt;
&lt;pre&gt;&lt;code&gt;cd /data/redis/src
./redis-cli -h 192.168.1.135 -p 7001 -c -a admin123
#列出当前节点的信息：cluster info
Warning: Using a password with &#39;-a&#39; or &#39;-u&#39; option on the command line interface may not be safe.
192.168.1.135:7001&amp;gt; cluster info
cluster_state:ok
cluster_slots_assigned:16384
cluster_slots_ok:16384
cluster_slots_pfail:0
cluster_slots_fail:0
cluster_known_nodes:9
cluster_size:3
cluster_current_epoch:9
cluster_my_epoch:1
cluster_stats_messages_ping_sent:344
cluster_stats_messages_pong_sent:354
cluster_stats_messages_sent:698
cluster_stats_messages_ping_received:346
cluster_stats_messages_pong_received:344
cluster_stats_messages_meet_received:8
cluster_stats_messages_received:698
total_cluster_links_buffer_limit_exceeded:0
列出集群的节点的信息：cluster nodes
192.168.1.135:7001&amp;gt; cluster nodes
06ea827f8d328d9d776c9643109317b0100727a6 192.168.1.136:7001@17001 master - 0 1747034145581 4 connected 5461-10922
622f73cd06c5658f8d02056925ac708750f12c1a 192.168.1.137:7003@17003 slave 06ea827f8d328d9d776c9643109317b0100727a6 0 1747034145581 4 connected
1d1b9817e39ee8987a3518f62a9b91c3ab666eff 192.168.1.136:7002@17002 slave 928637d72deb6a2e7935f8a7bb5ebd9455cf64a7 0 1747034145581 1 connected
a73c099dcc63f5d46a11d0f61c91270ef61290ff 192.168.1.136:7003@17003 slave f9133541e2175958117753ef4e206ea43a21f07c 0 1747034145581 7 connected
a0e13083fcc1d6e96398f3bb2ea5581b7a64e05e 192.168.1.135:7003@17003 slave 06ea827f8d328d9d776c9643109317b0100727a6 0 1747034144077 4 connected
f9133541e2175958117753ef4e206ea43a21f07c 192.168.1.137:7001@17001 master - 0 1747034145079 7 connected 10923-16383
626dc659bb1059ec40039869241f7de88a49cd87 192.168.1.137:7002@17002 slave 928637d72deb6a2e7935f8a7bb5ebd9455cf64a7 0 1747034144000 1 connected
928637d72deb6a2e7935f8a7bb5ebd9455cf64a7 192.168.1.135:7001@17001 myself,master - 0 1747034144000 1 connected 0-5460
4508bee0c33784e0d5be25b64e4c7e677cd9d396 192.168.1.135:7002@17002 slave f9133541e2175958117753ef4e206ea43a21f07c 0 1747034144578 7 connected
&lt;/code&gt;&lt;/pre&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://ixuyong.cn/posts/1414180692.html</guid>
            <title>Redis集群（主从+哨兵）模式</title>
            <link>http://ixuyong.cn/posts/1414180692.html</link>
            <category>Redis</category>
            <pubDate>Wed, 09 Apr 2025 19:50:06 +0800</pubDate>
            <description><![CDATA[ &lt;h3 id=&#34;redis集群主从哨兵模式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#redis集群主从哨兵模式&#34;&gt;#&lt;/a&gt; Redis 集群（主从 + 哨兵）模式&lt;/h3&gt;
&lt;h3 id=&#34;一-什么是redis主从复制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#一-什么是redis主从复制&#34;&gt;#&lt;/a&gt; 一、什么是 redis 主从复制？&lt;/h3&gt;
&lt;p&gt;主从复制，是指将一台 Redis 服务器的数据，复制到其他的 Redis 服务器。前者称为主节点 (master)，后者称为从节点 (slave), 数据的复制是单向的，只能由主节点到从节点。master 以写为主，slave 以读为主。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://imgse.com/i/pEgTlKx&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://s21.ax1x.com/2025/04/09/pEgTlKx.png&#34; alt=&#34;pEgTlKx.png&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;二-主从复制的作用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#二-主从复制的作用&#34;&gt;#&lt;/a&gt; 二、主从复制的作用&lt;/h3&gt;
&lt;p&gt;数据冗余：主从复制实现了数据的热备份，是持久化之外的一种数据冗余方式。&lt;br /&gt;
故障恢复：当主节点出现问题时，可以由从节点提供服务，实现快速的故障恢复；实际上是一种服务的冗余。&lt;br /&gt;
负载均衡：在主从复制的基础上，配合读写分离，可以由主节点提供写服务，由从节点提供读服务（即写 Redis 数据时应用连接主节点，读 Redis 数据时应用连接从节点），分担服务器负载；尤其是在写少读多的场景下，通过多个从节点分担读负载，可以大大提高 Redis 服务器的并发量。&lt;br /&gt;
读写分离：用于实现读写分离，主库写、从库读，读写分离不仅可以提高服务器的负载能力，同时可根据需求的变化，改变从库的数量；&lt;br /&gt;
高可用基石：除了上述作用以外，主从复制还是哨兵和集群能够实施的基础，因此说主从复制是 Redis 高可用的基础。&lt;/p&gt;
&lt;h3 id=&#34;三-实现主从复制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#三-实现主从复制&#34;&gt;#&lt;/a&gt; 三、实现主从复制&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;主机名&lt;/th&gt;
&lt;th&gt;IP&lt;/th&gt;
&lt;th&gt;角色&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;redis01&lt;/td&gt;
&lt;td&gt;192.168.40.101&lt;/td&gt;
&lt;td&gt;master&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;redis02&lt;/td&gt;
&lt;td&gt;192.168.40.102&lt;/td&gt;
&lt;td&gt;slave&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;redis03&lt;/td&gt;
&lt;td&gt;192.168.40.103&lt;/td&gt;
&lt;td&gt;slave&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;31-关闭防火墙-selinux&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#31-关闭防火墙-selinux&#34;&gt;#&lt;/a&gt; 3.1 关闭防火墙、selinux&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;[root@master01 ~]# hostnamectl set-hostname redis01
[root@redis01 ~]# systemctl stop firewalld
[root@redis01 ~]# systemctl disable firewalld
[root@redis01 ~]# sed -i &#39;s/^SELINUX=enforcing/SELINUX=disabled/g&#39; /etc/sysconfig/selinux
[root@redis01 ~]# sed -i &#39;s/^SELINUX=enforcing/SELINUX=disabled/g&#39; /etc/selinux/config
[root@redis01 ~]# yum install net-tools vim tree lrzsz wget unzip dos2unix bash-completion  lsof ntp ntpdate git -y
[root@redis01 ~]# yum update -y --exclude=kernel* &amp;amp;&amp;amp; reboot
[root@redis01 ~]# echo &#39;Asia/Shanghai&#39; &amp;gt;/etc/timezone
[root@redis01 ~]# ntpdate time2.aliyun.com
[root@redis01 ~]# crontab -e
*/5 * * * * /usr/sbin/ntpdate time2.aliyun.com &amp;amp;&amp;gt; /dev/null
[root@redis01 ~]# mkdir /soft /data /scripts /backup
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;32-安装redis&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#32-安装redis&#34;&gt;#&lt;/a&gt; 3.2 安装 redis&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;[root@redis01 ~]# yum install gcc-c++ -y
[root@redis01 soft]# wget https://download.redis.io/releases/redis-6.2.11.tar.gz
[root@redis01 soft]# tar xf redis-6.2.11.tar.gz 
[root@redis01 soft]# ln -s /soft/redis-6.2.11 /soft/redis
[root@redis01 soft]# cd /soft/redis
[root@redis01 redis]# make            #执行make编译
[root@redis01 redis]# make install    #将 src下的许多可执行文件复制到/usr/local/bin 目录下
[root@redis01 redis]# redis-server /soft/redis/redis.conf &amp;amp;
[root@redis01 redis]# netstat -lntp|grep redis
tcp        0      0 127.0.0.1:6379          0.0.0.0:*               LISTEN      69686/redis-server  
tcp6       0      0 ::1:6379                :::*                    LISTEN      69686/redis-server     
[root@redis01 redis]# redis-cli shutdown      #关闭Redis服务
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;33-redis配置文件说明&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#33-redis配置文件说明&#34;&gt;#&lt;/a&gt; 3.3 redis 配置文件说明&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;[root@db01 redis]# vim redis.conf 
bind 127.0.0.1      		# 绑定的ip
protected-mode yes  		# 保护模式
port 6379           		# 端口设置
daemonize yes               # 后台启动
bind 127.0.0.1      		# 绑定的ip
protected-mode yes  		# 保护模式
port 6379           		# 端口设置
loglevel notice     		# 记录日志级别
logfile &amp;quot;redis.log&amp;quot;         # 日志的文件位置名
dir ./               		# 日志存储目录
databases 16        		# 数据库的数量，默认是 16 个数据库
always-show-logo yes 		# 是否总是显示LOGO

# 如果900s内，如果至少有一个1 key进行了修改，我们及进行持久化操作
save 900 1
# 如果300s内，如果至少10 key进行了修改，我们及进行持久化操作
save 300 10
# 如果60s内，如果至少10000 key进行了修改，我们及进行持久化操作
save 60 10000
# 我们之后学习持久化，会自己定义这个测试！
stop-writes-on-bgsave-error yes   # 持久化如果出错，是否还需要继续工作！
rdbcompression yes                # 是否压缩 rdb 文件，需要消耗一些cpu资源！
rdbchecksum yes                   # 保存rdb文件的时候，进行错误的检查校验！
dbfilename dump.rdb               # rdb 文件保存的名称！
dir ./                            # rdb 文件保存的目录！

slaveof 192.168.1.154 6379        # 配置主从复制
requirepass foobared              # 配置redis登录密码

appendonly no    # 默认是不开启aof模式的，默认是使用rdb方式持久化的，在大部分所有的情况下，rdb完全够用！
appendfilename &amp;quot;appendonly.aof&amp;quot;   # 持久化的文件的名字
# appendfsync always        # 每次修改都会 sync。消耗性能
appendfsync everysec        # 每秒执行一次 sync，可能会丢失这1s的数据！
# appendfsync no            # 不执行 sync，这个时候操作系统自己同步数据，速度最快！
no-appendfsync-on-rewrite   #重写时是否可以运用appendsync，默认no，可以保证数据的安全性
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;34-redis环境配置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#34-redis环境配置&#34;&gt;#&lt;/a&gt; 3.4 redis 环境配置&lt;/h4&gt;
&lt;p&gt;#修改 maser 配置文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;vim redis.conf
bind 192.168.40.101 #绑定本机ip地址
port 6739          #绑定端口号
daemonize yes      #用来指定redis是否要用守护进程的方式启动，默认为no
pidfile /var/run/redis_6379.pid
logfile &amp;quot;redis.log&amp;quot;   #redis日志文件
requirepass Superman*2023  #本地redis密码
masterauth Superman*2023   #主节点redis密码 注意:从节点也要配置，后边哨兵容灾切换用到
protected-mode yes    #保护模式
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;#修改 slave01 配置文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;vim redis.conf
bind 192.168.40.102 #绑定本机ip地址
port 6739          #绑定端口号
daemonize yes      #用来指定redis是否要用守护进程的方式启动，默认为no
pidfile /var/run/redis_6379.pid
logfile &amp;quot;redis.log&amp;quot;   #redis日志文件
replicaof  192.168.40.101 6379 #配置文件中设置主节点，redis主从复制这个地方只配置从库，注意:主库不需要这个配置
requirepass Superman*2023  #本地redis密码
masterauth Superman*2023   #主节点redis密码 注意:从节点也要配置，后边哨兵容灾切换用到
protected-mode yes    #保护模式
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;#修改 slave02 配置文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;vim redis.conf
bind 192.168.40.103 #绑定本机ip地址
port 6739          #绑定端口号
daemonize yes      #用来指定redis是否要用守护进程的方式启动，默认为no
pidfile /var/run/redis_6379.pid
logfile &amp;quot;redis.log&amp;quot;   #redis日志文件
replicaof  192.168.40.101 6379 #配置文件中设置主节点，redis主从复制这个地方只配置从库，注意:主库不需要这个配置
requirepass Superman*2023  #本地redis密码
masterauth Superman*2023   #主节点redis密码 注意:从节点也要配置，后边哨兵容灾切换用到
protected-mode yes    #保护模式
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;35-启动3台redis服务&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#35-启动3台redis服务&#34;&gt;#&lt;/a&gt; 3.5 启动 3 台 redis 服务&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;#启动redis01
[root@redis01 redis]# redis-server /soft/redis/redis.conf
[root@redis0[root@redis01 redis]# redis-server /soft/redis/redis.conf redis]# netstat -lntp|grep redis
tcp        0      0 192.168.40.101:6379     0.0.0.0:*               LISTEN      117358/redis-server 

#启动redis02
[root@redis02 redis]# redis-server /soft/redis/redis.conf
[root@redis02 redis]# netstat -lntp|grep redis
tcp        0      0 192.168.40.102:6379     0.0.0.0:*               LISTEN      18210/redis-server

启动redis03
[root@redis03 redis]# redis-server /soft/redis/redis.conf
[root@redis03 redis]# netstat -lntp|grep redis
tcp        0      0 192.168.40.103:6379     0.0.0.0:*               LISTEN      19186/redis-server 
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;36-查看主从状态&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#36-查看主从状态&#34;&gt;#&lt;/a&gt; 3.6 查看主从状态&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;#主节点
[root@redis01 redis]# redis-cli -p 6379 -h 192.168.40.101 -a Superman*2023
192.168.40.101:6379&amp;gt; info replication
# Replication
role:master
connected_slaves:2
slave0:ip=192.168.40.102,port=6379,state=online,offset=616,lag=0
slave1:ip=192.168.40.103,port=6379,state=online,offset=616,lag=0
master_failover_state:no-failover
master_replid:93df7cd5095dcccdbf8266787031b17cf638a2ad
master_replid2:0000000000000000000000000000000000000000
master_repl_offset:616
second_repl_offset:-1
repl_backlog_active:1
repl_backlog_size:1048576
repl_backlog_first_byte_offset:1
repl_backlog_histlen:616

#从节点
[root@redis01 redis]# redis-cli -p 6379 -h 192.168.40.103 -a Superman*2023
Warning: Using a password with &#39;-a&#39; or &#39;-u&#39; option on the command line interface may not be safe.
192.168.40.103:6379&amp;gt; info replication
# Replication
role:slave
master_host:192.168.40.101
master_port:6379
master_link_status:up
master_last_io_seconds_ago:1
master_sync_in_progress:0
slave_read_repl_offset:812
slave_repl_offset:812
slave_priority:100
slave_read_only:1
replica_announced:1
connected_slaves:0
master_failover_state:no-failover
master_replid:93df7cd5095dcccdbf8266787031b17cf638a2ad
master_replid2:0000000000000000000000000000000000000000
master_repl_offset:812
second_repl_offset:-1
repl_backlog_active:1
repl_backlog_size:1048576
repl_backlog_first_byte_offset:295
repl_backlog_histlen:518
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;37-测试主从&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#37-测试主从&#34;&gt;#&lt;/a&gt; 3.7 测试主从&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;[root@redis01 redis]# redis-cli -p 6379 -h 192.168.40.101 -a Superman*2023
Warning: Using a password with &#39;-a&#39; or &#39;-u&#39; option on the command line interface may not be safe.
192.168.40.101:6379&amp;gt; set k1 v1
OK
192.168.40.101:6379&amp;gt; set k2 v2
OK

[root@redis03 redis]# redis-cli -p 6379 -h 192.168.40.103 -a Superman*2023
Warning: Using a password with &#39;-a&#39; or &#39;-u&#39; option on the command line interface may not be safe.
192.168.40.103:6379&amp;gt; get k1
&amp;quot;v1&amp;quot;
192.168.40.103:6379&amp;gt; get k2
&amp;quot;v2&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;注意:&lt;/strong&gt;&lt;br /&gt;
1、主机可以写，从机不能写，只能读。主机中的所有数据都会保存到从机中去。&lt;br /&gt;
2、主机断开连接，从机依旧连接到主机的，但是没有写操作，这个时候，主机如果回来了，从机依旧可以直接获取到主机写的信息！&lt;br /&gt;
3、如果是使用命令行，来配置的主从，这个时候如果重启了，就会变回主机！只要变为从机，立马就会从主机中获取值！&lt;br /&gt;
4、主从复制原理&lt;br /&gt;
 Slave 启动成功连接到 master 后会发送一个 sync 同步命令&lt;br /&gt;
 Master 接到命令，启动后台的存盘进程，同时收集所有接收到的用于修改数据集命令，在后台进程执行完毕之后，master 将传送整个数据文件到 slave，并完成一次完全同步。&lt;br /&gt;
全量复制：slave 服务在接收到数据库文件数据后，将其存盘并加载到内存中。&lt;br /&gt;
增量复制：Master 继续将新的所有收集到的修改命令依次传给 slave，完成同步，但是只要是重新连接 master，一次完全同步（全量复制）将被自动执行！ 主机的数据一定可以在从机中看到。&lt;/p&gt;
&lt;h3 id=&#34;四-哨兵模式搭建&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#四-哨兵模式搭建&#34;&gt;#&lt;/a&gt; 四、哨兵模式搭建&lt;/h3&gt;
&lt;p&gt;1、什么是 redis 哨兵？&lt;br /&gt;
RedisSentinel 是 Redis 的高可用性解决方案，由一个或多个 Sentinel（哨兵）实例组成。它可以监视任意多个主服务器，以及这些主服务器属下的所有从服务器，并在被监视的主服务器进入下线状态时，自动将下线主服务器属下的某个从服务器升级为新的主服务器，它的主要功能如下：&lt;br /&gt;
监控 (Monitoring)：Sentinel 会不断地检查你的主服务器和从服务器是否运作正常。&lt;br /&gt;
通知 (Notification)：当被监控的某个 Redis 服务器出现问题时，Sentinel 可以通过 API 向管理员或者其他应用程序发送通知。&lt;br /&gt;
故障迁移：当主服务器不能正常工作时，Sentinel 会自动进行故障迁移，也就是主从切换。&lt;br /&gt;
统一的配置：管理连接者询问 sentinel 取得主从的地址。&lt;/p&gt;
&lt;p&gt;2、哨兵原理是什么？&lt;br /&gt;
Sentinel 使用的算法核心是 Raft 算法，主要用途就是用于分布式系统，系统容错，以及 Leader 选举，每个 Sentinel 都需要定期的执行以下任务：&lt;br /&gt;
每个 Sentinel 会自动发现其他 Sentinel 和从服务器，它以每秒钟一次的频率向它所知的主服务器、从服务器以及其他 Sentinel 实例发送一个 PING 命令。&lt;br /&gt;
如果一个实例（instance）距离最后一次有效回复 PING 命令的时间超过 down-after-milliseconds 选项所指定的值， 那么这个实例会被 Sentinel 标记为主观下线。 有效回复可以是： +PONG 、 -LOADING 或者 -MASTERDOWN 。&lt;br /&gt;
如果一个主服务器被标记为主观下线， 那么正在监视这个主服务器的所有 Sentinel 要以每秒一次的频率确认主服务器的确进入了主观下线状态。&lt;br /&gt;
如果一个主服务器被标记为主观下线， 并且有足够数量的 Sentinel（至少要达到配置文件指定的数量）在指定的时间范围内同意这一判断，那么这个主服务器被标记为客观下线。&lt;br /&gt;
在一般情况下， 每个 Sentinel 会以每 10 秒一次的频率向它已知的所有主服务器和从服务器发送 INFO 命令。当一个主服务器 Sentinel 标记为客观下线时，Sentinel 向下线主服务器的所有从服务器发送 INFO 命令的频率会从 10 秒一次改为每秒一次。&lt;br /&gt;
当没有足够数量的 Sentinel 同意主服务器已经下线， 主服务器的客观下线状态就会被移除。 当主服务器重新向 Sentinel 的 PING 命令返回有效回复时， 主服务器的主管下线状态就会被移除。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://imgse.com/i/pEgT1r6&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://s21.ax1x.com/2025/04/09/pEgT1r6.png&#34; alt=&#34;pEgT1r6.png&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;41-搭建哨兵&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#41-搭建哨兵&#34;&gt;#&lt;/a&gt; 4.1 搭建哨兵&lt;/h4&gt;
&lt;p&gt;&lt;em&gt;在每台服务器上部署一个哨兵，配置方式如下:&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@redis01 redis]# vim sentinel.conf
#端口默认为26379。
port 26379
#关闭保护模式，可以外部访问。
protected-mode no
#设置为后台启动。
daemonize yes
#日志文件。
logfile &amp;quot;/soft/redis/sentinel.log&amp;quot;
#指定服务器IP地址和端口，并且指定当有2台哨兵认为主机挂了，则对主机进行容灾切换。注意:三台哨兵这里的ip配置均为主节点ip 和端口
sentinel monitor mymaster 192.168.40.101 6379 2
#当在Redis实例中开启了requirepass，这里就需要提供密码。
sentinel auth-pass mymaster psw66
#这里设置了主机多少秒无响应，则认为挂了。
sentinel down-after-milliseconds mymaster 3000
#主备切换时，最多有多少个slave同时对新的master进行同步，这里设置为默认的
snetinel parallel-syncs mymaster 1
#故障转移的超时时间，这里设置为三分钟。
sentinel failover-timeout mymaster 180000
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;42-启动三台服务器上的哨兵&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#42-启动三台服务器上的哨兵&#34;&gt;#&lt;/a&gt; 4.2 启动三台服务器上的哨兵&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;#启动redis01的sentine
[root@redis01 redis]# redis-sentinel /soft/redis/sentinel.conf
[root@redis01 redis]#  netstat -lntp|grep redis
tcp        0      0 0.0.0.0:26379           0.0.0.0:*               LISTEN      33536/redis-sentine 
tcp        0      0 192.168.40.101:6379     0.0.0.0:*               LISTEN      117358/redis-server 
tcp6       0      0 :::26379                :::*                    LISTEN      33536/redis-sentine

#启动redis02的sentine
[root@redis02 redis]# redis-sentinel /soft/redis/sentinel.conf
[root@redis02 redis]#  netstat -lntp|grep redis
tcp        0      0 0.0.0.0:26379           0.0.0.0:*               LISTEN      18757/redis-sentine 
tcp        0      0 192.168.40.102:6379     0.0.0.0:*               LISTEN      18210/redis-server  
tcp6       0      0 :::26379                :::*                    LISTEN      18757/redis-sentine

#启动redis03的sentine
[root@redis03 redis]# redis-sentinel /soft/redis/sentinel.conf                     
[root@redis03 redis]# netstat -lntp|grep redis
tcp        0      0 0.0.0.0:26379           0.0.0.0:*               LISTEN      19745/redis-sentine 
tcp        0      0 192.168.40.103:6379     0.0.0.0:*               LISTEN      19186/redis-server  
tcp6       0      0 :::26379                :::*                    LISTEN      19745/redis-sentine
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;43-连接客户端&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#43-连接客户端&#34;&gt;#&lt;/a&gt; 4.3 连接客户端&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;[root@redis01 redis]# redis-cli -p 26379
127.0.0.1:26379&amp;gt;  info sentinel
# Sentinel
sentinel_masters:1
sentinel_tilt:0
sentinel_running_scripts:0
sentinel_scripts_queue_length:0
sentinel_simulate_failure_flags:0
master0:name=mymaster,status=ok,address=192.168.40.101:6379,slaves=2,sentinels=3
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;44-redis容灾切换&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#44-redis容灾切换&#34;&gt;#&lt;/a&gt; 4.4 redis 容灾切换&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;#连接redis客户端
[root@redis01 redis]# redis-cli -p 6379 -h 192.168.40.101 
#验证密码
192.168.40.101:6379&amp;gt; auth Superman*2023
OK
#关闭redis服务
192.168.40.101:6379&amp;gt; shutdown
not connected&amp;gt;
#退出客户端
not connected&amp;gt; exit
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;关闭主节点之后，我们去查看哨兵日志:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@redis01 ~]# tail -f /soft/redis/sentinel.log 
91936:X 14 Apr 2023 23:26:23.838 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo
91936:X 14 Apr 2023 23:26:23.838 # Redis version=6.2.11, bits=64, commit=00000000, modified=0, pid=91936, just started
91936:X 14 Apr 2023 23:26:23.838 # Configuration loaded
91936:X 14 Apr 2023 23:26:23.838 * monotonic clock: POSIX clock_gettime
91936:X 14 Apr 2023 23:26:23.839 * Running mode=sentinel, port=26379.
91936:X 14 Apr 2023 23:26:23.839 # Sentinel ID is 835b4c8544fb250af5fd479f834ee369cc4f388e
91936:X 14 Apr 2023 23:26:23.839 # +monitor master mymaster 192.168.40.101 6379 quorum 2



91936:X 14 Apr 2023 23:31:25.329 # +sdown master mymaster 192.168.40.101 6379   #这里应该是发现主节点宕机
91936:X 14 Apr 2023 23:31:25.359 # +new-epoch 5
91936:X 14 Apr 2023 23:31:25.360 # +vote-for-leader ab43979285cb47b1b459aeb0ab91b63fa9d1a989 5
91936:X 14 Apr 2023 23:31:25.401 # +odown master mymaster 192.168.40.101 6379 #quorum 3/2 两个哨兵都觉得主节点宕机了
91936:X 14 Apr 2023 23:31:25.401 # Next failover delay: I will not start a failover before Fri Apr 14 23:37:25 2023
91936:X 14 Apr 2023 23:31:26.468 # +config-update-from sentinel ab43979285cb47b1b459aeb0ab91b63fa9d1a989 192.168.40.102 26379 @ mymaster 192.168.40.101 6379
91936:X 14 Apr 2023 23:31:26.468 # +switch-master mymaster 192.168.40.101 6379 192.168.40.103 6379 #通过投票选举40.103为新的主节点
91936:X 14 Apr 2023 23:31:26.468 * +slave slave 192.168.40.102:6379 192.168.40.102 6379 @ mymaster 192.168.40.103 6379
91936:X 14 Apr 2023 23:31:26.469 * +slave slave 192.168.40.101:6379 192.168.40.101 6379 @ mymaster 192.168.40.103 6379
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;下面我们去 40.103 下查看哨兵主从切换是否成功&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@redis03 redis]# redis-cli -p 6379 -h 192.168.40.103
192.168.40.103:6379&amp;gt; auth Superman*2023
OK
192.168.40.103:6379&amp;gt; info replication
# Replication
role:master   # 40.103变成主节点了
connected_slaves:1   # 下面的从机个数为1
slave0:ip=192.168.40.102,port=6379,state=online,offset=108708,lag=1
master_failover_state:no-failover
master_replid:cf36f762dcae0c07b54f7287dc19d7ecc0d50dd3
master_replid2:a7de32d10b2d31f8886c84ca91dc7f055439c935
master_repl_offset:108851
second_repl_offset:59887
repl_backlog_active:1
repl_backlog_size:1048576
repl_backlog_first_byte_offset:1
repl_backlog_histlen:108851
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;重新连接挂掉的主节点&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@redis01 redis]# redis-server redis.conf 
[root@redis01 redis]#  redis-cli -p 6379 -h 192.168.40.101
192.168.40.101:6379&amp;gt; auth Superman*2023
OK
192.168.40.101:6379&amp;gt; info replication
# Replication
role:slave          #主节点连接回来之后自动变成了从节点，并且成功连上了主机
master_host:192.168.40.103
master_port:6379
master_link_status:up
master_last_io_seconds_ago:1
master_sync_in_progress:0
slave_read_repl_offset:130607
slave_repl_offset:130607
slave_priority:100
slave_read_only:1
replica_announced:1
connected_slaves:0
master_failover_state:no-failover
master_replid:cf36f762dcae0c07b54f7287dc19d7ecc0d50dd3
master_replid2:0000000000000000000000000000000000000000
master_repl_offset:130607
second_repl_offset:-1
repl_backlog_active:1
repl_backlog_size:1048576
repl_backlog_first_byte_offset:126982
repl_backlog_histlen:3626
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;再去主节点确认一下&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;192.168.40.103:6379&amp;gt; info replication
# Replication
role:master
connected_slaves:2   #两个从节点
slave0:ip=192.168.40.102,port=6379,state=online,offset=147879,lag=1
slave1:ip=192.168.40.101,port=6379,state=online,offset=147879,lag=1
master_failover_state:no-failover
master_replid:cf36f762dcae0c07b54f7287dc19d7ecc0d50dd3
master_replid2:a7de32d10b2d31f8886c84ca91dc7f055439c935
master_repl_offset:148165
second_repl_offset:59887
repl_backlog_active:1
repl_backlog_size:1048576
repl_backlog_first_byte_offset:1
repl_backlog_histlen:148165
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;五、哨兵模式的优缺点&lt;br /&gt;
 1. 优点&lt;/p&gt;
&lt;p&gt;哨兵集群，基于主从复制模式，所有的主从配置优点，它全有&lt;/p&gt;
&lt;p&gt;主从可以切换，故障可以转移，系统的可用性就会更好&lt;/p&gt;
&lt;p&gt;哨兵模式就是主从模式的升级，手动到自动，更加健壮！&lt;/p&gt;
&lt;p&gt;2. 缺点&lt;/p&gt;
&lt;p&gt;Redis 不好在线扩容，集群容量一旦到达上限，在线扩容就十分麻烦&lt;/p&gt;
&lt;p&gt;哨兵模式的配置繁琐&lt;/p&gt;
&lt;p&gt;3. 哨兵模式的配置文件详解&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Example sentinel.conf
# 哨兵sentinel实例运行的端口 默认26379
port 26379
 
# 哨兵sentinel的工作目录
dir /tmp
 
# 哨兵sentinel监控的redis主节点的 ip port
# master-name 可以自己命名的主节点名字 只能由字母A-z、数字0-9 、这三个字符&amp;quot;.-_&amp;quot;组成。
# quorum 配置多少个sentinel哨兵统一认为master主节点失联 那么这时客观上认为主节点失联了
# sentinel monitor &amp;lt;master-name&amp;gt; &amp;lt;ip&amp;gt; &amp;lt;redis-port&amp;gt; &amp;lt;quorum&amp;gt;
sentinel monitor mymaster 127.0.0.1 6379 2
  
# 当在Redis实例中开启了requirepass foobared 授权密码这样所有连接Redis实例的客户端都要提供 密码
# 设置哨兵sentinel 连接主从的密码 注意必须为主从设置一样的验证密码
# sentinel auth-pass &amp;lt;master-name&amp;gt; &amp;lt;password&amp;gt;
sentinel auth-pass mymaster MySUPER--secret-0123passw0rd
 
# 指定多少毫秒之后 主节点没有应答哨兵sentinel 此时哨兵主观上认为主节点下线 默认30秒
# sentinel down-after-milliseconds &amp;lt;master-name&amp;gt; &amp;lt;milliseconds&amp;gt;
sentinel down-after-milliseconds mymaster 30000
 
# 这个配置项指定了在发生failover主备切换时最多可以有多少个slave同时对新的master进行同步，这个数字越小，完成failover所需的时间就越长， 但是如果这个数字越大，就意味着越 多的slave因为replication而不可用。 可以通过将这个值设为 1 来保证每次只有一个slave 处于不能处理命令请求的状态。
# sentinel parallel-syncs &amp;lt;master-name&amp;gt; &amp;lt;numslaves&amp;gt;
sentinel parallel-syncs mymaster 1
 
# 故障转移的超时时间 failover-timeout 可以用在以下这些方面：
#1. 同一个sentinel对同一个master两次failover之间的间隔时间。
#2. 当一个slave从一个错误的master那里同步数据开始计算时间。直到slave被纠正为向正确的master那 里同步数据时。
#3.当想要取消一个正在进行的failover所需要的时间。
#4.当进行failover时，配置所有slaves指向新的master所需的最大时间。不过，即使过了这个超时， slaves依然会被正确配置为指向master，但是就不按parallel-syncs所配置的规则来了 # 默认三分钟
# sentinel failover-timeout &amp;lt;master-name&amp;gt; &amp;lt;milliseconds&amp;gt; bilibili：
sentinel failover-timeout mymaster 180000
 
# SCRIPTS EXECUTION
#配置当某一事件发生时所需要执行的脚本，可以通过脚本来通知管理员，例如当系统运行不正常时发邮件通知 相关人员。
#对于脚本的运行结果有以下规则：
#若脚本执行后返回1，那么该脚本稍后将会被再次执行，重复次数目前默认为10
#若脚本执行后返回2，或者比2更高的一个返回值，脚本将不会重复执行。
#如果脚本在执行过程中由于收到系统中断信号被终止了，则同返回值为1时的行为相同。
#一个脚本的最大执行时间为60s，如果超过这个时间，脚本将会被一个SIGKILL信号终止，之后重新执行。
#通知型脚本:当sentinel有任何警告级别的事件发生时（比如说redis实例的主观失效和客观失效等等）， 将会去调用这个脚本，这时这个脚本应该通过邮件，SMS等方式去通知系统管理员关于系统不正常运行的信 息。调用该脚本时，将传给脚本两个参数，一个是事件的类型，一个是事件的描述。如果sentinel.conf配 置文件中配置了这个脚本路径，那么必须保证这个脚本存在于这个路径，并且是可执行的，否则sentinel无 法正常启动成功。
#通知脚本
# shell编程
# sentinel notification-script &amp;lt;master-name&amp;gt; &amp;lt;script-path&amp;gt; sentinel
notification-script mymaster /var/redis/notify.sh
 
# 客户端重新配置主节点参数脚本
# 当一个master由于failover而发生改变时，这个脚本将会被调用，通知相关的客户端关于master地址已 经发生改变的信息。
# 以下参数将会在调用脚本时传给脚本:
# &amp;lt;master-name&amp;gt; &amp;lt;role&amp;gt; &amp;lt;state&amp;gt; &amp;lt;from-ip&amp;gt; &amp;lt;from-port&amp;gt; &amp;lt;to-ip&amp;gt; &amp;lt;to-port&amp;gt; # 目前&amp;lt;state&amp;gt;总是“failover”,
# &amp;lt;role&amp;gt;是“leader”或者“observer”中的一个。
# 参数 from-ip, from-port, to-ip, to-port是用来和旧的master和新的master(即旧的slave)通 信的# 这个脚本应该是通用的，能被多次调用，不是针对性的。
# sentinel client-reconfig-script &amp;lt;master-name&amp;gt; &amp;lt;script-path&amp;gt; sentinel client-reconfig-
script mymaster /var/redis/reconfig.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;再去看一下 redis 的配置文件和哨兵的配置文件，你会惊讶的发现，里边的配置文件已经被改过来了。&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cat redis.con
...
replicaof 192.168.40.103 6379
&lt;/code&gt;&lt;/pre&gt;
 ]]></description>
        </item>
    </channel>
</rss>
