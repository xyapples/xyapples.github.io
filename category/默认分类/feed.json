{
    "version": "https://jsonfeed.org/version/1",
    "title": "LinuxSre云原生 • All posts by \"默认分类\" category",
    "description": "专注于 Linux 运维、云计算、云原⽣等技术",
    "home_page_url": "http://ixuyong.cn",
    "items": [
        {
            "id": "http://ixuyong.cn/posts/170573601.html",
            "url": "http://ixuyong.cn/posts/170573601.html",
            "title": "K8s服务发布Ingress",
            "date_published": "2025-04-26T08:52:06.000Z",
            "content_html": "<h4 id=\"1-ingress-nginx-controller-安装\"><a class=\"anchor\" href=\"#1-ingress-nginx-controller-安装\">#</a> 1. Ingress Nginx Controller 安装</h4>\n<table>\n<thead>\n<tr>\n<th>Supported</th>\n<th>Ingress-NGINX version</th>\n<th>k8s supported version</th>\n<th>Alpine Version</th>\n<th>Nginx Version</th>\n<th>Helm Chart Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>🔄</td>\n<td><strong>v1.12.1</strong></td>\n<td>1.32, 1.31, 1.30, 1.29, 1.28</td>\n<td>3.21.3</td>\n<td>1.25.5</td>\n<td>4.12.1</td>\n</tr>\n<tr>\n<td>🔄</td>\n<td><strong>v1.12.0</strong></td>\n<td>1.32, 1.31, 1.30, 1.29, 1.28</td>\n<td>3.21.0</td>\n<td>1.25.5</td>\n<td>4.12.0</td>\n</tr>\n<tr>\n<td>🔄</td>\n<td><strong>v1.12.0-beta.0</strong></td>\n<td>1.32, 1.31, 1.30, 1.29, 1.28</td>\n<td>3.20.3</td>\n<td>1.25.5</td>\n<td>4.12.0-beta.0</td>\n</tr>\n<tr>\n<td>🔄</td>\n<td><strong>v1.11.5</strong></td>\n<td>1.30, 1.29, 1.28, 1.27, 1.26</td>\n<td>3.21.3</td>\n<td>1.25.5</td>\n<td>4.11.5</td>\n</tr>\n<tr>\n<td>🔄</td>\n<td><strong>v1.11.4</strong></td>\n<td>1.30, 1.29, 1.28, 1.27, 1.26</td>\n<td>3.21.0</td>\n<td>1.25.5</td>\n<td>4.11.4</td>\n</tr>\n<tr>\n<td>🔄</td>\n<td><strong>v1.11.3</strong></td>\n<td>1.30, 1.29, 1.28, 1.27, 1.26</td>\n<td>3.20.3</td>\n<td>1.25.5</td>\n<td>4.11.3</td>\n</tr>\n<tr>\n<td>🔄</td>\n<td><strong>v1.11.2</strong></td>\n<td>1.30, 1.29, 1.28, 1.27, 1.26</td>\n<td>3.20.0</td>\n<td>1.25.5</td>\n<td>4.11.2</td>\n</tr>\n<tr>\n<td>🔄</td>\n<td><strong>v1.11.1</strong></td>\n<td>1.30, 1.29, 1.28, 1.27, 1.26</td>\n<td>3.20.0</td>\n<td>1.25.5</td>\n<td>4.11.1</td>\n</tr>\n<tr>\n<td>🔄</td>\n<td><strong>v1.11.0</strong></td>\n<td>1.30, 1.29, 1.28, 1.27, 1.26</td>\n<td>3.20.0</td>\n<td>1.25.5</td>\n<td>4.11.0</td>\n</tr>\n<tr>\n<td></td>\n<td><strong>v1.10.6</strong></td>\n<td>1.30, 1.29, 1.28, 1.27, 1.26</td>\n<td>3.21.0</td>\n<td>1.25.5</td>\n<td>4.10.6</td>\n</tr>\n<tr>\n<td></td>\n<td><strong>v1.10.5</strong></td>\n<td>1.30, 1.29, 1.28, 1.27, 1.26</td>\n<td>3.20.3</td>\n<td>1.25.5</td>\n<td>4.10.5</td>\n</tr>\n<tr>\n<td></td>\n<td><strong>v1.10.4</strong></td>\n<td>1.30, 1.29, 1.28, 1.27, 1.26</td>\n<td>3.20.0</td>\n<td>1.25.5</td>\n<td>4.10.4</td>\n</tr>\n<tr>\n<td></td>\n<td><strong>v1.10.3</strong></td>\n<td>1.30, 1.29, 1.28, 1.27, 1.26</td>\n<td>3.20.0</td>\n<td>1.25.5</td>\n<td>4.10.3</td>\n</tr>\n<tr>\n<td></td>\n<td><strong>v1.10.2</strong></td>\n<td>1.30, 1.29, 1.28, 1.27, 1.26</td>\n<td>3.20.0</td>\n<td>1.25.5</td>\n<td>4.10.2</td>\n</tr>\n<tr>\n<td></td>\n<td><strong>v1.10.1</strong></td>\n<td>1.30, 1.29, 1.28, 1.27, 1.26</td>\n<td>3.19.1</td>\n<td>1.25.3</td>\n<td>4.10.1</td>\n</tr>\n<tr>\n<td></td>\n<td><strong>v1.10.0</strong></td>\n<td>1.29, 1.28, 1.27, 1.26</td>\n<td>3.19.1</td>\n<td>1.25.3</td>\n<td>4.10.0</td>\n</tr>\n<tr>\n<td></td>\n<td>v1.9.6</td>\n<td>1.29, 1.28, 1.27, 1.26, 1.25</td>\n<td>3.19.0</td>\n<td>1.21.6</td>\n<td>4.9.1</td>\n</tr>\n<tr>\n<td></td>\n<td>v1.9.5</td>\n<td>1.28, 1.27, 1.26, 1.25</td>\n<td>3.18.4</td>\n<td>1.21.6</td>\n<td>4.9.0</td>\n</tr>\n<tr>\n<td></td>\n<td>v1.9.4</td>\n<td>1.28, 1.27, 1.26, 1.25</td>\n<td>3.18.4</td>\n<td>1.21.6</td>\n<td>4.8.3</td>\n</tr>\n<tr>\n<td></td>\n<td>v1.9.3</td>\n<td>1.28, 1.27, 1.26, 1.25</td>\n<td>3.18.4</td>\n<td>1.21.6</td>\n<td>4.8.*</td>\n</tr>\n<tr>\n<td></td>\n<td>v1.9.1</td>\n<td>1.28, 1.27, 1.26, 1.25</td>\n<td>3.18.4</td>\n<td>1.21.6</td>\n<td>4.8.*</td>\n</tr>\n<tr>\n<td></td>\n<td>v1.9.0</td>\n<td>1.28, 1.27, 1.26, 1.25</td>\n<td>3.18.2</td>\n<td>1.21.6</td>\n<td>4.8.*</td>\n</tr>\n<tr>\n<td></td>\n<td>v1.8.4</td>\n<td>1.27, 1.26, 1.25, 1.24</td>\n<td>3.18.2</td>\n<td>1.21.6</td>\n<td>4.7.*</td>\n</tr>\n<tr>\n<td></td>\n<td>v1.7.1</td>\n<td>1.27, 1.26, 1.25, 1.24</td>\n<td>3.17.2</td>\n<td>1.21.6</td>\n<td>4.6.*</td>\n</tr>\n<tr>\n<td></td>\n<td>v1.6.4</td>\n<td>1.26, 1.25, 1.24, 1.23</td>\n<td>3.17.0</td>\n<td>1.21.6</td>\n<td>4.5.*</td>\n</tr>\n<tr>\n<td></td>\n<td>v1.5.1</td>\n<td>1.25, 1.24, 1.23</td>\n<td>3.16.2</td>\n<td>1.21.6</td>\n<td>4.4.*</td>\n</tr>\n<tr>\n<td></td>\n<td>v1.4.0</td>\n<td>1.25, 1.24, 1.23, 1.22</td>\n<td>3.16.2</td>\n<td>1.19.10†</td>\n<td>4.3.0</td>\n</tr>\n<tr>\n<td></td>\n<td>v1.3.1</td>\n<td>1.24, 1.23, 1.22, 1.21, 1.20</td>\n<td>3.16.2</td>\n<td>1.19.10†</td>\n<td>4.2.5</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"11-helm安装ingress-nginx-controller\"><a class=\"anchor\" href=\"#11-helm安装ingress-nginx-controller\">#</a> 1.1 Helm 安装 Ingress Nginx Controller</h5>\n<ol>\n<li>安装 Helm</li>\n</ol>\n<pre><code># wget https://get.helm.sh/helm-v3.6.3-linux-amd64.tar.gz\n# tar xf helm-v3.6.3-linux-amd64.tar.gz\n# mv linux-amd64/helm /usr/local/bin/helm\n# helm version\n</code></pre>\n<ol start=\"2\">\n<li>下载 Ingress Nginx Controller 安装包</li>\n</ol>\n<pre><code>官方文档：https://github.com/kubernetes/ingress-nginx/tree/helm-chart-4.8.2         #根据自己k8s版本下载\n# helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx\n# helm repo update\n# helm repo list\n# helm pull ingress-nginx/ingress-nginx --version 4.8.2\n</code></pre>\n<ol start=\"3\">\n<li>配置 Ingress Nginx Controller</li>\n</ol>\n<pre><code># tar xf ingress-nginx-4.8.2.tgz\n# cd ingress-nginx\n# vim values.yaml\n...\n 16 controller:\n 17   name: controller\n 18   enableAnnotationValidations: false\n 19   image:\n 20     ## Keep false as default for now!\n 21     chroot: false\n 22     registry: registry.cn-hangzhou.aliyuncs.com\n 23     image: kubernetes_public/ingress-nginx-controller\n 24     ## for backwards compatibility consider setting the full image url via the repository value below\n 25     ## use *either* current default registry/image or repository format or installing chart by providing the values.yaml wil    l fail\n 26     ## repository:\n 27     tag: &quot;v1.9.3&quot;\n 28     #digest: sha256:8fd21d59428507671ce0fb47f818b1d859c92d2ad07bb7c947268d433030ba98\n...\n 42   # -- Will add custom configuration options to Nginx https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configurat    ion/configmap/\n 43   config:\n 44     allow-snippet-annotations: true          #开启server snippet的配置\n...\n 67   dnsPolicy: ClusterFirstWithHostNet\n...\n 88   hostNetwork: true\n...\n107   ingressClassResource:\n108     # -- Name of the ingressClass\n109     name: nginx\n110     # -- Is this ingressClass enabled or not\n111     enabled: true\n112     # -- Is this the default ingressClass for the cluster\n113     default: true\n...\n184   kind: DaemonSet\n...\n287   nodeSelector:\n288     kubernetes.io/os: linux\n289     ingress: &quot;true&quot;\n...\n638       image:\n639         registry: registry.cn-hangzhou.aliyuncs.com\n640         image: kubernetes_public/kube-webhook-certgen\n641         ## for backwards compatibility consider setting the full image url via the repository value below\n642         ## use *either* current default registry/image or repository format or installing chart by providing the values.yaml     will fail\n643         ## repository:\n644         tag: v20231011-8b53cabe0\n645         #digest: sha256:a7943503b45d552785aa3b5e457f169a5661fb94d82b8a3373bcd9ebaf9aac80\n...\n</code></pre>\n<p>4. 给需要部署 ingress 的节点上打标签</p>\n<pre><code># kubectl label node k8s-node02 ingress=true\n# kubectl label node k8s-node01 ingress=true\n# kubectl create ns ingress-nginx\n# helm install ingress-nginx -n ingress-nginx .     #安装\n# helm upgrade ingress-nginx -n ingress-nginx .     #更新\n# kubectl get pods -n ingress-nginx \nNAME                             READY   STATUS    RESTARTS   AGE\ningress-nginx-controller-7nfqn   1/1     Running   0          27s\ningress-nginx-controller-k4p2n   1/1     Running   0          17m\ningress-nginx-controller-kw5jk   1/1     Running   0          24s\n</code></pre>\n<h5 id=\"12-bare-metal安装ingress-nginx-controller\"><a class=\"anchor\" href=\"#12-bare-metal安装ingress-nginx-controller\">#</a> 1.2 Bare metal 安装 Ingress Nginx Controller</h5>\n<ol>\n<li>下载 Ingress 部署文件，链接地址：<a href=\"https://kubernetes.github.io/ingress-nginx/deploy/#bare-metal-clusters\">https://kubernetes.github.io/ingress-nginx/deploy/#bare-metal-clusters</a></li>\n</ol>\n<pre><code>[root@k8s-master01 ~]# wget https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.12.1/deploy/static/provider/baremetal/deploy.yaml\n</code></pre>\n<ol start=\"2\">\n<li>配置 Ingress</li>\n</ol>\n<pre><code>[root@k8s-master01 ingress-master]# cat deploy.yaml \napiVersion: v1\nkind: Namespace\nmetadata:\n  labels:\n    app.kubernetes.io/instance: ingress-nginx\n    app.kubernetes.io/name: ingress-nginx\n  name: ingress-nginx\n---\napiVersion: v1\nautomountServiceAccountToken: true\nkind: ServiceAccount\nmetadata:\n  labels:\n    app.kubernetes.io/component: controller\n    app.kubernetes.io/instance: ingress-nginx\n    app.kubernetes.io/name: ingress-nginx\n    app.kubernetes.io/part-of: ingress-nginx\n    app.kubernetes.io/version: 1.12.1\n  name: ingress-nginx\n  namespace: ingress-nginx\n---\napiVersion: v1\nautomountServiceAccountToken: true\nkind: ServiceAccount\nmetadata:\n  labels:\n    app.kubernetes.io/component: admission-webhook\n    app.kubernetes.io/instance: ingress-nginx\n    app.kubernetes.io/name: ingress-nginx\n    app.kubernetes.io/part-of: ingress-nginx\n    app.kubernetes.io/version: 1.12.1\n  name: ingress-nginx-admission\n  namespace: ingress-nginx\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\n  labels:\n    app.kubernetes.io/component: controller\n    app.kubernetes.io/instance: ingress-nginx\n    app.kubernetes.io/name: ingress-nginx\n    app.kubernetes.io/part-of: ingress-nginx\n    app.kubernetes.io/version: 1.12.1\n  name: ingress-nginx\n  namespace: ingress-nginx\nrules:\n- apiGroups:\n  - &quot;&quot;\n  resources:\n  - namespaces\n  verbs:\n  - get\n- apiGroups:\n  - &quot;&quot;\n  resources:\n  - configmaps\n  - pods\n  - secrets\n  - endpoints\n  verbs:\n  - get\n  - list\n  - watch\n- apiGroups:\n  - &quot;&quot;\n  resources:\n  - services\n  verbs:\n  - get\n  - list\n  - watch\n- apiGroups:\n  - networking.k8s.io\n  resources:\n  - ingresses\n  verbs:\n  - get\n  - list\n  - watch\n- apiGroups:\n  - networking.k8s.io\n  resources:\n  - ingresses/status\n  verbs:\n  - update\n- apiGroups:\n  - networking.k8s.io\n  resources:\n  - ingressclasses\n  verbs:\n  - get\n  - list\n  - watch\n- apiGroups:\n  - coordination.k8s.io\n  resourceNames:\n  - ingress-nginx-leader\n  resources:\n  - leases\n  verbs:\n  - get\n  - update\n- apiGroups:\n  - coordination.k8s.io\n  resources:\n  - leases\n  verbs:\n  - create\n- apiGroups:\n  - &quot;&quot;\n  resources:\n  - events\n  verbs:\n  - create\n  - patch\n- apiGroups:\n  - discovery.k8s.io\n  resources:\n  - endpointslices\n  verbs:\n  - list\n  - watch\n  - get\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\n  labels:\n    app.kubernetes.io/component: admission-webhook\n    app.kubernetes.io/instance: ingress-nginx\n    app.kubernetes.io/name: ingress-nginx\n    app.kubernetes.io/part-of: ingress-nginx\n    app.kubernetes.io/version: 1.12.1\n  name: ingress-nginx-admission\n  namespace: ingress-nginx\nrules:\n- apiGroups:\n  - &quot;&quot;\n  resources:\n  - secrets\n  verbs:\n  - get\n  - create\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  labels:\n    app.kubernetes.io/instance: ingress-nginx\n    app.kubernetes.io/name: ingress-nginx\n    app.kubernetes.io/part-of: ingress-nginx\n    app.kubernetes.io/version: 1.12.1\n  name: ingress-nginx\nrules:\n- apiGroups:\n  - &quot;&quot;\n  resources:\n  - configmaps\n  - endpoints\n  - nodes\n  - pods\n  - secrets\n  - namespaces\n  verbs:\n  - list\n  - watch\n- apiGroups:\n  - coordination.k8s.io\n  resources:\n  - leases\n  verbs:\n  - list\n  - watch\n- apiGroups:\n  - &quot;&quot;\n  resources:\n  - nodes\n  verbs:\n  - get\n- apiGroups:\n  - &quot;&quot;\n  resources:\n  - services\n  verbs:\n  - get\n  - list\n  - watch\n- apiGroups:\n  - networking.k8s.io\n  resources:\n  - ingresses\n  verbs:\n  - get\n  - list\n  - watch\n- apiGroups:\n  - &quot;&quot;\n  resources:\n  - events\n  verbs:\n  - create\n  - patch\n- apiGroups:\n  - networking.k8s.io\n  resources:\n  - ingresses/status\n  verbs:\n  - update\n- apiGroups:\n  - networking.k8s.io\n  resources:\n  - ingressclasses\n  verbs:\n  - get\n  - list\n  - watch\n- apiGroups:\n  - discovery.k8s.io\n  resources:\n  - endpointslices\n  verbs:\n  - list\n  - watch\n  - get\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  labels:\n    app.kubernetes.io/component: admission-webhook\n    app.kubernetes.io/instance: ingress-nginx\n    app.kubernetes.io/name: ingress-nginx\n    app.kubernetes.io/part-of: ingress-nginx\n    app.kubernetes.io/version: 1.12.1\n  name: ingress-nginx-admission\nrules:\n- apiGroups:\n  - admissionregistration.k8s.io\n  resources:\n  - validatingwebhookconfigurations\n  verbs:\n  - get\n  - update\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  labels:\n    app.kubernetes.io/component: controller\n    app.kubernetes.io/instance: ingress-nginx\n    app.kubernetes.io/name: ingress-nginx\n    app.kubernetes.io/part-of: ingress-nginx\n    app.kubernetes.io/version: 1.12.1\n  name: ingress-nginx\n  namespace: ingress-nginx\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: Role\n  name: ingress-nginx\nsubjects:\n- kind: ServiceAccount\n  name: ingress-nginx\n  namespace: ingress-nginx\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  labels:\n    app.kubernetes.io/component: admission-webhook\n    app.kubernetes.io/instance: ingress-nginx\n    app.kubernetes.io/name: ingress-nginx\n    app.kubernetes.io/part-of: ingress-nginx\n    app.kubernetes.io/version: 1.12.1\n  name: ingress-nginx-admission\n  namespace: ingress-nginx\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: Role\n  name: ingress-nginx-admission\nsubjects:\n- kind: ServiceAccount\n  name: ingress-nginx-admission\n  namespace: ingress-nginx\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  labels:\n    app.kubernetes.io/instance: ingress-nginx\n    app.kubernetes.io/name: ingress-nginx\n    app.kubernetes.io/part-of: ingress-nginx\n    app.kubernetes.io/version: 1.12.1\n  name: ingress-nginx\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: ingress-nginx\nsubjects:\n- kind: ServiceAccount\n  name: ingress-nginx\n  namespace: ingress-nginx\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  labels:\n    app.kubernetes.io/component: admission-webhook\n    app.kubernetes.io/instance: ingress-nginx\n    app.kubernetes.io/name: ingress-nginx\n    app.kubernetes.io/part-of: ingress-nginx\n    app.kubernetes.io/version: 1.12.1\n  name: ingress-nginx-admission\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: ingress-nginx-admission\nsubjects:\n- kind: ServiceAccount\n  name: ingress-nginx-admission\n  namespace: ingress-nginx\n---\napiVersion: v1\ndata: null\nkind: ConfigMap\nmetadata:\n  labels:\n    app.kubernetes.io/component: controller\n    app.kubernetes.io/instance: ingress-nginx\n    app.kubernetes.io/name: ingress-nginx\n    app.kubernetes.io/part-of: ingress-nginx\n    app.kubernetes.io/version: 1.12.1\n  name: ingress-nginx-controller\n  namespace: ingress-nginx\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app.kubernetes.io/component: controller\n    app.kubernetes.io/instance: ingress-nginx\n    app.kubernetes.io/name: ingress-nginx\n    app.kubernetes.io/part-of: ingress-nginx\n    app.kubernetes.io/version: 1.12.1\n  name: ingress-nginx-controller\n  namespace: ingress-nginx\nspec:\n  ipFamilies:\n  - IPv4\n  ipFamilyPolicy: SingleStack\n  ports:\n  - appProtocol: http\n    name: http\n    port: 80\n    protocol: TCP\n    targetPort: http\n  - appProtocol: https\n    name: https\n    port: 443\n    protocol: TCP\n    targetPort: https\n  selector:\n    app.kubernetes.io/component: controller\n    app.kubernetes.io/instance: ingress-nginx\n    app.kubernetes.io/name: ingress-nginx\n  #type: NodePort\n  type: ClusterIP\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app.kubernetes.io/component: controller\n    app.kubernetes.io/instance: ingress-nginx\n    app.kubernetes.io/name: ingress-nginx\n    app.kubernetes.io/part-of: ingress-nginx\n    app.kubernetes.io/version: 1.12.1\n  name: ingress-nginx-controller-admission\n  namespace: ingress-nginx\nspec:\n  ports:\n  - appProtocol: https\n    name: https-webhook\n    port: 443\n    targetPort: webhook\n  selector:\n    app.kubernetes.io/component: controller\n    app.kubernetes.io/instance: ingress-nginx\n    app.kubernetes.io/name: ingress-nginx\n  type: ClusterIP\n---\napiVersion: apps/v1\n#kind: Deployment\nkind: DaemonSet\nmetadata:\n  labels:\n    app.kubernetes.io/component: controller\n    app.kubernetes.io/instance: ingress-nginx\n    app.kubernetes.io/name: ingress-nginx\n    app.kubernetes.io/part-of: ingress-nginx\n    app.kubernetes.io/version: 1.12.1\n  name: ingress-nginx-controller\n  namespace: ingress-nginx\nspec:\n  minReadySeconds: 0\n  revisionHistoryLimit: 10\n  selector:\n    matchLabels:\n      app.kubernetes.io/component: controller\n      app.kubernetes.io/instance: ingress-nginx\n      app.kubernetes.io/name: ingress-nginx\n  template:\n    metadata:\n      labels:\n        app.kubernetes.io/component: controller\n        app.kubernetes.io/instance: ingress-nginx\n        app.kubernetes.io/name: ingress-nginx\n        app.kubernetes.io/part-of: ingress-nginx\n        app.kubernetes.io/version: 1.12.1\n    spec:\n      containers:\n      - args:\n        - /nginx-ingress-controller\n        - --election-id=ingress-nginx-leader\n        - --controller-class=k8s.io/ingress-nginx\n        - --ingress-class=nginx\n        - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller\n        - --validating-webhook=:8443\n        - --validating-webhook-certificate=/usr/local/certificates/cert\n        - --validating-webhook-key=/usr/local/certificates/key\n        env:\n        - name: POD_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.name\n        - name: POD_NAMESPACE\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.namespace\n        - name: LD_PRELOAD\n          value: /usr/local/lib/libmimalloc.so\n        image: registry.cn-hangzhou.aliyuncs.com/kubernetes_public/ingress-nginx-controller-v1.12.1:v1.12.1 \n        imagePullPolicy: IfNotPresent\n        lifecycle:\n          preStop:\n            exec:\n              command:\n              - /wait-shutdown\n        livenessProbe:\n          failureThreshold: 5\n          httpGet:\n            path: /healthz\n            port: 10254\n            scheme: HTTP\n          initialDelaySeconds: 10\n          periodSeconds: 10\n          successThreshold: 1\n          timeoutSeconds: 1\n        name: controller\n        ports:\n        - containerPort: 80\n          name: http\n          protocol: TCP\n        - containerPort: 443\n          name: https\n          protocol: TCP\n        - containerPort: 8443\n          name: webhook\n          protocol: TCP\n        readinessProbe:\n          failureThreshold: 3\n          httpGet:\n            path: /healthz\n            port: 10254\n            scheme: HTTP\n          initialDelaySeconds: 10\n          periodSeconds: 10\n          successThreshold: 1\n          timeoutSeconds: 1\n        resources:\n          requests:\n            cpu: 100m\n            memory: 90Mi\n        securityContext:\n          allowPrivilegeEscalation: false\n          capabilities:\n            add:\n            - NET_BIND_SERVICE\n            drop:\n            - ALL\n          readOnlyRootFilesystem: false\n          runAsGroup: 82\n          runAsNonRoot: true\n          runAsUser: 101\n          seccompProfile:\n            type: RuntimeDefault\n        volumeMounts:\n        - mountPath: /usr/local/certificates/\n          name: webhook-cert\n          readOnly: true\n      hostNetwork: true                         # 与节点共享网络名称空间\n      #dnsPolicy: ClusterFirst\n      dnsPolicy: ClusterFirstWithHostNet        # dns 策略\n      nodeSelector:                             # 节点选择器\n        kubernetes.io/os: linux\n        ingress: &quot;true&quot;\n      serviceAccountName: ingress-nginx\n      terminationGracePeriodSeconds: 300\n      volumes:\n      - name: webhook-cert\n        secret:\n          secretName: ingress-nginx-admission\n---\napiVersion: batch/v1\nkind: Job\nmetadata:\n  labels:\n    app.kubernetes.io/component: admission-webhook\n    app.kubernetes.io/instance: ingress-nginx\n    app.kubernetes.io/name: ingress-nginx\n    app.kubernetes.io/part-of: ingress-nginx\n    app.kubernetes.io/version: 1.12.1\n  name: ingress-nginx-admission-create\n  namespace: ingress-nginx\nspec:\n  template:\n    metadata:\n      labels:\n        app.kubernetes.io/component: admission-webhook\n        app.kubernetes.io/instance: ingress-nginx\n        app.kubernetes.io/name: ingress-nginx\n        app.kubernetes.io/part-of: ingress-nginx\n        app.kubernetes.io/version: 1.12.1\n      name: ingress-nginx-admission-create\n    spec:\n      containers:\n      - args:\n        - create\n        - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc\n        - --namespace=$(POD_NAMESPACE)\n        - --secret-name=ingress-nginx-admission\n        env:\n        - name: POD_NAMESPACE\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.namespace\n        image: registry.cn-hangzhou.aliyuncs.com/kubernetes_public/kube-webhook-certgen-v1.5.2:v1.5.2 \n        imagePullPolicy: IfNotPresent\n        name: create\n        securityContext:\n          allowPrivilegeEscalation: false\n          capabilities:\n            drop:\n            - ALL\n          readOnlyRootFilesystem: true\n          runAsGroup: 65532\n          runAsNonRoot: true\n          runAsUser: 65532\n          seccompProfile:\n            type: RuntimeDefault\n      nodeSelector:\n        kubernetes.io/os: linux\n      restartPolicy: OnFailure\n      serviceAccountName: ingress-nginx-admission\n---\napiVersion: batch/v1\nkind: Job\nmetadata:\n  labels:\n    app.kubernetes.io/component: admission-webhook\n    app.kubernetes.io/instance: ingress-nginx\n    app.kubernetes.io/name: ingress-nginx\n    app.kubernetes.io/part-of: ingress-nginx\n    app.kubernetes.io/version: 1.12.1\n  name: ingress-nginx-admission-patch\n  namespace: ingress-nginx\nspec:\n  template:\n    metadata:\n      labels:\n        app.kubernetes.io/component: admission-webhook\n        app.kubernetes.io/instance: ingress-nginx\n        app.kubernetes.io/name: ingress-nginx\n        app.kubernetes.io/part-of: ingress-nginx\n        app.kubernetes.io/version: 1.12.1\n      name: ingress-nginx-admission-patch\n    spec:\n      containers:\n      - args:\n        - patch\n        - --webhook-name=ingress-nginx-admission\n        - --namespace=$(POD_NAMESPACE)\n        - --patch-mutating=false\n        - --secret-name=ingress-nginx-admission\n        - --patch-failure-policy=Fail\n        env:\n        - name: POD_NAMESPACE\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.namespace\n        image: registry.cn-hangzhou.aliyuncs.com/kubernetes_public/kube-webhook-certgen-v1.5.2:v1.5.2 \n        imagePullPolicy: IfNotPresent\n        name: patch\n        securityContext:\n          allowPrivilegeEscalation: false\n          capabilities:\n            drop:\n            - ALL\n          readOnlyRootFilesystem: true\n          runAsGroup: 65532\n          runAsNonRoot: true\n          runAsUser: 65532\n          seccompProfile:\n            type: RuntimeDefault\n      nodeSelector:\n        kubernetes.io/os: linux\n      restartPolicy: OnFailure\n      serviceAccountName: ingress-nginx-admission\n---\napiVersion: networking.k8s.io/v1\nkind: IngressClass\nmetadata:\n  labels:\n    app.kubernetes.io/component: controller\n    app.kubernetes.io/instance: ingress-nginx\n    app.kubernetes.io/name: ingress-nginx\n    app.kubernetes.io/part-of: ingress-nginx\n    app.kubernetes.io/version: 1.12.1\n  name: nginx\nspec:\n  controller: k8s.io/ingress-nginx\n---\napiVersion: admissionregistration.k8s.io/v1\nkind: ValidatingWebhookConfiguration\nmetadata:\n  labels:\n    app.kubernetes.io/component: admission-webhook\n    app.kubernetes.io/instance: ingress-nginx\n    app.kubernetes.io/name: ingress-nginx\n    app.kubernetes.io/part-of: ingress-nginx\n    app.kubernetes.io/version: 1.12.1\n  name: ingress-nginx-admission\nwebhooks:\n- admissionReviewVersions:\n  - v1\n  clientConfig:\n    service:\n      name: ingress-nginx-controller-admission\n      namespace: ingress-nginx\n      path: /networking/v1/ingresses\n      port: 443\n  failurePolicy: Fail\n  matchPolicy: Equivalent\n  name: validate.nginx.ingress.kubernetes.io\n  rules:\n  - apiGroups:\n    - networking.k8s.io\n    apiVersions:\n    - v1\n    operations:\n    - CREATE\n    - UPDATE\n    resources:\n    - ingresses\n  sideEffects: None\n</code></pre>\n<ul>\n<li>type: ClusterIP                                              #service 类型改为 ClusterIP</li>\n<li>hostNetwork: true                                      # 与节点共享网络名称空间</li>\n<li>dnsPolicy: ClusterFirstWithHostNet        # dns 策略</li>\n<li>nodeSelector:                                             # 节点选择器</li>\n<li>kind: DaemonSet                                        # 资源类型 DaemonSet</li>\n</ul>\n<ol start=\"3\">\n<li>在指定节点部署 Ingress-Controller</li>\n</ol>\n<pre><code>[root@k8s-master01 ingress-master]# kubectl apply -f deploy.yaml -n ingress-nginx\n\n[root@k8s-master01 ingress-master]# kubectl label node k8s-node01 ingress=true\n[root@k8s-master01 ingress-master]# kubectl label node k8s-node02 ingress=true\n[root@k8s-master01 ingress-master]# kubectl label node k8s-master03 ingress-     #取消节点部署\n\n[root@k8s-master01 ingress-master]# kubectl get pods -n ingress-nginx \nNAME                                   READY   STATUS      RESTARTS   AGE\ningress-nginx-admission-create-zp6mh   0/1     Completed   0          12m\ningress-nginx-admission-patch-f2bpd    0/1     Completed   0          12m\ningress-nginx-controller-rgtkc         1/1     Running     0          3m59s\ningress-nginx-controller-trmn8         1/1     Running     0          3m59s\n</code></pre>\n<h4 id=\"2-ingress-nginx-入门使用\"><a class=\"anchor\" href=\"#2-ingress-nginx-入门使用\">#</a> 2. Ingress Nginx 入门使用</h4>\n<pre><code># cat web-ingress.yaml \napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: web-ingress\nspec:\n  ingressClassName: &quot;nginx&quot;\n  rules:\n  - host: test.hmallleasing.com\n    http:\n      paths:\n      - backend:\n          service:\n            name: nginx\n            port:\n              number: 80\n        path: /\n        pathType: ImplementationSpecific\n</code></pre>\n<h4 id=\"3-ingress-nginx-域名重定向-redirect\"><a class=\"anchor\" href=\"#3-ingress-nginx-域名重定向-redirect\">#</a> 3. Ingress Nginx 域名重定向 Redirect</h4>\n<pre><code># cat redirect-ingress.yaml \napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: redirect-ingress\n  annotations:\n    nginx.ingress.kubernetes.io/permanent-redirect: https://www.baidu.com\nspec:\n  ingressClassName: &quot;nginx&quot;\n  rules:\n  - host: redirect.hmallleasing.com\n    http:\n      paths:\n      - backend:\n          service:\n            name: nginx\n            port:\n              number: 80\n        path: /\n        pathType: ImplementationSpecific\n</code></pre>\n<h4 id=\"4-ingress-nginx-前后端分离-rewrite\"><a class=\"anchor\" href=\"#4-ingress-nginx-前后端分离-rewrite\">#</a> 4. Ingress Nginx 前后端分离 Rewrite</h4>\n<pre><code># cat rewrite-ingress.yaml \napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: rewrite-ingress\n  annotations:\n    nginx.ingress.kubernetes.io/rewrite-target: /$2\nspec:\n  ingressClassName: &quot;nginx&quot;\n  rules:\n  - host: rewrite.hmallleasing.com\n    http:\n      paths:\n      - backend:\n          service:\n            name: nginx\n            port:\n              number: 80\n        path: /api(/|$)(.*)\n        pathType: ImplementationSpecif\n</code></pre>\n<h4 id=\"5-ingress-nginx-错误代码重定向\"><a class=\"anchor\" href=\"#5-ingress-nginx-错误代码重定向\">#</a> 5. Ingress Nginx 错误代码重定向</h4>\n<pre><code>\n</code></pre>\n<h4 id=\"6-ingress-nginx-ssl\"><a class=\"anchor\" href=\"#6-ingress-nginx-ssl\">#</a> 6. Ingress Nginx SSL</h4>\n<pre><code>1.生成证书\n# openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout tls.key -out tls.cert -subj &quot;/CN=s.hmallleasing.com/O=tls.hmallleasing.com&quot;\n\n2.创建证书\n# kubectl create secret tls tls.hmallleasig.com --key tls.key --cert tls.cert\n\n3.ingress配置\n# kubectl create secret tls tls.hmallleasig.com --cert=tls.crt --key=tls.key\n# cat tls-ingress.yaml \napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: tls-ingress\n  annotations:\n    nginx.ingress.kubernetes.io/ssl-redirect: &quot;false&quot;    #禁用https强制跳转\nspec:\n  ingressClassName: &quot;nginx&quot;\n  rules:\n  - host: tls.hmallleasing.com\n    http:\n      paths:\n      - backend:\n          service:\n            name: nginx\n            port:\n              number: 80\n        path: /\n        pathType: ImplementationSpecific\n  tls:                  #https\n  - hosts:\n    - tls.hmallleasing.com\n    secretName: &quot;tls.hmallleasig.com&quot;\t\n</code></pre>\n<h4 id=\"7-ingress-nginx-匹配请求头\"><a class=\"anchor\" href=\"#7-ingress-nginx-匹配请求头\">#</a> 7. Ingress Nginx 匹配请求头</h4>\n<pre><code>1.部署移动端应用\n# kubectl create deploy phone --image=registry.cn-beijing.aliyuncs.com/dotbalo/nginx:phone\n# kubectl expose deploy phone --port 80\n# vim m-ingress.yaml\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: m-ingress\nspec:\n  ingressClassName: &quot;nginx&quot;\n  rules:\n  - host: m.hmallleasing.com\n    http:\n      paths:\n      - backend:\n          service:\n            name: phone\n            port:\n              number: 80\n        path: /\n        pathType: ImplementationSpecific\n\n2.部署PC端应用\t\t\n# kubectl create deploy laptop --image=registry.cn-beijing.aliyuncs.com/dotbalo/nginx:laptop\t\n# kubectl expose deploy laptop --port 80\n# vim laptop-ingress.yaml\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  annotations:\n    kubernetes.io/ingress.class: nginx\n    nginx.ingress.kubernetes.io/server-snippet: |\n      set $agentflag 0;\n          if ($http_user_agent ~* &quot;(Android|iPhone|Windows Phone|UC|Kindle)&quot; )&#123;\n              set $agentflag 1;\n          &#125;\n          if ( $agentflag = 1 ) &#123;\n              return 301 http://m.hmallleaing.com;\n          &#125;\n  name: laptop-ingress\nspec:\n  ingressClassName: &quot;nginx&quot;\n  rules:\n  - host: hmallleasing.com\n    http:\n      paths:\n      - backend:\n          service:\n            name: laptop\n            port:\n              number: 80\n        path: /\n        pathType: ImplementationSpecific\t\n</code></pre>\n<h4 id=\"8ingress-nginx-基本认证\"><a class=\"anchor\" href=\"#8ingress-nginx-基本认证\">#</a> 8.Ingress Nginx 基本认证</h4>\n<pre><code># yum install httpd -y\n# htpasswd -c auth superman\n# cat auth \nsuperman:$apr1$AC1pc3dK$RJyWnyDJFNKY6twneGVrA1\t\t\n\n# kubectl create secret generic basic-auth --from-file=auth\n# cat basic-ingress.yaml \napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: basic-ingress\n  annotations:\n    nginx.ingress.kubernetes.io/auth-type: basic  # 认证类型\n    nginx.ingress.kubernetes.io/auth-secret: basic-auth  # 包含用户和密码的 secret 资源名称\n    nginx.ingress.kubernetes.io/auth-realm: 'Please User password'  # 要显示的信息\nspec:\n  ingressClassName: &quot;nginx&quot;\n  rules:\n  - host: basic.hmallleasing.com\n    http:\n      paths:\n      - backend:\n          service:\n            name: nginx\n            port:\n              number: 80\n        path: /\n        pathType: ImplementationSpecific\n</code></pre>\n<h4 id=\"9-ingress-nginx-黑白名单\"><a class=\"anchor\" href=\"#9-ingress-nginx-黑白名单\">#</a> 9. Ingress Nginx 黑 / 白名单</h4>\n<pre><code>写法一：\n# cat white-ingress.yaml \napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: white-ingress\n  annotations:\n    nginx.ingress.kubernetes.io/whitelist-source-range: &quot;192.168.40.101&quot;\nspec:\n  ingressClassName: &quot;nginx&quot;\n  rules:\n  - host: white.hmallleasing.com\n    http:\n      paths:\n      - backend:\n          service:\n            name: nginx\n            port:\n              number: 80\n        path: /\n        pathType: ImplementationSpecific\t\n\n写法二：\t\t\n[root@k8s-master01 ingress]# cat white-ingress.yaml \napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: white-ingress\n  annotations:\n    nginx.ingress.kubernetes.io/whitelist-source-range: &quot;192.168.40.0/24&quot;\nspec:\n  ingressClassName: &quot;nginx&quot;\n  rules:\n  - host: white.hmallleasing.com\n    http:\n      paths:\n      - backend:\n          service:\n            name: nginx\n            port:\n              number: 80\n        path: /\n        pathType: ImplementationSpecific\n\n\n写法三：\n# cat white-ingress.yaml \napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: white-ingress\n  annotations:\n    nginx.ingress.kubernetes.io/server-snippet: |\n      allow 192.168.40.0/24;\n      deny all;\nspec:\n  ingressClassName: &quot;nginx&quot;\n  rules:\n  - host: white.hmallleasing.com\n    http:\n      paths:\n      - backend:\n          service:\n            name: nginx\n            port:\n              number: 80\n        path: /\n        pathType: ImplementationSpecific\n\t\t\n\n#Master01测试\t\t\n# curl -H &quot;Host:white.hmallleasing.com&quot; http://192.168.40.103 -I\nHTTP/1.1 200 OK\nDate: Sat, 14 Oct 2023 13:12:03 GMT\nContent-Type: text/html\nContent-Length: 612\nConnection: keep-alive\nLast-Modified: Tue, 16 Apr 2019 13:08:19 GMT\nETag: &quot;5cb5d3c3-264&quot;\nAccept-Ranges: bytes\t\t\n\n#Master02测试\n# curl -H &quot;Host:white.hmallleasing.com&quot; http://192.168.40.103 -I\nHTTP/1.1 403 Forbidden\nDate: Sat, 14 Oct 2023 13:13:34 GMT\nContent-Type: text/html\nContent-Length: 146\nConnection: keep-alive\n</code></pre>\n<h4 id=\"10-ingress-nginx-速率限制\"><a class=\"anchor\" href=\"#10-ingress-nginx-速率限制\">#</a> 10. Ingress Nginx 速率限制</h4>\n<pre><code>[root@k8s-master01 ingress]# cat limit-rate-ingress.yaml \napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: rate-limit-ingress\n  annotations:\n    nginx.ingress.kubernetes.io/limit-rps: &quot;50&quot;\nspec:\n  ingressClassName: &quot;nginx&quot;\n  rules:\n  - host: rate-limit.hmallleasing.com\n    http:\n      paths:\n      - backend:\n          service:\n            name: nginx\n            port:\n              number: 80\n        path: /\n        pathType: ImplementationSpecific\n\n# ab -c 20 -n 1000 http://rate-limit.hmallleasing.com/ |grep request\nComplete requests:      1000\nFailed requests:        724\nTime per request:       10.301 [ms] (mean)\nTime per request:       0.515 [ms] (mean, across all concurrent requests)\nPercentage of the requests served within a certain time (ms)\n</code></pre>\n<h4 id=\"11使用-nginx-实现灰度金丝雀发布\"><a class=\"anchor\" href=\"#11使用-nginx-实现灰度金丝雀发布\">#</a> 11. 使用 Nginx 实现灰度 / 金丝雀发布</h4>\n<pre><code>1.创建 v1 版本\n# kubectl create deploy canary-v1 --image=registry.cn-beijing.aliyuncs.com/dotbalo/canary:v1\t\n# kubectl expose deploy canary-v1 --port 8080\n# cat canary-v1-ingress.yaml \napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: canary-v1-ingress\nspec:\n  ingressClassName: &quot;nginx&quot;\n  rules:\n  - host: canary.hmallleasing.com\n    http:\n      paths:\n      - backend:\n          service:\n            name: canary-v1\n            port:\n              number: 8080\n        path: /\n        pathType: ImplementationSpecific\n\t\t\n# curl -H &quot;Host:canary.hmallleasing.com&quot; http://192.168.40.103 \t\n\n2.创建 v2 版本\n# kubectl create deploy canary-v2 --image=registry.cn-beijing.aliyuncs.com/dotbalo/canary:v2\n# kubectl expose deploy canary-v2 --port 8080\n# cat canary-v2-ingress.yaml \napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: canary-v2-ingress\n  annotations:\n    nginx.ingress.kubernetes.io/canary: &quot;true&quot;    #启动灰度发布\n    nginx.ingress.kubernetes.io/canary-weight: &quot;20&quot;  #基于权重,50%流量调度到这个灰度的版本上\nspec:\n  ingressClassName: &quot;nginx&quot;\n  rules:\n  - host: canary.hmallleasing.com\n    http:\n      paths:\n      - path: /\n        pathType: Prefix\n        backend:\n          service:\n            name: canary-v2\n            port:\n              number: 8080\n\n#测试灰度发布\n[root@k8s-master01 ingress]# cat canary.sh \n#!/bin/bash\n\nwhile true\ndo\n\tcurl -H &quot;Host:canary.hmallleasing.com&quot; http://192.168.40.103\n\tsleep 0.5\ndone\n</code></pre>\n<h4 id=\"12-kubernetes-dashboard配置证书\"><a class=\"anchor\" href=\"#12-kubernetes-dashboard配置证书\">#</a> 12. kubernetes-dashboard 配置证书</h4>\n<pre><code>1.创建证书\nkubectl create secret tls kubernetes-dashboard-certs --key *.hmallleasing.com_key.key --cert *.hmallleasing.com_chain.crt -n kubernetes-dashboard\n\n2.修改kubernetes-dashboard资源清单\nkubectl edit deployment -n kubernetes-dashboard kubernetes-dashboard\n...\n      - args:\n        - --auto-generate-certificates=false\n        - --tls-key-file=_.hmallleasing.com_key.key\n        - --tls-cert-file=_.hmallleasing.com_chain.crt\n        - --token-ttl=21600\n        - --authentication-mode=basic,token\n        - --namespace=kubernetes-dashboard\n...\n\n3.创建ingress\n#cat dashboard-ingress.yaml \napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: dashboard-ingress\n  namespace: kubernetes-dashboard\n  annotations:\n    nginx.ingress.kubernetes.io/ssl-passthrough: &quot;true&quot;    \n    nginx.ingress.kubernetes.io/backend-protocol: &quot;HTTPS&quot;    \nspec:\n  ingressClassName: &quot;nginx&quot;\n  rules:\n  - host: dashboard.hmallleasing.com\n    http:\n      paths:\n      - path: /\n        pathType: Prefix\n        backend:\n          service:\n            name: kubernetes-dashboard\n            port:\n              number: 443\n\n# kubectl apply -f dashboard-ingress.yaml \n</code></pre>\n<h4 id=\"13-入口lb配置\"><a class=\"anchor\" href=\"#13-入口lb配置\">#</a> 13. 入口 LB 配置</h4>\n<pre><code>[root@lb nginx]# cat /etc/nginx/conf.d/ingress.conf \nupstream ingress &#123;\n\tserver 192.168.40.103:80 max_conns=2000 max_fails=2 fail_timeout=5s;\n\tserver 192.168.40.104:80 max_conns=2000 max_fails=2 fail_timeout=5s;\n\tserver 192.168.40.105:80 max_conns=2000 max_fails=2 fail_timeout=5s;\n&#125;\n\nserver &#123;\n    listen 443 ssl;\n    server_name test.hmallleasing.com;\n    client_max_body_size 1G; \n    ssl_prefer_server_ciphers on;\n    ssl_certificate  /etc/nginx/sslkey/*.hmallleasing.com_chain.crt;\n    ssl_certificate_key  /etc/nginx/sslkey/*.hmallleasing.com_key.key;\n\n    location / &#123;\n        proxy_pass http://ingress;\n        include proxy_params;\n\t    proxy_next_upstream error timeout http_500 http_502 http_503 http_504;\n\t    proxy_next_upstream_tries 2;\n\t    proxy_next_upstream_timeout 3s;\n    &#125;\n&#125;\n\nserver &#123;\n    listen 80;\n    server_name test.hmallleasing.com;\n    return 302 https://$server_name$request_uri;\n&#125;\n\n[root@lb ~]# mkdir /etc/nginx/sslkey -p\n</code></pre>\n",
            "tags": [
                "默认tags"
            ]
        }
    ]
}