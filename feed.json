{
    "version": "https://jsonfeed.org/version/1",
    "title": "LinuxSre云原生",
    "description": "专注于 Linux 运维、云计算、云原⽣等技术",
    "home_page_url": "http://xuyong.cn",
    "items": [
        {
            "id": "http://xuyong.cn/posts/0.html",
            "url": "http://xuyong.cn/posts/0.html",
            "title": "",
            "date_published": "2025-04-10T13:39:44.243Z",
            "content_html": "<h3 id=\"一键永久激活window-office教程\"><a class=\"anchor\" href=\"#一键永久激活window-office教程\">#</a> 一键永久激活 Window、office 教程</h3>\n<p>1、按下 Win 键 + R，调出运行对话框，输入 powershell 并回车，启动命令提示符窗口。接着输入以下指令执行激活：</p>\n<pre><code>irm https://get.activated.win | iex\n</code></pre>\n<p><a href=\"https://imgse.com/i/pE2UTxI\"><img loading=\"lazy\" data-src=\"https://s21.ax1x.com/2025/04/10/pE2UTxI.png\" alt=\"pE2UTxI.png\" /></a></p>\n<p>该脚本包含四个功能：首个命令用于 Windows 系统永久激活，第二个用于 Office 永久激活，第三个将系统有效期延长至 2038 年，第四个则实现每 180 天自动循环激活。</p>\n<p><a href=\"https://imgse.com/i/pE2UHMt\"><img loading=\"lazy\" data-src=\"https://s21.ax1x.com/2025/04/10/pE2UHMt.png\" alt=\"pE2UHMt.png\" /></a></p>\n<p>2. 我们再次使用 Windows 徽标 + R 快捷键打开运行框，输入 slmgr.vbs/xpr 就可以看到系统已经永久激活了。</p>\n<pre><code>slmgr.vbs /xpr\n</code></pre>\n<p><a href=\"https://imgse.com/i/pE2Uqqf\"><img loading=\"lazy\" data-src=\"https://s21.ax1x.com/2025/04/10/pE2Uqqf.png\" alt=\"pE2Uqqf.png\" /></a></p>\n<p>以上，既然看到这里了，如果觉得不错，随手点个赞、打赏一下吧，⭐～谢谢你看我的文章，我们下次再见。</p>\n",
            "tags": []
        },
        {
            "id": "http://xuyong.cn/posts/3071070979.html",
            "url": "http://xuyong.cn/posts/3071070979.html",
            "title": "企业级私有仓库Harbor搭建",
            "date_published": "2025-04-10T13:32:09.000Z",
            "content_html": "",
            "tags": [
                "默认tags"
            ]
        },
        {
            "id": "http://xuyong.cn/posts/985149017.html",
            "url": "http://xuyong.cn/posts/985149017.html",
            "title": "二进制高可用安装K8S集群",
            "date_published": "2025-04-10T12:58:40.000Z",
            "content_html": "<h2 id=\"二进制高可用安装k8s集群\"><a class=\"anchor\" href=\"#二进制高可用安装k8s集群\">#</a> 二进制高可用安装 K8s 集群</h2>\n<h4 id=\"1-基本配置\"><a class=\"anchor\" href=\"#1-基本配置\">#</a> 1. 基本配置</h4>\n<h5 id=\"11-基本环境配置\"><a class=\"anchor\" href=\"#11-基本环境配置\">#</a> 1.1 基本环境配置</h5>\n<table>\n<thead>\n<tr>\n<th>主机名</th>\n<th>IP 地址</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>k8s-master01 ~ 03</td>\n<td>192.168.1.71 ~ 73</td>\n<td>master 节点 * 3</td>\n</tr>\n<tr>\n<td>/</td>\n<td>192.168.1.70</td>\n<td>keepalived 虚拟 IP（不占用机器）</td>\n</tr>\n<tr>\n<td>k8s-node01 ~ 02</td>\n<td>192.168.1.74/75</td>\n<td>worker 节点 * 2</td>\n</tr>\n</tbody>\n</table>\n<p><em>请统一替换这些网段，Pod 网段和 service 和宿主机网段不要重复！！！</em></p>\n<table>\n<thead>\n<tr>\n<th><em><strong>* 配置信息 *</strong></em></th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>系统版本</td>\n<td>Rocky Linux 8/9</td>\n</tr>\n<tr>\n<td>Containerd</td>\n<td>latest</td>\n</tr>\n<tr>\n<td>Pod 网段</td>\n<td>172.16.0.0/16</td>\n</tr>\n<tr>\n<td>Service 网段</td>\n<td>10.96.0.0/16</td>\n</tr>\n</tbody>\n</table>\n<p><mark>所有节点</mark>更改主机名（其它节点按需修改）：</p>\n<pre><code>hostnamectl set-hostname k8s-master01 \n</code></pre>\n<p><mark>所有节点</mark>配置 hosts，修改 /etc/hosts 如下：</p>\n<pre><code>[root@k8s-master01 ~]# cat /etc/hosts\n127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4\n::1         localhost localhost.localdomain localhost6 localhost6.localdomain6\n192.168.1.71 k8s-master01\n192.168.1.72 k8s-master02\n192.168.1.73 k8s-master03\n192.168.1.74 k8s-node01\n192.168.1.75 k8s-node02\n</code></pre>\n<p><mark>所有节点</mark>配置 yum 源：</p>\n<pre><code># 配置基础源\nsed -e 's|^mirrorlist=|#mirrorlist=|g' \\\n    -e 's|^#baseurl=http://dl.rockylinux.org/$contentdir|baseurl=https://mirrors.aliyun.com/rockylinux|g' \\\n    -i.bak \\\n    /etc/yum.repos.d/*.repo\n\nyum makecache\n</code></pre>\n<p><mark>所有节点</mark>必备工具安装：</p>\n<pre><code>yum install wget jq psmisc vim net-tools telnet yum-utils device-mapper-persistent-data lvm2 git rsyslog -y\n</code></pre>\n<p><mark>所有节点</mark>关闭防火墙、selinux、dnsmasq、swap、开启 rsyslog。服务器配置如下：</p>\n<pre><code>systemctl disable --now firewalld \nsystemctl disable --now dnsmasq\nsetenforce 0\nsed -i 's#SELINUX=enforcing#SELINUX=disabled#g' /etc/sysconfig/selinux\nsed -i 's#SELINUX=enforcing#SELINUX=disabled#g' /etc/selinux/config\nsystemctl enable --now rsyslog\n</code></pre>\n<p><mark>所有节点</mark>关闭 swap 分区：</p>\n<pre><code>swapoff -a &amp;&amp; sysctl -w vm.swappiness=0\nsed -ri '/^[^#]*swap/s@^@#@' /etc/fstab\n</code></pre>\n<p><mark>所有节点</mark>安装 ntpdate：</p>\n<pre><code>sudo dnf install epel-release -y\nsudo dnf config-manager --set-enabled epel\nsudo dnf install ntpsec\n</code></pre>\n<p><mark>所有节点</mark>同步时间并配置上海时区：</p>\n<pre><code>ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime\necho 'Asia/Shanghai' &gt;/etc/timezone\nntpdate time2.aliyun.com\n# 加入到crontab\ncrontab -e\n*/5 * * * * /usr/sbin/ntpdate time2.aliyun.com\n</code></pre>\n<p><mark>所有节点</mark>配置 limit：</p>\n<pre><code>ulimit -SHn 65535\nvim /etc/security/limits.conf\n# 末尾添加如下内容\n* soft nofile 65536\n* hard nofile 131072\n* soft nproc 65535\n* hard nproc 655350\n* soft memlock unlimited\n* hard memlock unlimited\n</code></pre>\n<p><mark>所有节点</mark>升级系统：</p>\n<pre><code>yum update -y\n</code></pre>\n<p><mark>Master01 节点</mark>免密钥登录其他节点，安装过程中生成配置文件和证书均在 Master01 上操作，集群管理也在 Master01 上操作：</p>\n<pre><code>ssh-keygen -t rsa\nfor i in k8s-master01 k8s-master02 k8s-master03 k8s-node01 k8s-node02;do ssh-copy-id -i .ssh/id_rsa.pub $i;done\n</code></pre>\n<p><em>注意：公有云环境，可能需要把 kubectl 放在一个非 Master 节点上</em></p>\n<p><mark>Master01 节点</mark>下载安装所有的源码文件：</p>\n<pre><code>cd /root/ ; git clone https://gitee.com/chinagei/k8s-ha-install\n</code></pre>\n<h5 id=\"12-内核配置\"><a class=\"anchor\" href=\"#12-内核配置\">#</a> 1.2 内核配置</h5>\n<p><mark>所有节点</mark>安装 ipvsadm：</p>\n<pre><code>yum install ipvsadm ipset sysstat conntrack libseccomp -y\n</code></pre>\n<p><mark>所有节点</mark>配置 ipvs 模块：</p>\n<pre><code>modprobe -- ip_vs\nmodprobe -- ip_vs_rr\nmodprobe -- ip_vs_wrr\nmodprobe -- ip_vs_sh\nmodprobe -- nf_conntrack\n</code></pre>\n<p><mark>所有节点</mark>创建 ipvs.conf，并配置开机自动加载：</p>\n<pre><code>vim /etc/modules-load.d/ipvs.conf \n# 加入以下内容\nip_vs\nip_vs_lc\nip_vs_wlc\nip_vs_rr\nip_vs_wrr\nip_vs_lblc\nip_vs_lblcr\nip_vs_dh\nip_vs_sh\nip_vs_fo\nip_vs_nq\nip_vs_sed\nip_vs_ftp\nip_vs_sh\nnf_conntrack\nip_tables\nip_set\nxt_set\nipt_set\nipt_rpfilter\nipt_REJECT\nipip\n</code></pre>\n<p><mark>所有节点</mark>然后执行 systemctl enable --now systemd-modules-load.service 即可（报错不用管）</p>\n<pre><code>systemctl enable --now systemd-modules-load.service\n</code></pre>\n<p><mark>所有节点</mark>内核优化配置：</p>\n<pre><code>cat &lt;&lt;EOF &gt; /etc/sysctl.d/k8s.conf\nnet.ipv4.ip_forward = 1\nnet.bridge.bridge-nf-call-iptables = 1\nnet.bridge.bridge-nf-call-ip6tables = 1\nfs.may_detach_mounts = 1\nnet.ipv4.conf.all.route_localnet = 1\nvm.overcommit_memory=1\nvm.panic_on_oom=0\nfs.inotify.max_user_watches=89100\nfs.file-max=52706963\nfs.nr_open=52706963\nnet.netfilter.nf_conntrack_max=2310720\n\nnet.ipv4.tcp_keepalive_time = 600\nnet.ipv4.tcp_keepalive_probes = 3\nnet.ipv4.tcp_keepalive_intvl =15\nnet.ipv4.tcp_max_tw_buckets = 36000\nnet.ipv4.tcp_tw_reuse = 1\nnet.ipv4.tcp_max_orphans = 327680\nnet.ipv4.tcp_orphan_retries = 3\nnet.ipv4.tcp_syncookies = 1\nnet.ipv4.tcp_max_syn_backlog = 16384\nnet.ipv4.ip_conntrack_max = 65536\nnet.ipv4.tcp_max_syn_backlog = 16384\nnet.ipv4.tcp_timestamps = 0\nnet.core.somaxconn = 16384\nEOF\n</code></pre>\n<p><mark>所有节点</mark>应用配置：</p>\n<pre><code>sysctl --system\n</code></pre>\n<p><mark>所有节点</mark>配置完内核后，重启机器，之后查看内核模块是否已自动加载：</p>\n<pre><code>reboot\nlsmod | grep --color=auto -e ip_vs -e nf_conntrack\n</code></pre>\n<h4 id=\"2-高可用组件安装\"><a class=\"anchor\" href=\"#2-高可用组件安装\">#</a> 2. 高可用组件安装</h4>\n<p><em>注意：如果安装的不是高可用集群，haproxy 和 keepalived 无需安装</em></p>\n<p><em>注意：公有云要用公有云自带的负载均衡，比如阿里云的 SLB、NLB，腾讯云的 ELB，用来替代 haproxy 和 keepalived，因为公有云大部分都是不支持 keepalived 的。</em></p>\n<p><mark>所有 Master 节点</mark>通过 yum 安装 HAProxy 和 KeepAlived：</p>\n<pre><code>yum install keepalived haproxy -y\n</code></pre>\n<p><mark>所有 Master 节点</mark>配置 HAProxy，需要注意黄色部分的 IP：</p>\n<pre><code>[root@k8s-master01 etc]# mkdir /etc/haproxy\n[root@k8s-master01 etc]# vim /etc/haproxy/haproxy.cfg \nglobal\n  maxconn  2000\n  ulimit-n  16384\n  log  127.0.0.1 local0 err\n  stats timeout 30s\n\ndefaults\n  log global\n  mode  http\n  option  httplog\n  timeout connect 5000\n  timeout client  50000\n  timeout server  50000\n  timeout http-request 15s\n  timeout http-keep-alive 15s\n\nfrontend monitor-in\n  bind *:33305\n  mode http\n  option httplog\n  monitor-uri /monitor\n\nfrontend k8s-master\n  bind 0.0.0.0:8443       #HAProxy监听端口\n  bind 127.0.0.1:8443     #HAProxy监听端口\n  mode tcp\n  option tcplog\n  tcp-request inspect-delay 5s\n  default_backend k8s-master\n\nbackend k8s-master\n  mode tcp\n  option tcplog\n  option tcp-check\n  balance roundrobin\n  default-server inter 10s downinter 5s rise 2 fall 2 slowstart 60s maxconn 250 maxqueue 256 weight 100\n  server k8s-master01\t192.168.1.71:6443  check       #API Server IP地址\n  server k8s-master02\t192.168.1.72:6443  check       #API Server IP地址\n  server k8s-master03\t192.168.1.73:6443  check       #API Server IP地址\n</code></pre>\n<p><mark>所有 Master 节点</mark>配置 KeepAlived，需要注意黄色部分的配置。</p>\n<p><mark>Master01 节点</mark>的配置：</p>\n<pre><code>[root@k8s-master01 etc]# mkdir /etc/keepalived\n\n[root@k8s-master01 ~]# vim /etc/keepalived/keepalived.conf \n! Configuration File for keepalived\nglobal_defs &#123;\n    router_id LVS_DEVEL\nscript_user root\n    enable_script_security\n&#125;\nvrrp_script chk_apiserver &#123;\n    script &quot;/etc/keepalived/check_apiserver.sh&quot;\n    interval 5\n    weight -5\n    fall 2  \nrise 1\n&#125;\nvrrp_instance VI_1 &#123;\n    state MASTER\n    interface ens160               #网卡名称\n    mcast_src_ip 192.168.1.71      #K8s-master01 IP地址\n    virtual_router_id 51\n    priority 101\n    advert_int 2\n    authentication &#123;\n        auth_type PASS\n        auth_pass K8SHA_KA_AUTH\n    &#125;\n    virtual_ipaddress &#123;\n        192.168.1.70        #VIP地址\n    &#125;\n    track_script &#123;\n       chk_apiserver\n    &#125;\n&#125;\t\n</code></pre>\n<p><mark>Master02 节点</mark>的配置：</p>\n<pre><code># vim /etc/keepalived/keepalived.conf \n\n! Configuration File for keepalived\nglobal_defs &#123;\n    router_id LVS_DEVEL\nscript_user root\n    enable_script_security\n&#125;\nvrrp_script chk_apiserver &#123;\n    script &quot;/etc/keepalived/check_apiserver.sh&quot;\n   interval 5\n    weight -5\n    fall 2  \nrise 1\n&#125;\nvrrp_instance VI_1 &#123;\n    state BACKUP\n    interface ens160                #网卡名称\n    mcast_src_ip 192.168.1.72       #K8s-master02 IP地址\n    virtual_router_id 51\n    priority 100\n    advert_int 2\n    authentication &#123;\n        auth_type PASS\n        auth_pass K8SHA_KA_AUTH\n    &#125;\n    virtual_ipaddress &#123;\n        192.168.1.70              #VIP地址\n    &#125;\n    track_script &#123;\n       chk_apiserver\n    &#125;\n&#125;\n</code></pre>\n<p><mark>Master03 节点</mark>的配置：</p>\n<pre><code># vim /etc/keepalived/keepalived.conf \n\n! Configuration File for keepalived\nglobal_defs &#123;\n    router_id LVS_DEVEL\nscript_user root\n    enable_script_security\n&#125;\nvrrp_script chk_apiserver &#123;\n    script &quot;/etc/keepalived/check_apiserver.sh&quot;\n interval 5\n    weight -5\n    fall 2  \nrise 1\n&#125;\nvrrp_instance VI_1 &#123;\n    state BACKUP\n    interface ens160                 #网卡名称\n    mcast_src_ip 192.168.1.73        #K8s-master03 IP地址\n    virtual_router_id 51\n    priority 100\n    advert_int 2\n    authentication &#123;\n        auth_type PASS\n        auth_pass K8SHA_KA_AUTH\n    &#125;\n    virtual_ipaddress &#123;\n        192.168.1.70          #VIP地址\n    &#125;\n    track_script &#123;\n       chk_apiserver\n    &#125;\n&#125;\n</code></pre>\n<p><mark>所有 master 节点</mark>配置 KeepAlived 健康检查文件：</p>\n<pre><code>[root@k8s-master01 keepalived]# vim /etc/keepalived/check_apiserver.sh \n#!/bin/bash\n\nerr=0\nfor k in $(seq 1 3)\ndo\n    check_code=$(pgrep haproxy)\n    if [[ $check_code == &quot;&quot; ]]; then\n        err=$(expr $err + 1)\n        sleep 1\n        continue\n    else\n        err=0\n        break\n    fi\ndone\n\nif [[ $err != &quot;0&quot; ]]; then\n    echo &quot;systemctl stop keepalived&quot;\n    /usr/bin/systemctl stop keepalived\n    exit 1\nelse\n    exit 0\nfi\n</code></pre>\n<p><mark>所有 master 节点</mark>配置健康检查文件添加执行权限：</p>\n<pre><code>chmod +x /etc/keepalived/check_apiserver.sh\n</code></pre>\n<p><mark>所有 master 节点</mark>启动 haproxy 和 keepalived：</p>\n<pre><code>[root@k8s-master01 keepalived]# systemctl daemon-reload\n[root@k8s-master01 keepalived]# systemctl enable --now haproxy\n[root@k8s-master01 keepalived]# systemctl enable --now keepalived\n</code></pre>\n<p>重要：如果安装了 keepalived 和 haproxy，需要测试 keepalived 是否是正常的</p>\n<pre><code>所有节点测试VIP\n[root@k8s-master01 ~]# ping 192.168.1.70 -c 4\nPING 192.168.1.70 (192.168.1.70) 56(84) bytes of data.\n64 bytes from 192.168.1.70: icmp_seq=1 ttl=64 time=0.464 ms\n64 bytes from 192.168.1.70: icmp_seq=2 ttl=64 time=0.063 ms\n64 bytes from 192.168.1.70: icmp_seq=3 ttl=64 time=0.062 ms\n64 bytes from 192.168.1.70: icmp_seq=4 ttl=64 time=0.063 ms\n\n[root@k8s-master01 ~]# telnet 192.168.1.70 16443\nTrying 192.168.1.70...\nConnected to 192.168.1.70.\nEscape character is '^]'.\nConnection closed by foreign host.\n</code></pre>\n<p>如果 ping 不通且 telnet 没有出现 ] ，则认为 VIP 不可以，不可在继续往下执行，需要排查 keepalived 的问题，比如防火墙和 selinux，haproxy 和 keepalived 的状态，监听端口等</p>\n<ul>\n<li>所有节点查看防火墙状态必须为 disable 和 inactive：systemctl status firewalld</li>\n<li>所有节点查看 selinux 状态，必须为 disable：getenforce</li>\n<li>master 节点查看 haproxy 和 keepalived 状态：systemctl status keepalived haproxy</li>\n<li>master 节点查看监听端口：netstat -lntp</li>\n</ul>\n<p>如果以上都没有问题，需要确认：</p>\n<ol>\n<li>\n<p>是否是公有云机器</p>\n</li>\n<li>\n<p>是否是私有云机器（类似 OpenStack）</p>\n</li>\n</ol>\n<p>上述公有云一般都是不支持 keepalived，私有云可能也有限制，需要和自己的私有云管理员咨询</p>\n<h4 id=\"3-runtime安装\"><a class=\"anchor\" href=\"#3-runtime安装\">#</a> 3. Runtime 安装</h4>\n<p>如果安装的版本低于 1.24，选择 Docker 和 Containerd 均可，高于 1.24 建议选择 Containerd 作为 Runtime，不再推荐使用 Docker 作为 Runtime。</p>\n<h5 id=\"31-安装containerd\"><a class=\"anchor\" href=\"#31-安装containerd\">#</a> 3.1 安装 Containerd</h5>\n<p><mark>所有节点</mark>配置安装源：</p>\n<pre><code>yum install wget jq psmisc vim net-tools telnet yum-utils device-mapper-persistent-data lvm2 git -y\nyum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\n</code></pre>\n<p><mark>所有节点</mark>安装 docker-ce（如果在以前已经安装过，需要重新安装更新一下）：</p>\n<pre><code># yum install docker-ce containerd -y\n</code></pre>\n<p><em>可以无需启动 Docker，只需要配置和启动 Containerd 即可。</em></p>\n<p>首先配置 Containerd 所需的模块（<mark>所有节点</mark>）：</p>\n<pre><code># cat &lt;&lt;EOF | sudo tee /etc/modules-load.d/containerd.conf\noverlay\nbr_netfilter\nEOF\n</code></pre>\n<p><mark>所有节点</mark>加载模块：</p>\n<pre><code># modprobe -- overlay\n# modprobe -- br_netfilter\n</code></pre>\n<p><mark>所有节点</mark>，配置 Containerd 所需的内核：</p>\n<pre><code># cat &lt;&lt;EOF | sudo tee /etc/sysctl.d/99-kubernetes-cri.conf\nnet.bridge.bridge-nf-call-iptables  = 1\nnet.ipv4.ip_forward                 = 1\nnet.bridge.bridge-nf-call-ip6tables = 1\nEOF\n</code></pre>\n<p><mark>所有节点</mark>加载内核：</p>\n<pre><code># sysctl --system\n</code></pre>\n<p><mark>所有节点</mark>生成 Containerd 的配置文件：</p>\n<pre><code># mkdir -p /etc/containerd\n# containerd config default | tee /etc/containerd/config.toml\n</code></pre>\n<p><mark>所有节点</mark>更改 Containerd 的 Cgroup 和 Pause 镜像配置：</p>\n<pre><code>sed -i 's#SystemdCgroup = false#SystemdCgroup = true#g' /etc/containerd/config.toml\nsed -i 's#k8s.gcr.io/pause#registry.cn-hangzhou.aliyuncs.com/google_containers/pause#g'  /etc/containerd/config.toml\nsed -i 's#registry.gcr.io/pause#registry.cn-hangzhou.aliyuncs.com/google_containers/pause#g'  /etc/containerd/config.toml\nsed -i 's#registry.k8s.io/pause#registry.cn-hangzhou.aliyuncs.com/google_containers/pause#g'  /etc/containerd/config.toml\n</code></pre>\n<p><mark>所有节点</mark>启动 Containerd，并配置开机自启动：</p>\n<pre><code># systemctl daemon-reload\n# systemctl enable --now containerd\n</code></pre>\n<p><mark>所有节点</mark>配置 crictl 客户端连接的运行时位置（可选）：</p>\n<pre><code># cat &gt; /etc/crictl.yaml &lt;&lt;EOF\nruntime-endpoint: unix:///run/containerd/containerd.sock\nimage-endpoint: unix:///run/containerd/containerd.sock\ntimeout: 10\ndebug: false\nEOF\n</code></pre>\n<h4 id=\"4-k8s及etcd安装\"><a class=\"anchor\" href=\"#4-k8s及etcd安装\">#</a> 4 . K8S 及 etcd 安装</h4>\n<p><mark>Master01</mark> 下载 kubernetes 安装包（1.32.3 需要更改为你看到的最新版本）：</p>\n<pre><code>[root@k8s-master01 ~]# wget https://dl.k8s.io/v1.32.0/kubernetes-server-linux-amd64.tar.gz\n</code></pre>\n<p>最新版获取地址：<a href=\"https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG/CHANGELOG-1.31.md\">https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG/</a></p>\n<p><mark>以下操作都在 master01 执行</mark></p>\n<p>下载 etcd 安装包：<a href=\"https://github.com/etcd-io/etcd/releases/\">https://github.com/etcd-io/etcd/releases/</a></p>\n<pre><code>[root@k8s-master01 ~]# wget https://github.com/etcd-io/etcd/releases/download/v3.5.16/etcd-v3.5.16-linux-amd64.tar.gz\n</code></pre>\n<p>解压 kubernetes 安装文件：</p>\n<pre><code>[root@k8s-master01 ~]# tar -xf kubernetes-server-linux-amd64.tar.gz  --strip-components=3 -C /usr/local/bin kubernetes/server/bin/kube&#123;let,ctl,-apiserver,-controller-manager,-scheduler,-proxy&#125;\n</code></pre>\n<p>解压 etcd 安装文件：</p>\n<pre><code>[root@k8s-master01 ~]#  tar -zxvf etcd-v3.5.16-linux-amd64.tar.gz --strip-components=1 -C /usr/local/bin etcd-v3.5.16-linux-amd64/etcd&#123;,ctl&#125;\n</code></pre>\n<p>版本查看：</p>\n<pre><code>[root@k8s-master01 ~]# kubelet --version\nKubernetes v1.32.3\n[root@k8s-master01 ~]# etcdctl version\netcdctl version: 3.5.16\nAPI version: 3.5\n</code></pre>\n<p>将组件发送到其他节点</p>\n<pre><code>MasterNodes='k8s-master02 k8s-master03'\nWorkNodes='k8s-node01 k8s-node02'\nfor NODE in $MasterNodes; do echo $NODE; scp /usr/local/bin/kube&#123;let,ctl,-apiserver,-controller-manager,-scheduler,-proxy&#125; $NODE:/usr/local/bin/; scp /usr/local/bin/etcd* $NODE:/usr/local/bin/; done\nfor NODE in $WorkNodes; do     scp /usr/local/bin/kube&#123;let,-proxy&#125; $NODE:/usr/local/bin/ ; done\n</code></pre>\n<p><mark>Master01 节点</mark>切换到 1.32.x 分支（其他版本可以切换到其他分支，.x 即可，不需要更改为具体的小版本）：</p>\n<pre><code>cd /root/k8s-ha-install &amp;&amp; git checkout manual-installation-v1.32.x\n</code></pre>\n<h4 id=\"5-生成证书\"><a class=\"anchor\" href=\"#5-生成证书\">#</a> 5 . 生成证书</h4>\n<p><em><mark>二进制安装最关键步骤，一步错误全盘皆输，一定要注意每个步骤都要是正确的</mark></em></p>\n<p><mark>Master01</mark> 下载生成证书工具（下载不成功可以去百度网盘）</p>\n<pre><code>wget &quot;https://pkg.cfssl.org/R1.2/cfssl_linux-amd64&quot; -O /usr/local/bin/cfssl\nwget &quot;https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64&quot; -O /usr/local/bin/cfssljson\nchmod +x /usr/local/bin/cfssl /usr/local/bin/cfssljson\n</code></pre>\n<h5 id=\"51-etcd证书\"><a class=\"anchor\" href=\"#51-etcd证书\">#</a> 5.1 Etcd 证书</h5>\n<p><mark>所有 Master 节点</mark>创建 etcd 证书目录：</p>\n<pre><code>mkdir /etc/etcd/ssl -p\n</code></pre>\n<p><mark>所有节点</mark>创建 kubernetes 相关目录：</p>\n<pre><code>mkdir -p /etc/kubernetes/pki\n</code></pre>\n<p><mark>Master01 节点</mark>生成 etcd 证书</p>\n<p>生成证书的 CSR（证书签名请求文件，配置了一些域名、公司、单位）文件：</p>\n<pre><code>[root@k8s-master01 pki]# cd /root/k8s-ha-install/pki\n\n# 生成etcd CA证书和CA证书的key\ncfssl gencert -initca etcd-ca-csr.json | cfssljson -bare /etc/etcd/ssl/etcd-ca\n\n\ncfssl gencert \\\n   -ca=/etc/etcd/ssl/etcd-ca.pem \\\n   -ca-key=/etc/etcd/ssl/etcd-ca-key.pem \\\n   -config=ca-config.json \\\n   -hostname=127.0.0.1,k8s-master01,k8s-master02,k8s-master03,192.168.1.71,192.168.1.72,192.168.1.73 \\\n   -profile=kubernetes \\\n   etcd-csr.json | cfssljson -bare /etc/etcd/ssl/etcd\n\n执行结果\n[INFO] generate received request\n \t[INFO] received CSR\n     [INFO] generating key: rsa-2048\n     [INFO] encoded CSR\n     [INFO] signed certificate with serial number     250230878926052708909595617022917808304837732033\n</code></pre>\n<p>将证书复制到其他 master 节点</p>\n<pre><code>MasterNodes='k8s-master02 k8s-master03'\n\nfor NODE in $MasterNodes; do\n     ssh $NODE &quot;mkdir -p /etc/etcd/ssl&quot;\n     for FILE in etcd-ca-key.pem  etcd-ca.pem  etcd-key.pem  etcd.pem; do\n       scp /etc/etcd/ssl/$&#123;FILE&#125; $NODE:/etc/etcd/ssl/$&#123;FILE&#125;\n     done\n done\n</code></pre>\n<h5 id=\"52-k8s组件证书\"><a class=\"anchor\" href=\"#52-k8s组件证书\">#</a> 5.2 K8s 组件证书</h5>\n<p><mark>Master01</mark> 生成 kubernetes CA 证书：</p>\n<pre><code>[root@k8s-master01 pki]# cd /root/k8s-ha-install/pki\n\ncfssl gencert -initca ca-csr.json | cfssljson -bare /etc/kubernetes/pki/ca\n</code></pre>\n<h6 id=\"521-apiserver证书\"><a class=\"anchor\" href=\"#521-apiserver证书\">#</a> 5.2.1 APIServer 证书</h6>\n<p>注意：10.96.0. 是 k8s service 的网段，如果说需要更改 k8s service 网段，那就需要更改 10.96.0.1</p>\n<pre><code>cfssl gencert   -ca=/etc/kubernetes/pki/ca.pem   -ca-key=/etc/kubernetes/pki/ca-key.pem   -config=ca-config.json   -hostname=10.96.0.1,192.168.1.70,127.0.0.1,kubernetes,kubernetes.default,kubernetes.default.svc,kubernetes.default.svc.cluster,kubernetes.default.svc.cluster.local,192.168.1.71,192.168.1.72,192.168.1.73   -profile=kubernetes   apiserver-csr.json | cfssljson -bare /etc/kubernetes/pki/apiserver\n</code></pre>\n<p>生成 apiserver 的聚合证书：：</p>\n<pre><code>cfssl gencert   -initca front-proxy-ca-csr.json | cfssljson -bare /etc/kubernetes/pki/front-proxy-ca \n\ncfssl gencert   -ca=/etc/kubernetes/pki/front-proxy-ca.pem   -ca-key=/etc/kubernetes/pki/front-proxy-ca-key.pem   -config=ca-config.json   -profile=kubernetes   front-proxy-client-csr.json | cfssljson -bare /etc/kubernetes/pki/front-proxy-client\n</code></pre>\n<p>返回结果（忽略警告）：</p>\n<pre><code>2020/12/11 18:15:28 [INFO] generate received request\n2020/12/11 18:15:28 [INFO] received CSR\n2020/12/11 18:15:28 [INFO] generating key: rsa-2048\n\n2020/12/11 18:15:28 [INFO] encoded CSR\n2020/12/11 18:15:28 [INFO] signed certificate with serial number 597484897564859295955894546063479154194995827845\n2020/12/11 18:15:28 [WARNING] This certificate lacks a &quot;hosts&quot; field. This makes it unsuitable for\nwebsites. For more information see the Baseline Requirements for the Issuance and Management\nof Publicly-Trusted Certificates, v.1.1.6, from the CA/Browser Forum (https://cabforum.org);\nspecifically, section 10.2.3 (&quot;Information Requirements&quot;).\n</code></pre>\n<h6 id=\"522-controllermanager\"><a class=\"anchor\" href=\"#522-controllermanager\">#</a> 5.2.2 ControllerManager</h6>\n<p>生成 controller-manage 的证书：</p>\n<pre><code class=\"language-\\\">cfssl gencert \\\n   -ca=/etc/kubernetes/pki/ca.pem \\\n   -ca-key=/etc/kubernetes/pki/ca-key.pem \\\n   -config=ca-config.json \\\n   -profile=kubernetes \\\n   manager-csr.json | cfssljson -bare /etc/kubernetes/pki/controller-manager\n\n注意：修改黄色部分的IP地址\n# set-cluster：设置一个集群项，\n\nkubectl config set-cluster kubernetes \\\n     --certificate-authority=/etc/kubernetes/pki/ca.pem \\\n     --embed-certs=true \\\n     --server=https://192.168.1.70:8443 \\\n     --kubeconfig=/etc/kubernetes/controller-manager.kubeconfig\n\n# 设置一个环境项，一个上下文\nkubectl config set-context system:kube-controller-manager@kubernetes \\\n    --cluster=kubernetes \\\n    --user=system:kube-controller-manager \\\n    --kubeconfig=/etc/kubernetes/controller-manager.kubeconfig\n\n# set-credentials 设置一个用户项\n\nkubectl config set-credentials system:kube-controller-manager \\\n     --client-certificate=/etc/kubernetes/pki/controller-manager.pem \\\n     --client-key=/etc/kubernetes/pki/controller-manager-key.pem \\\n     --embed-certs=true \\\n     --kubeconfig=/etc/kubernetes/controller-manager.kubeconfig\n\n\n# 使用某个环境当做默认环境\n\nkubectl config use-context system:kube-controller-manager@kubernetes \\\n     --kubeconfig=/etc/kubernetes/controller-manager.kubeconfig\n</code></pre>\n<h6 id=\"523-scheduler证书\"><a class=\"anchor\" href=\"#523-scheduler证书\">#</a> 5.2.3 Scheduler 证书</h6>\n<pre><code>cfssl gencert \\\n   -ca=/etc/kubernetes/pki/ca.pem \\\n   -ca-key=/etc/kubernetes/pki/ca-key.pem \\\n   -config=ca-config.json \\\n   -profile=kubernetes \\\n   scheduler-csr.json | cfssljson -bare /etc/kubernetes/pki/scheduler\n\n注意：修改黄色部分的IP地址\n\nkubectl config set-cluster kubernetes \\\n     --certificate-authority=/etc/kubernetes/pki/ca.pem \\\n     --embed-certs=true \\\n     --server=https://192.168.1.70:8443 \\\n     --kubeconfig=/etc/kubernetes/scheduler.kubeconfig\n\n\nkubectl config set-credentials system:kube-scheduler \\\n     --client-certificate=/etc/kubernetes/pki/scheduler.pem \\\n     --client-key=/etc/kubernetes/pki/scheduler-key.pem \\\n     --embed-certs=true \\\n     --kubeconfig=/etc/kubernetes/scheduler.kubeconfig\n\nkubectl config set-context system:kube-scheduler@kubernetes \\\n     --cluster=kubernetes \\\n     --user=system:kube-scheduler \\\n     --kubeconfig=/etc/kubernetes/scheduler.kubeconfig\n\nkubectl config use-context system:kube-scheduler@kubernetes \\\n     --kubeconfig=/etc/kubernetes/scheduler.kubeconfig\n</code></pre>\n<h6 id=\"524-生成管理员证书\"><a class=\"anchor\" href=\"#524-生成管理员证书\">#</a> 5.2.4 生成管理员证书</h6>\n<p>Kubectl /etc/Kubernetes/admin.conf ~/.kube/config</p>\n<pre><code>cfssl gencert \\\n   -ca=/etc/kubernetes/pki/ca.pem \\\n   -ca-key=/etc/kubernetes/pki/ca-key.pem \\\n   -config=ca-config.json \\\n   -profile=kubernetes \\\n   admin-csr.json | cfssljson -bare /etc/kubernetes/pki/admin\n\n注意：修改黄色部分的IP\n\nkubectl config set-cluster kubernetes     --certificate-authority=/etc/kubernetes/pki/ca.pem     --embed-certs=true     --server=https://192.168.1.70:8443     --kubeconfig=/etc/kubernetes/admin.kubeconfig\nkubectl config set-credentials kubernetes-admin     --client-certificate=/etc/kubernetes/pki/admin.pem     --client-key=/etc/kubernetes/pki/admin-key.pem     --embed-certs=true     --kubeconfig=/etc/kubernetes/admin.kubeconfig\n\nkubectl config set-context kubernetes-admin@kubernetes     --cluster=kubernetes     --user=kubernetes-admin     --kubeconfig=/etc/kubernetes/admin.kubeconfig\n\nkubectl config use-context kubernetes-admin@kubernetes     --kubeconfig=/etc/kubernetes/admin.kubeconfig\n</code></pre>\n<h6 id=\"525-创建serviceaccount证书\"><a class=\"anchor\" href=\"#525-创建serviceaccount证书\">#</a> 5.2.5 创建 ServiceAccount 证书</h6>\n<p>创建一对公钥，用来签发 ServiceAccount 的 Token：</p>\n<pre><code>openssl genrsa -out /etc/kubernetes/pki/sa.key 2048\n</code></pre>\n<p>返回结果：</p>\n<pre><code>Generating RSA private key, 2048 bit long modulus (2 primes)\n...................................................................................+++++\n...............+++++\ne is 65537 (0x010001)\n</code></pre>\n<pre><code> openssl rsa -in /etc/kubernetes/pki/sa.key -pubout -out /etc/kubernetes/pki/sa.pub\n</code></pre>\n<p>发送证书至其他节点：</p>\n<pre><code>for NODE in k8s-master02 k8s-master03; do \n  for FILE in $(ls /etc/kubernetes/pki | grep -v etcd); do \n    scp /etc/kubernetes/pki/$&#123;FILE&#125; $NODE:/etc/kubernetes/pki/$&#123;FILE&#125;;\n  done; \n  for FILE in admin.kubeconfig controller-manager.kubeconfig scheduler.kubeconfig; do \n    scp /etc/kubernetes/$&#123;FILE&#125; $NODE:/etc/kubernetes/$&#123;FILE&#125;;\n  done;\ndone\n</code></pre>\n<p>查看证书文件：</p>\n<pre><code>[root@k8s-master01 pki]# ls /etc/kubernetes/pki/\nadmin.csr      apiserver.csr      ca.csr      controller-manager.csr      front-proxy-ca.csr      front-proxy-client.csr      sa.key         scheduler-key.pem\nadmin-key.pem  apiserver-key.pem  ca-key.pem  controller-manager-key.pem  front-proxy-ca-key.pem  front-proxy-client-key.pem  sa.pub         scheduler.pem\nadmin.pem      apiserver.pem      ca.pem      controller-manager.pem      front-proxy-ca.pem      front-proxy-client.pem      scheduler.csr\n[root@k8s-master01 pki]# ls /etc/kubernetes/pki/ |wc -l\n23\n</code></pre>\n<h4 id=\"6-kubernetes组件配置\"><a class=\"anchor\" href=\"#6-kubernetes组件配置\">#</a> 6. Kubernetes 组件配置</h4>\n<h5 id=\"61-ecd配置\"><a class=\"anchor\" href=\"#61-ecd配置\">#</a> 6.1 Ecd 配置</h5>\n<p>Etcd 配置大致相同，注意修改每个 Master 节点的 etcd 配置的主机名和 IP 地址</p>\n<h6 id=\"611-master01\"><a class=\"anchor\" href=\"#611-master01\">#</a> 6.1.1 Master01</h6>\n<pre><code># vim /etc/etcd/etcd.config.yml\nname: 'k8s-master01'     # k8s-master01名称\ndata-dir: /var/lib/etcd\nwal-dir: /var/lib/etcd/wal\nsnapshot-count: 5000\nheartbeat-interval: 100\nelection-timeout: 1000\nquota-backend-bytes: 0\nlisten-peer-urls: 'https://192.168.1.71:2380'            # k8s-master01 IP\nlisten-client-urls: 'https://192.168.1.71:2379,http://127.0.0.1:2379'   # k8s-master01 IP\nmax-snapshots: 3\nmax-wals: 5\ncors:\ninitial-advertise-peer-urls: 'https://192.168.1.71:2380'  # k8s-master01 IP\nadvertise-client-urls: 'https://192.168.1.71:2379'        # k8s-master01 IP\ndiscovery:\ndiscovery-fallback: 'proxy'\ndiscovery-proxy:\ndiscovery-srv:\ninitial-cluster: 'k8s-master01=https://192.168.1.71:2380,k8s-master02=https://192.168.1.72:2380,k8s-master03=https://192.168.1.73:2380'     # k8s-master01、k8s-master02、k8s-master03 IP \ninitial-cluster-token: 'etcd-k8s-cluster'\ninitial-cluster-state: 'new'\nstrict-reconfig-check: false\nenable-v2: true\nenable-pprof: true\nproxy: 'off'\nproxy-failure-wait: 5000\nproxy-refresh-interval: 30000\nproxy-dial-timeout: 1000\nproxy-write-timeout: 5000\nproxy-read-timeout: 0\nclient-transport-security:\n  cert-file: '/etc/kubernetes/pki/etcd/etcd.pem'\n  key-file: '/etc/kubernetes/pki/etcd/etcd-key.pem'\n  client-cert-auth: true\n  trusted-ca-file: '/etc/kubernetes/pki/etcd/etcd-ca.pem'\n  auto-tls: true\npeer-transport-security:\n  cert-file: '/etc/kubernetes/pki/etcd/etcd.pem'\n  key-file: '/etc/kubernetes/pki/etcd/etcd-key.pem'\n  peer-client-cert-auth: true\n  trusted-ca-file: '/etc/kubernetes/pki/etcd/etcd-ca.pem'\n  auto-tls: true\ndebug: false\nlog-package-levels:\nlog-outputs: [default]\nforce-new-cluster: false\n</code></pre>\n<h6 id=\"612-master02\"><a class=\"anchor\" href=\"#612-master02\">#</a> 6.1.2 Master02</h6>\n<pre><code># vim /etc/etcd/etcd.config.yml\t\nname: 'k8s-master02'   # k8s-master02名称\ndata-dir: /var/lib/etcd\nwal-dir: /var/lib/etcd/wal\nsnapshot-count: 5000\nheartbeat-interval: 100\nelection-timeout: 1000\nquota-backend-bytes: 0\nlisten-peer-urls: 'https://192.168.1.72:2380'      # k8s-master02 IP\nlisten-client-urls: 'https://192.168.1.72:2379,http://127.0.0.1:2379'    # k8s-master02 IP\nmax-snapshots: 3\nmax-wals: 5\ncors:\ninitial-advertise-peer-urls: 'https://192.168.1.72:2380'    # k8s-master02 IP\nadvertise-client-urls: 'https://192.168.1.72:2379'     # k8s-master02 IP\ndiscovery:\ndiscovery-fallback: 'proxy'\ndiscovery-proxy:\ndiscovery-srv:\ninitial-cluster: 'k8s-master01=https://192.168.1.71:2380,k8s-master02=https://192.168.1.72:2380,k8s-master03=https://192.168.1.73:2380'             # k8s-master01、k8s-master02、k8s-master03 IP \ninitial-cluster-token: 'etcd-k8s-cluster'\ninitial-cluster-state: 'new'\nstrict-reconfig-check: false\nenable-v2: true\nenable-pprof: true\nproxy: 'off'\nproxy-failure-wait: 5000\nproxy-refresh-interval: 30000\nproxy-dial-timeout: 1000\nproxy-write-timeout: 5000\nproxy-read-timeout: 0\nclient-transport-security:\n  cert-file: '/etc/kubernetes/pki/etcd/etcd.pem'\n  key-file: '/etc/kubernetes/pki/etcd/etcd-key.pem'\n  client-cert-auth: true\n  trusted-ca-file: '/etc/kubernetes/pki/etcd/etcd-ca.pem'\n  auto-tls: true\npeer-transport-security:\n  cert-file: '/etc/kubernetes/pki/etcd/etcd.pem'\n  key-file: '/etc/kubernetes/pki/etcd/etcd-key.pem'\n  peer-client-cert-auth: true\n  trusted-ca-file: '/etc/kubernetes/pki/etcd/etcd-ca.pem'\n  auto-tls: true\ndebug: false\nlog-package-levels:\nlog-outputs: [default]\nforce-new-cluster: false\n</code></pre>\n<h6 id=\"613-master03\"><a class=\"anchor\" href=\"#613-master03\">#</a> 6.1.3 Master03</h6>\n<pre><code># vim /etc/etcd/etcd.config.yml\nname: 'k8s-master03'           # k8s-master03名称\ndata-dir: /var/lib/etcd\nwal-dir: /var/lib/etcd/wal\nsnapshot-count: 5000\nheartbeat-interval: 100\nelection-timeout: 1000\nquota-backend-bytes: 0\nlisten-peer-urls: 'https://192.168.1.73:2380'           # k8s-master03 IP\nlisten-client-urls: 'https://192.168.1.73:2379,http://127.0.0.1:2379'       # k8s-master03 IP\nmax-snapshots: 3\nmax-wals: 5\ncors:\ninitial-advertise-peer-urls: 'https://192.168.1.73:2380'      # k8s-master03 IP\nadvertise-client-urls: 'https://192.168.1.73:2379'            # k8s-master03 IP\ndiscovery:\ndiscovery-fallback: 'proxy'\ndiscovery-proxy:\ndiscovery-srv:\ninitial-cluster: 'k8s-master01=https://192.168.1.71:2380,k8s-master02=https://192.168.1.72:2380,k8s-master03=https://192.168.1.73:2380'                # k8s-master01、k8s-master02、k8s-master03 IP\ninitial-cluster-token: 'etcd-k8s-cluster'\ninitial-cluster-state: 'new'\nstrict-reconfig-check: false\nenable-v2: true\nenable-pprof: true\nproxy: 'off'\nproxy-failure-wait: 5000\nproxy-refresh-interval: 30000\nproxy-dial-timeout: 1000\nproxy-write-timeout: 5000\nproxy-read-timeout: 0\nclient-transport-security:\n  cert-file: '/etc/kubernetes/pki/etcd/etcd.pem'\n  key-file: '/etc/kubernetes/pki/etcd/etcd-key.pem'\n  client-cert-auth: true\n  trusted-ca-file: '/etc/kubernetes/pki/etcd/etcd-ca.pem'\n  auto-tls: true\npeer-transport-security:\n  cert-file: '/etc/kubernetes/pki/etcd/etcd.pem'\n  key-file: '/etc/kubernetes/pki/etcd/etcd-key.pem'\n  peer-client-cert-auth: true\n  trusted-ca-file: '/etc/kubernetes/pki/etcd/etcd-ca.pem'\n  auto-tls: true\ndebug: false\nlog-package-levels:\nlog-outputs: [default]\nforce-new-cluster: false\n</code></pre>\n<h6 id=\"614-启动etcd\"><a class=\"anchor\" href=\"#614-启动etcd\">#</a> 6.1.4 启动 Etcd</h6>\n<p><mark>所有 Master 节点</mark>创建 etcd service 并启动</p>\n<pre><code># vim /usr/lib/systemd/system/etcd.service\n[Unit]\nDescription=Etcd Service\nDocumentation=https://coreos.com/etcd/docs/latest/\nAfter=network.target\n\n[Service]\nType=notify\nExecStart=/usr/local/bin/etcd --config-file=/etc/etcd/etcd.config.yml\nRestart=on-failure\nRestartSec=10\nLimitNOFILE=65536\n\n[Install]\nWantedBy=multi-user.target\nAlias=etcd3.service\n</code></pre>\n<p><mark>所有 Master 节点</mark>创建 etcd 的证书目录：</p>\n<pre><code>mkdir /etc/kubernetes/pki/etcd\nln -s /etc/etcd/ssl/* /etc/kubernetes/pki/etcd/\nsystemctl daemon-reload\nsystemctl enable --now etcd\n</code></pre>\n<p>查看 etcd 状态：</p>\n<pre><code>export ETCDCTL_API=3\netcdctl --endpoints=&quot;192.168.1.73:2379,192.168.1.72:2379,192.168.1.71:2379&quot; --cacert=/etc/kubernetes/pki/etcd/etcd-ca.pem --cert=/etc/kubernetes/pki/etcd/etcd.pem --key=/etc/kubernetes/pki/etcd/etcd-key.pem  endpoint status --write-out=table\n</code></pre>\n<h5 id=\"62-apiserver配置\"><a class=\"anchor\" href=\"#62-apiserver配置\">#</a> 6.2 APIServer 配置</h5>\n<h6 id=\"621-master01\"><a class=\"anchor\" href=\"#621-master01\">#</a> 6.2.1 Master01</h6>\n<p>注意：本文档使用的 k8s service 网段为 10.96.0.0/16，该网段不能和宿主机的网段、Pod 网段的重复，请按需修改：</p>\n<pre><code>[root@k8s-master01 pki]# vim /usr/lib/systemd/system/kube-apiserver.service \n\n[Unit]\nDescription=Kubernetes API Server\nDocumentation=https://github.com/kubernetes/kubernetes\nAfter=network.target\n\n[Service]\nExecStart=/usr/local/bin/kube-apiserver \\\n      --v=2  \\\n      --allow-privileged=true  \\\n      --bind-address=0.0.0.0  \\\n      --secure-port=6443  \\\n      --advertise-address=192.168.1.71 \\\n      --service-cluster-ip-range=10.96.0.0/16  \\\n      --service-node-port-range=30000-32767  \\\n      --etcd-servers=https://192.168.1.71:2379,https://192.168.1.72:2379,https://192.168.1.73:2379 \\\n      --etcd-cafile=/etc/etcd/ssl/etcd-ca.pem  \\\n      --etcd-certfile=/etc/etcd/ssl/etcd.pem  \\\n      --etcd-keyfile=/etc/etcd/ssl/etcd-key.pem  \\\n      --client-ca-file=/etc/kubernetes/pki/ca.pem  \\\n      --tls-cert-file=/etc/kubernetes/pki/apiserver.pem  \\\n      --tls-private-key-file=/etc/kubernetes/pki/apiserver-key.pem  \\\n      --kubelet-client-certificate=/etc/kubernetes/pki/apiserver.pem  \\\n      --kubelet-client-key=/etc/kubernetes/pki/apiserver-key.pem  \\\n      --service-account-key-file=/etc/kubernetes/pki/sa.pub  \\\n      --service-account-signing-key-file=/etc/kubernetes/pki/sa.key  \\\n      --service-account-issuer=https://kubernetes.default.svc.cluster.local \\\n      --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname  \\\n      --enable-admission-plugins=NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,DefaultTolerationSeconds,NodeRestriction,ResourceQuota  \\\n      --authorization-mode=Node,RBAC  \\\n      --enable-bootstrap-token-auth=true  \\\n      --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.pem  \\\n      --proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.pem  \\\n      --proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client-key.pem  \\\n      --requestheader-allowed-names=aggregator  \\\n      --requestheader-group-headers=X-Remote-Group  \\\n      --requestheader-extra-headers-prefix=X-Remote-Extra-  \\\n      --requestheader-username-headers=X-Remote-User\n      # --token-auth-file=/etc/kubernetes/token.csv\n\nRestart=on-failure\nRestartSec=10s\nLimitNOFILE=65535\n\n[Install]\nWantedBy=multi-user.target\n</code></pre>\n<h6 id=\"622-master02\"><a class=\"anchor\" href=\"#622-master02\">#</a> 6.2.2 Master02</h6>\n<p>注意：本文档使用的 k8s service 网段为 10.96.0.0/16，该网段不能和宿主机的网段、Pod 网段的重复，请按需修改：</p>\n<pre><code>[root@k8s-master01 pki]# vim  /usr/lib/systemd/system/kube-apiserver.service \n\n[Unit]\nDescription=Kubernetes API Server\nDocumentation=https://github.com/kubernetes/kubernetes\nAfter=network.target\n\n[Service]\nExecStart=/usr/local/bin/kube-apiserver \\\n      --v=2  \\\n      --allow-privileged=true  \\\n      --bind-address=0.0.0.0  \\\n      --secure-port=6443  \\\n      --advertise-address=192.168.1.72 \\\n      --service-cluster-ip-range=10.96.0.0/16  \\\n      --service-node-port-range=30000-32767  \\\n      --etcd-servers=https://192.168.1.71:2379,https://192.168.1.72:2379,https://192.168.1.73:2379 \\\n      --etcd-cafile=/etc/etcd/ssl/etcd-ca.pem  \\\n      --etcd-certfile=/etc/etcd/ssl/etcd.pem  \\\n      --etcd-keyfile=/etc/etcd/ssl/etcd-key.pem  \\\n      --client-ca-file=/etc/kubernetes/pki/ca.pem  \\\n      --tls-cert-file=/etc/kubernetes/pki/apiserver.pem  \\\n      --tls-private-key-file=/etc/kubernetes/pki/apiserver-key.pem  \\\n      --kubelet-client-certificate=/etc/kubernetes/pki/apiserver.pem  \\\n      --kubelet-client-key=/etc/kubernetes/pki/apiserver-key.pem  \\\n      --service-account-key-file=/etc/kubernetes/pki/sa.pub  \\\n      --service-account-signing-key-file=/etc/kubernetes/pki/sa.key  \\\n      --service-account-issuer=https://kubernetes.default.svc.cluster.local \\\n      --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname  \\\n      --enable-admission-plugins=NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,DefaultTolerationSeconds,NodeRestriction,ResourceQuota  \\\n      --authorization-mode=Node,RBAC  \\\n      --enable-bootstrap-token-auth=true  \\\n      --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.pem  \\\n      --proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.pem  \\\n      --proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client-key.pem  \\\n      --requestheader-allowed-names=aggregator  \\\n      --requestheader-group-headers=X-Remote-Group  \\\n      --requestheader-extra-headers-prefix=X-Remote-Extra-  \\\n      --requestheader-username-headers=X-Remote-User\n\nRestart=on-failure\nRestartSec=10s\nLimitNOFILE=65535\n\n[Install]\nWantedBy=multi-user.target\n</code></pre>\n<h6 id=\"623-master03\"><a class=\"anchor\" href=\"#623-master03\">#</a> 6.2.3 Master03</h6>\n<p>注意：本文档使用的 k8s service 网段为 10.96.0.0/16，该网段不能和宿主机的网段、Pod 网段的重复，请按需修改：</p>\n<pre><code>[root@k8s-master01 pki]# vim  /usr/lib/systemd/system/kube-apiserver.service \n\n[Unit]\nDescription=Kubernetes API Server\nDocumentation=https://github.com/kubernetes/kubernetes\nAfter=network.target\n\n[Service]\nExecStart=/usr/local/bin/kube-apiserver \\\n      --v=2  \\\n      --allow-privileged=true  \\\n      --bind-address=0.0.0.0  \\\n      --secure-port=6443  \\\n      --advertise-address=192.168.1.73 \\\n      --service-cluster-ip-range=10.96.0.0/16  \\\n      --service-node-port-range=30000-32767  \\\n      --etcd-servers=https://192.168.1.71:2379,https://192.168.1.72:2379,https://192.168.1.73:2379 \\\n      --etcd-cafile=/etc/etcd/ssl/etcd-ca.pem  \\\n      --etcd-certfile=/etc/etcd/ssl/etcd.pem  \\\n      --etcd-keyfile=/etc/etcd/ssl/etcd-key.pem  \\\n      --client-ca-file=/etc/kubernetes/pki/ca.pem  \\\n      --tls-cert-file=/etc/kubernetes/pki/apiserver.pem  \\\n      --tls-private-key-file=/etc/kubernetes/pki/apiserver-key.pem  \\\n      --kubelet-client-certificate=/etc/kubernetes/pki/apiserver.pem  \\\n      --kubelet-client-key=/etc/kubernetes/pki/apiserver-key.pem  \\\n      --service-account-key-file=/etc/kubernetes/pki/sa.pub  \\\n      --service-account-signing-key-file=/etc/kubernetes/pki/sa.key  \\\n      --service-account-issuer=https://kubernetes.default.svc.cluster.local \\\n      --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname  \\\n      --enable-admission-plugins=NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,DefaultTolerationSeconds,NodeRestriction,ResourceQuota  \\\n      --authorization-mode=Node,RBAC  \\\n      --enable-bootstrap-token-auth=true  \\\n      --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.pem  \\\n      --proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.pem  \\\n      --proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client-key.pem  \\\n      --requestheader-allowed-names=aggregator  \\\n      --requestheader-group-headers=X-Remote-Group  \\\n      --requestheader-extra-headers-prefix=X-Remote-Extra-  \\\n      --requestheader-username-headers=X-Remote-User\n      # --token-auth-file=/etc/kubernetes/token.csv\n\nRestart=on-failure\nRestartSec=10s\nLimitNOFILE=65535\n\n[Install]\nWantedBy=multi-user.target\n</code></pre>\n<h6 id=\"624-启动apiserver\"><a class=\"anchor\" href=\"#624-启动apiserver\">#</a> 6.2.4 启动 apiserver</h6>\n<p><mark>所有 Master 节点</mark>开启 kube-apiserver：</p>\n<pre><code>systemctl daemon-reload &amp;&amp; systemctl enable --now kube-apiserver\n</code></pre>\n<p>检测 kube-server 状态：</p>\n<pre><code># systemctl status kube-apiserver\n\n● kube-apiserver.service – Kubernetes API Server\n   Loaded: loaded (/usr/lib/systemd/system/kube-apiserver.service; enabled; vendor preset: disabled)\n   Active: active (running) since Sat 2020-08-22 21:26:49 CST; 26s ago \n</code></pre>\n<p>如果系统日志有这些提示可以忽略:</p>\n<pre><code>Dec 11 20:51:15 k8s-master01 kube-apiserver: I1211 20:51:15.004739    7450 clientconn.go:948] ClientConn switching balancer to “pick_first”\nDec 11 20:51:15 k8s-master01 kube-apiserver: I1211 20:51:15.004843    7450 balancer_conn_wrappers.go:78] pickfirstBalancer: HandleSubConnStateChange: 0xc011bd4c80, &#123;CONNECTING &lt;nil&gt;&#125;\nDec 11 20:51:15 k8s-master01 kube-apiserver: I1211 20:51:15.010725    7450 balancer_conn_wrappers.go:78] pickfirstBalancer: HandleSubConnStateChange: 0xc011bd4c80, &#123;READY &lt;nil&gt;&#125;\nDec 11 20:51:15 k8s-master01 kube-apiserver: I1211 20:51:15.011370    7450 controlbuf.go:508] transport: loopyWriter.run returning. Connection error: desc = “transport is closing”\n</code></pre>\n<h5 id=\"63-controllermanage\"><a class=\"anchor\" href=\"#63-controllermanage\">#</a> 6.3 ControllerManage</h5>\n<p><mark>所有 Master 节点</mark>配置 kube-controller-manager service（所有 master 节点配置一样）</p>\n<p>注意：本文档使用的 k8s Pod 网段为 172.16.0.0/16，该网段不能和宿主机的网段、k8s Service 网段的重复，请按需修改：</p>\n<pre><code>[root@k8s-master01 pki]# vim /usr/lib/systemd/system/kube-controller-manager.service\n[Unit]\nDescription=Kubernetes Controller Manager\nDocumentation=https://github.com/kubernetes/kubernetes\nAfter=network.target\n\n[Service]\nExecStart=/usr/local/bin/kube-controller-manager \\\n      --v=2 \\\n      --root-ca-file=/etc/kubernetes/pki/ca.pem \\\n      --cluster-signing-cert-file=/etc/kubernetes/pki/ca.pem \\\n      --cluster-signing-key-file=/etc/kubernetes/pki/ca-key.pem \\\n      --service-account-private-key-file=/etc/kubernetes/pki/sa.key \\\n      --kubeconfig=/etc/kubernetes/controller-manager.kubeconfig \\\n      --authentication-kubeconfig=/etc/kubernetes/controller-manager.kubeconfig \\\n      --authorization-kubeconfig=/etc/kubernetes/controller-manager.kubeconfig \\\n      --leader-elect=true \\\n      --use-service-account-credentials=true \\\n      --node-monitor-grace-period=40s \\\n      --node-monitor-period=5s \\\n      --controllers=*,bootstrapsigner,tokencleaner \\\n      --allocate-node-cidrs=true \\\n      --cluster-cidr=172.16.0.0/16 \\\n      --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.pem \\\n      --node-cidr-mask-size=24\n      \nRestart=always\nRestartSec=10s\n\n[Install]\nWantedBy=multi-user.target\n</code></pre>\n<p><mark>所有 Master 节点</mark>启动 kube-controller-manager</p>\n<pre><code>[root@k8s-master01 pki]# systemctl daemon-reload\n\n[root@k8s-master01 pki]# systemctl enable --now kube-controller-manager\nCreated symlink /etc/systemd/system/multi-user.target.wants/kube-controller-manager.service → /usr/lib/systemd/system/kube-controller-manager.service.\n</code></pre>\n<p>查看启动状态</p>\n<pre><code>[root@k8s-master01 pki]# systemctl  status kube-controller-manager\n● kube-controller-manager.service – Kubernetes Controller Manager\n   Loaded: loaded (/usr/lib/ ubern/system/kube-controller-manager.service; enabled; vendor preset: disabled)\n Active: active (running) since Fri 2020-12-11 20:53:05 CST; 8s ago\n     Docs: https://github.com/  ubernetes/  ubernetes\n Main PID: 7518 (kube-controller)\n</code></pre>\n<h5 id=\"64-scheduler\"><a class=\"anchor\" href=\"#64-scheduler\">#</a> 6.4 Scheduler</h5>\n<p>所有 Master 节点配置 kube-scheduler service（所有 master 节点配置一样）</p>\n<pre><code>[root@k8s-master01 pki]# vim /usr/lib/systemd/system/kube-scheduler.service \n[Unit]\nDescription=Kubernetes Scheduler\nDocumentation=https://github.com/kubernetes/kubernetes\nAfter=network.target\n\n[Service]\nExecStart=/usr/local/bin/kube-scheduler \\\n      --v=2 \\\n      --leader-elect=true \\\n      --authentication-kubeconfig=/etc/kubernetes/scheduler.kubeconfig \\\n      --authorization-kubeconfig=/etc/kubernetes/scheduler.kubeconfig \\\n      --kubeconfig=/etc/kubernetes/scheduler.kubeconfig\n\nRestart=always\nRestartSec=10s\n\n[Install]\nWantedBy=multi-user.target\n</code></pre>\n<p>启动 scheduler：</p>\n<pre><code>[root@k8s-master01 pki]# systemctl daemon-reload\n\n[root@k8s-master01 pki]# systemctl enable --now kube-scheduler\nCreated symlink /etc/systemd/system/multi-user.target.wants/kube-scheduler.service → /usr/lib/systemd/system/kube-scheduler.service.\n[root@k8s-master01 pki]# systemctl status kube-scheduler\n● kube-scheduler.service - Kubernetes Scheduler\n   Loaded: loaded (/usr/lib/systemd/system/kube-scheduler.service; enabled; vendor preset: disabled)\n   Active: active (running) since Wed 2022-05-04 17:31:13 CST; 6s ago\n     Docs: https://github.com/kubernetes/kubernetes\n Main PID: 5815 (kube-scheduler)\n    Tasks: 9\n   Memory: 19.8M\n</code></pre>\n<h4 id=\"7-tls-bootstrapping配置\"><a class=\"anchor\" href=\"#7-tls-bootstrapping配置\">#</a> 7. TLS Bootstrapping 配置</h4>\n<p>只需要在<mark> Master01</mark> 创建 bootstrap</p>\n<p>注意： 修改黄色部分的 IP 地址</p>\n<pre><code>cd /root/k8s-ha-install/bootstrap\nkubectl config set-cluster kubernetes     --certificate-authority=/etc/kubernetes/pki/ca.pem     --embed-certs=true     --server=https://192.168.1.70:8443     --kubeconfig=/etc/kubernetes/bootstrap-kubelet.kubeconfig\nkubectl config set-credentials tls-bootstrap-token-user     --token=c8ad9c.2e4d610cf3e7426e --kubeconfig=/etc/kubernetes/bootstrap-kubelet.kubeconfig\nkubectl config set-context tls-bootstrap-token-user@kubernetes     --cluster=kubernetes     --user=tls-bootstrap-token-user     --kubeconfig=/etc/kubernetes/bootstrap-kubelet.kubeconfig\nkubectl config use-context tls-bootstrap-token-user@kubernetes     --kubeconfig=/etc/kubernetes/bootstrap-kubelet.kubeconfig\n\n[root@k8s-master01 bootstrap]# mkdir -p /root/.kube ; cp /etc/kubernetes/admin.kubeconfig /root/.kube/config\n</code></pre>\n<p>可以正常查询集群状态，才可以继续往下，否则不行，需要排查 k8s 组件是否有故障（只要有结果即可，如果返回不一样不影响）</p>\n<pre><code># kubectl get cs\nWarning: v1 ComponentStatus is deprecated in v1.19+\nNAME                 STATUS    MESSAGE   ERROR\ncontroller-manager   Healthy   ok        \nscheduler            Healthy   ok        \netcd-0               Healthy   ok\n</code></pre>\n<p>创建 bootstrap 相关资源：</p>\n<pre><code>[root@k8s-master01 bootstrap]# kubectl create -f bootstrap.secret.yaml \nsecret/bootstrap-token-c8ad9c created\nclusterrolebinding.rbac.authorization.k8s.io/kubelet-bootstrap created\nclusterrolebinding.rbac.authorization.k8s.io/node-autoapprove-bootstrap created\nclusterrolebinding.rbac.authorization.k8s.io/node-autoapprove-certificate-rotation created\nclusterrole.rbac.authorization.k8s.io/system:kube-apiserver-to-kubelet created\nclusterrolebinding.rbac.authorization.k8s.io/system:kube-apiserver created\n</code></pre>\n<h4 id=\"8-node节点配置\"><a class=\"anchor\" href=\"#8-node节点配置\">#</a> 8. Node 节点配置</h4>\n<h5 id=\"81-复制证书\"><a class=\"anchor\" href=\"#81-复制证书\">#</a> 8.1 复制证书</h5>\n<p><mark>Master01 节点</mark>复制证书至其他节点：</p>\n<pre><code>cd /etc/kubernetes/\n\nfor NODE in k8s-master02 k8s-master03 k8s-node01 k8s-node02; do\n     ssh $NODE mkdir -p /etc/kubernetes/pki\n     for FILE in pki/ca.pem pki/ca-key.pem pki/front-proxy-ca.pem bootstrap-kubelet.kubeconfig; do\n       scp /etc/kubernetes/$FILE $NODE:/etc/kubernetes/$&#123;FILE&#125;\n done\n done\n</code></pre>\n<p>执行结果：</p>\n<pre><code>ca.pem                                                                                                                                                                         100% 1407   459.5KB/s   00:00    \n…\nbootstrap-kubelet.kubeconfig                                                                                                                                                   100% 2291   685.4KB/s   00:00\n</code></pre>\n<h5 id=\"82-kubelet配置\"><a class=\"anchor\" href=\"#82-kubelet配置\">#</a> 8.2 Kubelet 配置</h5>\n<p><mark>所有节点</mark>创建 Kubelet 配置目录</p>\n<pre><code>mkdir -p /var/lib/kubelet /var/log/kubernetes /etc/systemd/system/kubelet.service.d /etc/kubernetes/manifests/\n</code></pre>\n<p><mark>所有节点</mark>配置 kubelet service</p>\n<pre><code>[root@k8s-master01 bootstrap]# vim  /usr/lib/systemd/system/kubelet.service\n\n[Unit]\nDescription=Kubernetes Kubelet\nDocumentation=https://github.com/kubernetes/kubernetes\n\n[Service]\nExecStart=/usr/local/bin/kubelet\n\nRestart=always\nStartLimitInterval=0\nRestartSec=10\n\n[Install]\nWantedBy=multi-user.target\n</code></pre>\n<p><mark>所有节点</mark>配置 kubelet service 的配置文件（也可以写到 kubelet.service）：</p>\n<pre><code># Runtime为Containerd\n# vim /etc/systemd/system/kubelet.service.d/10-kubelet.conf\n\n[Service]\nEnvironment=&quot;KUBELET_KUBECONFIG_ARGS=--bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.kubeconfig --kubeconfig=/etc/kubernetes/kubelet.kubeconfig&quot;\nEnvironment=&quot;KUBELET_SYSTEM_ARGS=--container-runtime-endpoint=unix:///run/containerd/containerd.sock&quot;\nEnvironment=&quot;KUBELET_CONFIG_ARGS=--config=/etc/kubernetes/kubelet-conf.yml&quot;\nEnvironment=&quot;KUBELET_EXTRA_ARGS=--node-labels=node.kubernetes.io/node='' &quot;\nExecStart=\nExecStart=/usr/local/bin/kubelet $KUBELET_KUBECONFIG_ARGS $KUBELET_CONFIG_ARGS $KUBELET_SYSTEM_ARGS $KUBELET_EXTRA_ARGS\n</code></pre>\n<p><mark>所有节点</mark>创建 kubelet 的配置文件</p>\n<p><em>注意：如果更改了 k8s 的 service 网段，需要更改 kubelet-conf.yml 的 clusterDNS: 配置，改成 k8s Service 网段的第十个地址，比如 10.96.0.10</em></p>\n<pre><code>[root@k8s-master01 bootstrap]# vim /etc/kubernetes/kubelet-conf.yml\n\napiVersion: kubelet.config.k8s.io/v1beta1\nkind: KubeletConfiguration\naddress: 0.0.0.0\nport: 10250\nreadOnlyPort: 10255\nauthentication:\n  anonymous:\n    enabled: false\n  webhook:\n    cacheTTL: 2m0s\n    enabled: true\n  x509:\n    clientCAFile: /etc/kubernetes/pki/ca.pem\nauthorization:\n  mode: Webhook\n  webhook:\n    cacheAuthorizedTTL: 5m0s\n    cacheUnauthorizedTTL: 30s\ncgroupDriver: systemd\ncgroupsPerQOS: true\nclusterDNS:\n- 10.96.0.10\nclusterDomain: cluster.local\ncontainerLogMaxFiles: 5\ncontainerLogMaxSize: 10Mi\ncontentType: application/vnd.kubernetes.protobuf\ncpuCFSQuota: true\ncpuManagerPolicy: none\ncpuManagerReconcilePeriod: 10s\nenableControllerAttachDetach: true\nenableDebuggingHandlers: true\nenforceNodeAllocatable:\n- pods\neventBurst: 10\neventRecordQPS: 5\nevictionHard:\n  imagefs.available: 15%\n  memory.available: 100Mi\n  nodefs.available: 10%\n  nodefs.inodesFree: 5%\nevictionPressureTransitionPeriod: 5m0s\nfailSwapOn: true\nfileCheckFrequency: 20s\nhairpinMode: promiscuous-bridge\nhealthzBindAddress: 127.0.0.1\nhealthzPort: 10248\nhttpCheckFrequency: 20s\nimageGCHighThresholdPercent: 85\nimageGCLowThresholdPercent: 80\nimageMinimumGCAge: 2m0s\niptablesDropBit: 15\niptablesMasqueradeBit: 14\nkubeAPIBurst: 10\nkubeAPIQPS: 5\nmakeIPTablesUtilChains: true\nmaxOpenFiles: 1000000\nmaxPods: 110\nnodeStatusUpdateFrequency: 10s\noomScoreAdj: -999\npodPidsLimit: -1\nregistryBurst: 10\nregistryPullQPS: 5\nresolvConf: /etc/resolv.conf\nrotateCertificates: true\nruntimeRequestTimeout: 2m0s\nserializeImagePulls: true\nstaticPodPath: /etc/kubernetes/manifests\nstreamingConnectionIdleTimeout: 4h0m0s\nsyncFrequency: 1m0s\nvolumeStatsAggPeriod: 1m0s\n</code></pre>\n<p>启动<mark>所有节点</mark> kubelet</p>\n<pre><code>systemctl daemon-reload\nsystemctl enable --now kubelet\n</code></pre>\n<p>此时系统日志 /var/log/messages**** 显示只有如下两种信息为正常 ****，安装 calico 后即可恢复</p>\n<pre><code>Unable to update cni config: no networks found in /etc/cni/net.d\n</code></pre>\n<p><a href=\"https://imgse.com/i/pE2ZkVK\"><img loading=\"lazy\" data-src=\"https://s21.ax1x.com/2025/04/10/pE2ZkVK.png\" alt=\"pE2ZkVK.png\" /></a></p>\n<p><em>如果有很多报错日志，或者有大量看不懂的报错，说明 kubelet 的配置有误，需要检查 kubelet 配置</em></p>\n<p>Master01 查看集群状态 (Ready 或 NotReady 都正常)</p>\n<pre><code>[root@k8s-master01 bootstrap]# kubectl get node\n</code></pre>\n<h5 id=\"83-kube-proxy配置\"><a class=\"anchor\" href=\"#83-kube-proxy配置\">#</a> 8.3 kube-proxy 配置</h5>\n<p><em>注意，如果不是高可用集群，192.168.1.70:8443 改为 master01 的地址，8443 改为 apiserver 的端口，默认是 6443</em></p>\n<p>生成 kube-proxy 的证书，以下操作只在<mark> Master01</mark> 执行</p>\n<pre><code>cd /root/k8s-ha-install/pki\ncfssl gencert \\\n   -ca=/etc/kubernetes/pki/ca.pem \\\n   -ca-key=/etc/kubernetes/pki/ca-key.pem \\\n   -config=ca-config.json \\\n   -profile=kubernetes \\\n   kube-proxy-csr.json | cfssljson -bare /etc/kubernetes/pki/kube-proxy\n\nkubectl config set-cluster kubernetes \\\n     --certificate-authority=/etc/kubernetes/pki/ca.pem \\\n     --embed-certs=true \\\n     --server=https://192.168.1.70:8443 \\\n     --kubeconfig=/etc/kubernetes/kube-proxy.kubeconfig\n\n\nkubectl config set-credentials system:kube-proxy \\\n     --client-certificate=/etc/kubernetes/pki/kube-proxy.pem \\\n     --client-key=/etc/kubernetes/pki/kube-proxy-key.pem \\\n     --embed-certs=true \\\n     --kubeconfig=/etc/kubernetes/kube-proxy.kubeconfig\n\nkubectl config set-context system:kube-proxy@kubernetes \\\n     --cluster=kubernetes \\\n     --user=system:kube-proxy \\\n     --kubeconfig=/etc/kubernetes/kube-proxy.kubeconfig\n\n\nkubectl config use-context system:kube-proxy@kubernetes \\\n     --kubeconfig=/etc/kubernetes/kube-proxy.kubeconfig\n</code></pre>\n<p>将 kubeconfig 发送至其他节点</p>\n<pre><code>for NODE in k8s-master02 k8s-master03; do\n     scp /etc/kubernetes/kube-proxy.kubeconfig  $NODE:/etc/kubernetes/kube-proxy.kubeconfig\n done\n\nfor NODE in k8s-node01 k8s-node02; do\n     scp /etc/kubernetes/kube-proxy.kubeconfig $NODE:/etc/kubernetes/kube-proxy.kubeconfig\n done\n</code></pre>\n<p><mark>所有节点</mark>添加 kube-proxy 的配置和 service 文件：</p>\n<pre><code>vim /usr/lib/systemd/system/kube-proxy.service\n\n[Unit]\nDescription=Kubernetes Kube Proxy\nDocumentation=https://github.com/kubernetes/kubernetes\nAfter=network.target\n\n[Service]\nExecStart=/usr/local/bin/kube-proxy \\\n  --config=/etc/kubernetes/kube-proxy.yaml \\\n  --v=2\n\nRestart=always\nRestartSec=10s\n\n[Install]\nWantedBy=multi-user.target\n</code></pre>\n<p>如果更改了集群 Pod 的网段，需要更改 kube-proxy.yaml 的 clusterCIDR 为自己的 Pod 网段：</p>\n<pre><code>vim /etc/kubernetes/kube-proxy.yaml\n\napiVersion: kubeproxy.config.k8s.io/v1alpha1\nbindAddress: 0.0.0.0\nclientConnection:\n  acceptContentTypes: &quot;&quot;\n  burst: 10\n  contentType: application/vnd.kubernetes.protobuf\n  kubeconfig: /etc/kubernetes/kube-proxy.kubeconfig\n  qps: 5\nclusterCIDR: 172.16.0.0/16 \nconfigSyncPeriod: 15m0s\nconntrack:\n  max: null\n  maxPerCore: 32768\n  min: 131072\n  tcpCloseWaitTimeout: 1h0m0s\n  tcpEstablishedTimeout: 24h0m0s\nenableProfiling: false\nhealthzBindAddress: 0.0.0.0:10256\nhostnameOverride: &quot;&quot;\niptables:\n  masqueradeAll: false\n  masqueradeBit: 14\n  minSyncPeriod: 0s\n  syncPeriod: 30s\nipvs:\n  masqueradeAll: true\n  minSyncPeriod: 5s\n  scheduler: &quot;rr&quot;\n  syncPeriod: 30s\nkind: KubeProxyConfiguration\nmetricsBindAddress: 127.0.0.1:10249\nmode: &quot;ipvs&quot;\nnodePortAddresses: null\noomScoreAdj: -999\nportRange: &quot;&quot;\nudpIdleTimeout: 250ms\n</code></pre>\n<p><mark>所有节点</mark>启动 kube-proxy</p>\n<pre><code>[root@k8s-master01 k8s-ha-install]# systemctl daemon-reload\n[root@k8s-master01 k8s-ha-install]# systemctl enable --now kube-proxy\nCreated symlink /etc/systemd/system/multi-user.target.wants/kube-proxy.service → /usr/lib/systemd/system/kube-proxy.service.\n</code></pre>\n<p>此时系统日志 /var/log/messages**** 显示只有如下两种信息为正常 ****，安装 calico 后即可恢复</p>\n<pre><code>Unable to update cni config: no networks found in /etc/cni/net.d\n</code></pre>\n<p><a href=\"https://imgse.com/i/pE2ZkVK\"><img loading=\"lazy\" data-src=\"https://s21.ax1x.com/2025/04/10/pE2ZkVK.png\" alt=\"pE2ZkVK.png\" /></a></p>\n<h4 id=\"9-calico组件的安装\"><a class=\"anchor\" href=\"#9-calico组件的安装\">#</a> 9. Calico 组件的安装</h4>\n<p>以下步骤只在 master01 执行：</p>\n<pre><code>cd /root/k8s-ha-install/calico/\n</code></pre>\n<p>更改 calico 的网段，主要需要将红色部分的网段，改为自己的 Pod 网段</p>\n<pre><code>sed -i &quot;s#POD_CIDR#172.16.0.0/16#g&quot; calico.yaml\n</code></pre>\n<p><em>检查网段是自己的 Pod 网段， grep &quot;IPV4POOL_CIDR&quot; calico.yaml  -A 1</em></p>\n<p>查看容器和节点状态：</p>\n<pre><code>[root@k8s-master01 calico]# kubectl get po -n kube-system\nNAME                                       READY   STATUS    RESTARTS      AGE\ncalico-kube-controllers-66686fdb54-mk2g6   1/1     Running   1 (20s ago)   85s\ncalico-node-8fxqp                          1/1     Running   0             85s\ncalico-node-8nkfl                          1/1     Running   0             86s\ncalico-node-pmpf4                          1/1     Running   0             86s\ncalico-node-vnlk7                          1/1     Running   0             86s\ncalico-node-xpchb                          1/1     Running   0             85s\ncalico-typha-67c6dc57d6-259t8              1/1     Running   0             86s\n</code></pre>\n<p><em>如果容器状态异常可以使用 kubectl describe 或者 kubectl logs 查看容器的日志</em></p>\n<ol>\n<li>Kubectl logs -f POD_NAME -n kube-system</li>\n<li>Kubectl logs -f POD_NAME -c upgrade-ipam -n kube-system</li>\n</ol>\n<h4 id=\"10-安装coredns\"><a class=\"anchor\" href=\"#10-安装coredns\">#</a> 10. 安装 CoreDNS</h4>\n<pre><code>cd /root/k8s-ha-install/\n</code></pre>\n<p>如果更改了 k8s service 的网段需要将 coredns 的 serviceIP 改成 k8s service 网段的第十个 IP</p>\n<pre><code>COREDNS_SERVICE_IP=`kubectl get svc | grep kubernetes | awk '&#123;print $3&#125;'`0\nsed -i &quot;s#KUBEDNS_SERVICE_IP#$&#123;COREDNS_SERVICE_IP&#125;#g&quot; CoreDNS/coredns.yaml\n</code></pre>\n<p>安装 coredns</p>\n<pre><code>[root@k8s-master01 k8s-ha-install]# kubectl  create -f CoreDNS/coredns.yaml \nserviceaccount/coredns created\nclusterrole.rbac.authorization.k8s.io/system:coredns created\nclusterrolebinding.rbac.authorization.k8s.io/system:coredns created\nconfigmap/coredns created\ndeployment.apps/coredns created\nservice/kube-dns created\n</code></pre>\n<h4 id=\"11-metrics部署\"><a class=\"anchor\" href=\"#11-metrics部署\">#</a> 11. Metrics 部署</h4>\n<p>在新版的 Kubernetes 中系统资源的采集均使用 Metrics-server，可以通过 Metrics 采集节点和 Pod 的内存、磁盘、CPU 和网络的使用率。</p>\n<p>以下操作均在<mark> master01 节点</mark>执行，安装 metrics server:</p>\n<pre><code>cd /root/k8s-ha-install/metrics-server\nkubectl  create -f . \n\nserviceaccount/metrics-server created\nclusterrole.rbac.authorization.k8s.io/system:aggregated-metrics-reader created\nclusterrole.rbac.authorization.k8s.io/system:metrics-server created\nrolebinding.rbac.authorization.k8s.io/metrics-server-auth-reader created\nclusterrolebinding.rbac.authorization.k8s.io/metrics-server:system:auth-delegator created\nclusterrolebinding.rbac.authorization.k8s.io/system:metrics-server created\nservice/metrics-server created\ndeployment.apps/metrics-server created\napiservice.apiregistration.k8s.io/v1beta1.metrics.k8s.io created\n</code></pre>\n<p>等待 metrics server 启动然后查看状态：</p>\n<pre><code># kubectl  top node\nNAME           CPU(cores)   CPU%   MEMORY(bytes)   MEMORY%   \nk8s-master01   231m         5%     1620Mi          42%       \nk8s-master02   274m         6%     1203Mi          31%       \nk8s-master03   202m         5%     1251Mi          32%       \nk8s-node01     69m          1%     667Mi           17%       \nk8s-node02     73m          1%     650Mi           16%\n</code></pre>\n<p>如果有如下报错，可以等待 10 分钟后，再次查看：</p>\n<pre><code>Error from server (ServiceUnavailable): the server is currently unable to handle the request (get nodes.metrics.k8s.io)\n</code></pre>\n<h4 id=\"12-dashboard部署\"><a class=\"anchor\" href=\"#12-dashboard部署\">#</a> 12. Dashboard 部署</h4>\n<h5 id=\"121-安装dashboard\"><a class=\"anchor\" href=\"#121-安装dashboard\">#</a> 12.1 安装 Dashboard</h5>\n<p>Dashboard 用于展示集群中的各类资源，同时也可以通过 Dashboard 实时查看 Pod 的日志和在容器中执行一些命令等。</p>\n<pre><code>cd /root/k8s-ha-install/dashboard/\n\n[root@k8s-master01 dashboard]# kubectl  create -f .\nserviceaccount/admin-user created\nclusterrolebinding.rbac.authorization.k8s.io/admin-user created\nnamespace/kubernetes-dashboard created\nserviceaccount/kubernetes-dashboard created\nservice/kubernetes-dashboard created\nsecret/kubernetes-dashboard-certs created\nsecret/kubernetes-dashboard-csrf created\nsecret/kubernetes-dashboard-key-holder created\nconfigmap/kubernetes-dashboard-settings created\nrole.rbac.authorization.k8s.io/kubernetes-dashboard created\nclusterrole.rbac.authorization.k8s.io/kubernetes-dashboard created\nrolebinding.rbac.authorization.k8s.io/kubernetes-dashboard created\nclusterrolebinding.rbac.authorization.k8s.io/kubernetes-dashboard created\ndeployment.apps/kubernetes-dashboard created\nservice/dashboard-metrics-scraper created\ndeployment.apps/dashboard-metrics-scraper created\n</code></pre>\n<h5 id=\"122-登录dashboard\"><a class=\"anchor\" href=\"#122-登录dashboard\">#</a> 12.2 登录 dashboard</h5>\n<p>在谷歌浏览器（Chrome）启动文件中加入启动参数，用于解决无法访问 Dashboard 的问题，参考下图：</p>\n<pre><code>--test-type --ignore-certificate-errors\n</code></pre>\n<p><a href=\"https://imgse.com/i/pEgWfHJ\"><img loading=\"lazy\" data-src=\"https://s21.ax1x.com/2025/04/09/pEgWfHJ.png\" alt=\"pEgWfHJ.png\" /></a></p>\n<p>更改 dashboard 的 svc 为 NodePort:</p>\n<pre><code>kubectl edit svc kubernetes-dashboard -n kubernetes-dashboard\n</code></pre>\n<p><a href=\"https://imgse.com/i/pEgW5NR\"><img loading=\"lazy\" data-src=\"https://s21.ax1x.com/2025/04/09/pEgW5NR.png\" alt=\"pEgW5NR.png\" /></a></p>\n<p><em>将 ClusterIP 更改为 NodePort（如果已经为 NodePort 忽略此步骤）</em></p>\n<p>查看端口号：</p>\n<pre><code>[root@k8s-master01 ~]# kubectl get svc kubernetes-dashboard -n kubernetes-dashboard\nNAME                   TYPE       CLUSTER-IP     EXTERNAL-IP   PORT(S)         AGE\nkubernetes-dashboard   NodePort   10.96.139.11   &lt;none&gt;        443:32409/TCP   24h\n</code></pre>\n<p>根据自己的实例端口号，通过任意安装了 kube-proxy 的宿主机的 IP + 端口即可访问到 dashboard：</p>\n<p>访问 Dashboard：<a href=\"https://192.168.181.129:31106\">https://192.168.1.71:32409</a> （把 IP 地址和端口改成你自己的）选择登录方式为令牌（即 token 方式），参考下图：</p>\n<p><a href=\"https://imgse.com/i/pEgW736\"><img loading=\"lazy\" data-src=\"https://s21.ax1x.com/2025/04/09/pEgW736.png\" alt=\"pEgW736.png\" /></a></p>\n<p>创建登录 Token：</p>\n<pre><code>kubectl create token admin-user -n kube-system\n</code></pre>\n<p>将 token 值输入到令牌后，单击登录即可访问 Dashboard，参考下图：</p>\n<p><a href=\"https://imgse.com/i/pEgfPv8\"><img loading=\"lazy\" data-src=\"https://s21.ax1x.com/2025/04/09/pEgfPv8.png\" alt=\"pEgfPv8.png\" /></a></p>\n<h4 id=\"14-containerd配置镜像加速\"><a class=\"anchor\" href=\"#14-containerd配置镜像加速\">#</a> 14. Containerd 配置镜像加速</h4>\n<pre><code># vim /etc/containerd/config.toml\n#添加以下配置镜像加速服务\n       [plugins.&quot;io.containerd.grpc.v1.cri&quot;.registry.mirrors.&quot;docker.io&quot;]\n        endpoint=[&quot;https://dockerproxy.com&quot;, &quot;https://mirror.baidubce.com&quot;,&quot;https://ccr.ccs.tencentyun.com&quot;,&quot;https://docker.m.daocloud.io&quot;,&quot;https://docker.nju.edu.cn&quot;,&quot;https://docker.mirrors.ustc.edu.cn&quot;,&quot;https://registry-1.docker.io&quot;, &quot;https://hbv0b596.mirror.aliyuncs.com&quot;]\n       [plugins.&quot;io.containerd.grpc.v1.cri&quot;.registry.mirrors.&quot;registry.k8s.io&quot;]\n        endpoint=[&quot;https://dockerproxy.com&quot;, &quot;https://mirror.baidubce.com&quot;,&quot;https://ccr.ccs.tencentyun.com&quot;,&quot;https://docker.m.daocloud.io&quot;,&quot;https://docker.nju.edu.cn&quot;,&quot;https://docker.mirrors.ustc.edu.cn&quot;,&quot;https://hbv0b596.mirror.aliyuncs.com&quot;, &quot;https://k8s.m.daocloud.io&quot;, &quot;https://docker.mirrors.ustc.edu.cn&quot;,&quot;https://hub-mirror.c.163.com&quot;]\n</code></pre>\n<p>所有节点重新启动 Containerd：</p>\n<pre><code># systemctl daemon-reload\n# systemctl restart containerd\n</code></pre>\n<h4 id=\"15-docker配置镜像加速\"><a class=\"anchor\" href=\"#15-docker配置镜像加速\">#</a> 15. Docker 配置镜像加速</h4>\n<pre><code># sudo mkdir -p /etc/docker\n# sudo tee /etc/docker/daemon.json &lt;&lt;-'EOF'\n&#123;\n  &quot;registry-mirrors&quot;: [\n\t  &quot;https://docker.credclouds.com&quot;,\n\t  &quot;https://k8s.credclouds.com&quot;,\n\t  &quot;https://quay.credclouds.com&quot;,\n\t  &quot;https://gcr.credclouds.com&quot;,\n\t  &quot;https://k8s-gcr.credclouds.com&quot;,\n\t  &quot;https://ghcr.credclouds.com&quot;,\n\t  &quot;https://do.nark.eu.org&quot;,\n\t  &quot;https://docker.m.daocloud.io&quot;,\n\t  &quot;https://docker.nju.edu.cn&quot;,\n\t  &quot;https://docker.mirrors.sjtug.sjtu.edu.cn&quot;,\n\t  &quot;https://docker.1panel.live&quot;,\n\t  &quot;https://docker.rainbond.cc&quot;\n  ], \n  &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;] \n&#125;\nEOF\n</code></pre>\n<p>所有节点重新启动 Docker：</p>\n<pre><code># systemctl daemon-reload\n# systemctl enable --now docker\n</code></pre>\n<p><em>本文出自于：<a href=\"https://edu.51cto.com/course/23845.html\">https://edu.51cto.com/course/23845.html</a></em></p>\n",
            "tags": [
                "Kubernetes"
            ]
        },
        {
            "id": "http://xuyong.cn/posts/2628187572.html",
            "url": "http://xuyong.cn/posts/2628187572.html",
            "title": "MySQL运维DBA应用与实践",
            "date_published": "2025-04-09T14:02:40.000Z",
            "content_html": "<h3 id=\"mysql运维dba应用与实践\"><a class=\"anchor\" href=\"#mysql运维dba应用与实践\">#</a> MySQL 运维 DBA 应用与实践</h3>\n<h4 id=\"1日志\"><a class=\"anchor\" href=\"#1日志\">#</a> 1. 日志</h4>\n<p>在任何一种数据库中，都会有各种各样的日志，这些日志记录了数据库运行的各个方面。可以帮助数据库管理员追踪数据库曾经发生的一些事情。</p>\n<p>对于 MySQL 数据库，提供了四种不同的日志帮助我们追踪。</p>\n<ul>\n<li>\n<p>错误日志</p>\n</li>\n<li>\n<p>二进制日志</p>\n</li>\n<li>\n<p>查询日志</p>\n</li>\n<li>\n<p>慢查询日志</p>\n</li>\n</ul>\n<h5 id=\"11-错误日志\"><a class=\"anchor\" href=\"#11-错误日志\">#</a> 1.1 错误日志</h5>\n<p>错误日志是 MySQL 中最重要的日志之一，它记录了当 mysqld (MySQL 服务) 启动和停止时，以及服务器在运行过程中发生任何严重错误时的相关信息。当数据库出现任何故障导致无法正常使用时，建议首先查看此日志。</p>\n<p>该日志是默认开启的，默认存放目录 /var/log/，默认的日志文件名为 mysqld.log。查看日志位置；</p>\n<pre><code>mysql&gt; show variables like '%log_error%';\n+---------------------+---------------------+\n| Variable_name       | Value               |\n+---------------------+---------------------+\n| binlog_error_action | ABORT_SERVER        |\n| log_error           | /var/log/mysqld.log |\n| log_error_verbosity | 3                   |\n+---------------------+---------------------+\n</code></pre>\n<h5 id=\"12-二进制日志\"><a class=\"anchor\" href=\"#12-二进制日志\">#</a> 1.2 二进制日志</h5>\n<p>二进制日志 (BINLOG) 记录了所有的 DDL (数据定义语言) 语句和 DML (数据操纵语言) 语句，但不包括数据查询（SELECT、 SHOW）语句。</p>\n<p>作用:</p>\n<p>①. 灾难时的数据恢复；</p>\n<p>②. MySQL 的主从复制。</p>\n<p>在 MySQL5.7 版本中，默认二进制日志是关闭着的，涉及到的参数如下:</p>\n<h6 id=\"121-开启-bin-log记录\"><a class=\"anchor\" href=\"#121-开启-bin-log记录\">#</a> 1.2.1 开启 bin-log 记录</h6>\n<pre><code>1.1改修配置文件\n[root@db01 ~]# vim /etc/my.cnf\nserver-id=1\nlog-bin=mysql-bin\nmax_binlog_size=500M\nexpire_logs_days=15\n\n1.2查看是否开启binlog.\nmysql&gt; show variables like 'log_%';\n+----------------------------------------+--------------------------------+\n| Variable_name                          | Value                          |\n+----------------------------------------+--------------------------------+\n| log_bin                                | ON                             |\n| log_bin_basename                       | /var/lib/mysql/mysql-bin       |\n| log_bin_index                          | /var/lib/mysql/mysql-bin.index |\n| log_bin_trust_function_creators        | OFF                            |\n| log_bin_use_v1_row_events              | OFF                            |\n| log_builtin_as_identified_by_password  | OFF                            |\n| log_error                              | /var/log/mysqld.log            |\n| log_error_verbosity                    | 3                              |\n| log_output                             | FILE                           |\n| log_queries_not_using_indexes          | OFF                            |\n| log_slave_updates                      | OFF                            |\n| log_slow_admin_statements              | OFF                            |\n| log_slow_slave_statements              | OFF                            |\n| log_statements_unsafe_for_binlog       | ON                             |\n| log_syslog                             | OFF                            |\n| log_syslog_facility                    | daemon                         |\n| log_syslog_include_pid                 | ON                             |\n| log_syslog_tag                         |                                |\n| log_throttle_queries_not_using_indexes | 0                              |\n| log_timestamps                         | UTC                            |\n| log_warnings                           | 2                              |\n+----------------------------------------+--------------------------------+\n\n1.3查看binlog\nmysql&gt; show binary logs;\n+------------------+-----------+\n| Log_name         | File_size |\n+------------------+-----------+\n| mysql-bin.000001 |     36825 |\n| mysql-bin.000002 |    200464 |\n| mysql-bin.000003 |    419809 |\n+------------------+-----------+\n\n1.4查看binlog日志保存天数 \n# 0表示永久保留，expire_logs_days：保留指定日期范围内的binlog历史日志，上示例设置的15天内\nmysql&gt; show variables like 'expire_logs_days';\n+------------------+-------+\n| Variable_name    | Value |\n+------------------+-------+\n| expire_logs_days | 15    |\n+------------------+-------+\n1 row in set (0.00 sec)\n\n1.5查看binlog日志保存大小\n#max_binlog_size：bin log日志每达到设定大小后，会使用新的bin log日志。如mysql-bin.000002达到500M后，创建并使用mysql-bin.000003文件作为日志记录。\nmysql&gt; show variables like 'max_binlog_size';\n+-----------------+-----------+\n| Variable_name   | Value     |\n+-----------------+-----------+\n| max_binlog_size | 524288000 |\n+-----------------+-----------+\n\n1.6手动执行flush logs\n#将会new一个新文件用于记录binlog\nmysql&gt; flush logs;\n\n1.7手动清理binlog\n#将mysql-bin.000010之前的日志清理掉\nmysql&gt; purge binary logs to 'mysql-bin.000010';\nQuery OK, 0 rows affected (0.01 sec)\n\n#删除2022-04-21 18:08:00之前的binlog日志\nmysql&gt; purge binary logs before '2022-04-21 18:08:00';\n\n#清除全部binlog\nmysql&gt; reset master;\n</code></pre>\n<h6 id=\"122-日志格式\"><a class=\"anchor\" href=\"#122-日志格式\">#</a> <strong>1.2.2 日志格式</strong></h6>\n<p>MySQL 服务器中提供了多种格式来记录二进制日志，具体格式及特点如下：</p>\n<table>\n<thead>\n<tr>\n<th><strong>日志格式</strong></th>\n<th><strong>含义</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>STATEMENT</td>\n<td>基于 SQL 语句的日志记录，记录的是 SQL 语句，对数据进行修改的 SQL 都会记录在日志文件中。</td>\n</tr>\n<tr>\n<td>ROW</td>\n<td>基于行的日志记录，记录的是每一行的数据变更。(默认)</td>\n</tr>\n<tr>\n<td>MIXED</td>\n<td>混合了 STATEMENT 和 ROW 两种格式，默认采用 STATEMENT, 在某些特殊情况下会自动切换为 ROW 进行记录。</td>\n</tr>\n</tbody>\n</table>\n<pre><code>mysql&gt; show variables like 'binlog_format';\n+---------------+-------+\n| Variable_name | Value |\n+---------------+-------+\n| binlog_format | ROW   |\n+---------------+-------+\n</code></pre>\n<p>由于日志是以二进制方式存储的，不能直接读取，需要通过二进制日志查询工具 <code>mysqlbinlog</code>  来查看，具体语法:</p>\n<pre><code>mysqlbinlog [ 参数选项] logfilename\n参数选项:\n\t-d\t\t\t指定数据库名称，只列出指定的数据库相关操作。\n\t-o\t\t\t忽略掉日志中的前n行命令。\n\t-v\t\t\t将行事件(数据变更)重构为SQL语句\n\t-vv\t\t\t将行事件(数据变更)重构为SQL语句，并输出注释信息\n</code></pre>\n<pre><code>mysql&gt; use zh;\nDatabase changed\nmysql&gt; show tables;\n+----------------+\n| Tables_in_zh   |\n+----------------+\n| account        |\n| course         |\n| dept           |\n| emp            |\n| score          |\n| student        |\n| student_course |\n| tb_user        |\n| tb_user_edu    |\n| user           |\n| user1          |\n+----------------+\n11 rows in set (0.00 sec)\n\nmysql&gt;  update tb_user_edu set university = &quot;北京大学&quot;;\nQuery OK, 4 rows affected (0.00 sec)\nRows matched: 4  Changed: 4  Warnings: 0\n\n#二进制日志查看\n[root@db01 ~]# mysqlbinlog -v /var/lib/mysql/mysql-bin.000001 \n</code></pre>\n<h6 id=\"123-修改binlog格式\"><a class=\"anchor\" href=\"#123-修改binlog格式\">#</a> 1.2.3 修改 binlog 格式</h6>\n<pre><code>[root@db01 ~]# vim /etc/my.cnf\n...\nbinlog_format=STATEMENT\n...\n[root@db01 ~]# systemctl restart mysqld\n\nmysql&gt;  update tb_user_edu set university = '清华大学';\n[root@db01 ~]# mysqlbinlog -v /var/lib/mysql/mysql-bin.000002 \n...\nSET TIMESTAMP=1701440373/*!*/;\nupdate tb_user_edu set university = '清华大学'\n...\n</code></pre>\n<h5 id=\"13-查询日志\"><a class=\"anchor\" href=\"#13-查询日志\">#</a> 1.3 查询日志</h5>\n<p>查询日志中记录了客户端的所有操作语句，而二进制日志不包含查询数据的 SQL 语句。默认情况下，<strong>查询日志是未开启的</strong>。如果需要开启查询日志，可以设置以下配置︰</p>\n<pre><code>mysql&gt; show variables like '%general%';\n+------------------+-------------------------+\n| Variable_name    | Value                   |\n+------------------+-------------------------+\n| general_log      | OFF                     |\n| general_log_file | /var/lib/mysql/db01.log |\n+------------------+-------------------------+\n2 rows in set (0.00 sec)\n\n#开启查询日志功能\n[root@db01 ~]# cat /etc/my.cnf\ngeneral_log=1\ngeneral_log_file=/var/lib/mysql/mysql_query.log \n[root@db01 ~]# systemctl restart mysqld\n\n[root@db01 ~]# tail -f /var/lib/mysql/mysql_query.log \n2023-12-01T14:31:28.554384Z\t    2 Field List\tstudent \n2023-12-01T14:31:28.554743Z\t    2 Field List\tstudent_course \n2023-12-01T14:31:35.737041Z\t    2 Query\tshow variables like '%general%'\n2023-12-01T14:31:37.345179Z\t    2 Query\tshow variables like '%general%'\n2023-12-01T14:32:17.593471Z\t    2 Query\tSELECT DATABASE()\n2023-12-01T14:32:17.593651Z\t    2 Init DB\tzh\n2023-12-01T14:32:25.249258Z\t    2 Query\tselect * from emp\n</code></pre>\n<h5 id=\"14-慢查询日志\"><a class=\"anchor\" href=\"#14-慢查询日志\">#</a> 1.4 慢查询日志</h5>\n<p>慢查询<a href=\"https://so.csdn.net/so/search?q=%E6%97%A5%E5%BF%97%E8%AE%B0%E5%BD%95&amp;spm=1001.2101.3001.7020\">日志记录</a>了所有执行时间超过参数 <code>long_ query_time</code>  设置值并且扫描记录数不小于 <code>min_examined_row_limit</code>  的所有的 SQL 语句的日志，默认未开启。<strong> <code>long_query_time</code>  默认为 10 秒，最小为 0，精度可以到微秒。</strong></p>\n<pre><code>[root@db01 ~]# vim /etc/my.cnf\n#慢查询日志\nslow_query_log=on\n##执行时间参数\nlong_query_time=2\n# 若没有指定，默认名字为hostname_slow.log\nslow_query_log_file = /var/lib/mysql/slow-query.log\n[root@db01 ~]# systemctl restart mysqld\n\n#制造慢查询并执行\nmysql&gt; select sleep(3);\n[root@db01 ~]# tail -f /var/lib/mysql/slow-query.log \n/usr/sbin/mysqld, Version: 5.7.43-log (MySQL Community Server (GPL)). started with:\nTcp port: 0  Unix socket: /var/lib/mysql/mysql.sock\nTime                 Id Command    Argument\n# Time: 2023-12-01T14:47:57.763735Z\n# User@Host: root[root] @ localhost []  Id:     2\n# Query_time: 3.001229  Lock_time: 0.000000 Rows_sent: 1  Rows_examined: 0\nuse zh;\nSET timestamp=1701442077;\nselect sleep(3);\n</code></pre>\n<p>默认情况下，不会记录管理语句，也不会记录不使用索引进行查找的查询。可以使用 <code>log_slow_admin_statements</code>  和更改此行为 <code>log_queries_not_using_indexes</code> , 如下所述。</p>\n<pre><code>#记录执行较慢的管理语句\nlog_slow_admin_statements = 1\n#记录执行较慢的未使用索引的语句\nlog_queries_not_using_indexes = 1\n</code></pre>\n<h4 id=\"2-主从复制\"><a class=\"anchor\" href=\"#2-主从复制\">#</a> 2. 主从复制</h4>\n<h5 id=\"21-主从复制的概述\"><a class=\"anchor\" href=\"#21-主从复制的概述\">#</a> 2.1 主从复制的概述</h5>\n<p>主从复制是指将<strong>主数据库的 DDL 和 DML 操作</strong>通过<strong>二进制日志</strong>传到<strong>从库服务器</strong>中，然后在从库上对这些日志重新执行 (也叫重做) ，从而使得从库和主库的数据保持同步。</p>\n<p><a href=\"https://imgse.com/i/pEgO0Mj\"><img loading=\"lazy\" data-src=\"https://s21.ax1x.com/2025/04/09/pEgO0Mj.png\" alt=\"pEgO0Mj.png\" /></a></p>\n<p>MySQL 支持一台主库同时向多台从库进行复制，从库同时也可以作为其他从服务器的主库， 实现链状复制。</p>\n<p>MySQL 复制的有点主要包含以下三个方面：</p>\n<ol>\n<li>主库出现问题，可以快速切换到从库提供服务；</li>\n<li>实现读写分离，降低主库的访问压力；（如果增删改对主库 查询对从库）</li>\n<li>可以在从库中执行备份，以避免备份期间影响主库服务。</li>\n</ol>\n<h5 id=\"22-主从复制的原理\"><a class=\"anchor\" href=\"#22-主从复制的原理\">#</a> 2.2 主从复制的原理</h5>\n<p><a href=\"https://imgse.com/i/pEgOdzQ\"><img loading=\"lazy\" data-src=\"https://s21.ax1x.com/2025/04/09/pEgOdzQ.png\" alt=\"pEgOdzQ.png\" /></a></p>\n<p>从上图来看，复制分成三步：</p>\n<ol>\n<li>Master 主库在事务提交时，会把数据变更记录在二进制日志文件 Binlog 中。</li>\n<li>从库 IO 线程读取主库的二进制日志文件 Binlog，写入到从库的中继日志 Relay Log。</li>\n<li>slave 重做中继日志中的事件，SQL 线程将改变反映它自己的数据。</li>\n</ol>\n<h5 id=\"23-主从复制的搭建\"><a class=\"anchor\" href=\"#23-主从复制的搭建\">#</a> 2.3 主从复制的搭建</h5>\n<p><strong>主从复制的搭建步骤</strong>：</p>\n<ol>\n<li>准备主从复制服务器环境</li>\n<li>完成主库配置</li>\n<li>完成从库配置</li>\n</ol>\n<h6 id=\"231-服务器准备\"><a class=\"anchor\" href=\"#231-服务器准备\">#</a> 2.3.1 服务器准备</h6>\n<p><a href=\"https://imgse.com/i/pEgODLn\"><img loading=\"lazy\" data-src=\"https://s21.ax1x.com/2025/04/09/pEgODLn.png\" alt=\"pEgODLn.png\" /></a></p>\n<h6 id=\"232-主库配置\"><a class=\"anchor\" href=\"#232-主库配置\">#</a> 2.3.2 主库配置</h6>\n<p><strong>#1. 安装 MySQL</strong></p>\n<pre><code>#1、关闭防火墙、selinux、环境配置\n[root@db01 ~]# hostnamectl set-hostname db01\n[root@db01 ~]# systemctl stop firewalld\n[root@db01 ~]# systemctl disable firewalld\n[root@db01 ~]# sed -i 's/^SELINUX=enforcing/SELINUX=disabled/g' /etc/sysconfig/selinux\n[root@db01 ~]# sed -i 's/^SELINUX=enforcing/SELINUX=disabled/g' /etc/selinux/config\n[root@db01 ~]# yum install net-tools vim tree lrzsz wget unzip dos2unix bash-completion  lsof ntp ntpdate git -y\n[root@db01 ~]# yum update -y --exclude=kernel* &amp;&amp; reboot\n[root@db01 ~]# echo 'Asia/Shanghai' &gt;/etc/timezone\n[root@db01 ~]# ntpdate time2.aliyun.com\n[root@db01 ~]# crontab -e\n*/5 * * * * /usr/sbin/ntpdate time2.aliyun.com &amp;&gt; /dev/nul\n[root@db01 ~]# mkdir /soft /data /scripts /backup\n\n#2、安装Mysql5.7\n[root@db01 ~]# yum install -y mysql-community-server\n[root@db01 ~]# systemctl start mysqld &amp;&amp; systemctl enable mysqld\n\n[root@db01 ~]# mysql -uroot -p$(awk '/temporary password/&#123;print $NF&#125;' /var/log/mysqld.log)\nmysql&gt; ALTER USER 'root'@'localhost' IDENTIFIED BY 'passwd';\nmysql&gt; grant all on *.* to 'root'@'192.168.1.%' identified by 'passwd';\n\n#3、允许root用户在任何地方进行远程登录，并具有所有库任何操作权限，具体操作如下：\nmysql -u root -p&quot;youpass&quot;\nmysql&gt;GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'passwd' WITH GRANT OPTION;\nFLUSH PRIVILEGES;\n\n#4.配置主库\n[root@db01 ~]# vim /etc/my.cnf\nserver-id=1                #mysql服务ID，保证整个集群环境中唯一， 取值范围: 1 - 2^&#123;32&#125;-1\nlog-bin=mysql-bin          #启动二进制日志\nread-only=0                #是否只读,1代表只读, 0代表读写\n#binlog-ignore-db=mysql    #忽略的数据，指不需要同步的数据库\n#binlog-do-db=db01         #指定同步的数据库\n[root@db01 ~]# systemctl restart mysqld\n\n#5.创建repl用户，并设置密码，该用户可在任意主机连接该MySQL服务\nmysql&gt; grant replication slave on *.* to 'repl'@'%' identified by 'passwd';\n\n#6.查看master位置点\nmysql&gt; show master status;        \n+------------------+----------+--------------+------------------+-------------------+\n| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |\n+------------------+----------+--------------+------------------+-------------------+\n| mysql-bin.000006 |      889 |              |                  |                   |\n+------------------+----------+--------------+------------------+-------------------+\n1 row in set (0.00 sec)\n</code></pre>\n<h6 id=\"233-从库配置\"><a class=\"anchor\" href=\"#233-从库配置\">#</a> 2.3.3 从库配置</h6>\n<table>\n<thead>\n<tr>\n<th>参数名</th>\n<th>含义</th>\n<th><strong>8.0.23 之前</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>SOURCE_HOST</td>\n<td>主库 IP 地址</td>\n<td>MASTER_HOST</td>\n</tr>\n<tr>\n<td>SOURCE_USER</td>\n<td>连接主库的用户名</td>\n<td>MASTER_USER</td>\n</tr>\n<tr>\n<td>SOURCE_PASSWORD</td>\n<td>连接主库的密码</td>\n<td>MASTER_PASSWORD</td>\n</tr>\n<tr>\n<td>SOURCE_LOG FILE</td>\n<td>binlog 日志文件名</td>\n<td>MASTER LOG_FILE</td>\n</tr>\n<tr>\n<td>SOURCE_LOG POS</td>\n<td>binlog 日志文件位置</td>\n<td>MASTER_LOG_POS</td>\n</tr>\n</tbody>\n</table>\n<pre><code>#1.配置从库\n[root@db02 ~]# vim /etc/my.cnf\nserver-id=2           #mysql服务ID\nread-only=1           #是否只读,1代表只读, 0代表读写\n[root@db02 ~]# systemctl restart mysqld\n\n#2..配置从服务器，连接主服务器\nmysql&gt; change master to master_host='192.168.40.150',master_user='repl',master_password='passwd',master_log_file='mysql-bin.000006',master_log_pos=889;\n\n#3.开启从库\nmysql&gt; start slave;\nQuery OK, 0 rows affected (0.00 sec)\n\n#4.检查主从复制状态\nmysql&gt; show slave status\\G\n*************************** 1. row ***************************\n               Slave_IO_State: Waiting for master to send event\n                  Master_Host: 192.168.40.150\n                  Master_User: repl\n                  Master_Port: 3306\n                Connect_Retry: 60\n              Master_Log_File: mysql-bin.000006\n          Read_Master_Log_Pos: 889\n               Relay_Log_File: db02-relay-bin.000002\n                Relay_Log_Pos: 320\n        Relay_Master_Log_File: mysql-bin.000006\n             Slave_IO_Running: Yes\n            Slave_SQL_Running: Yes\n              Replicate_Do_DB: \n          Replicate_Ignore_DB: \n           Replicate_Do_Table: \n       Replicate_Ignore_Table: \n      Replicate_Wild_Do_Table: \n  Replicate_Wild_Ignore_Table: \n                   Last_Errno: 0\n                   Last_Error: \n                 Skip_Counter: 0\n          Exec_Master_Log_Pos: 889\n              Relay_Log_Space: 526\n              Until_Condition: None\n               Until_Log_File: \n                Until_Log_Pos: 0\n           Master_SSL_Allowed: No\n           Master_SSL_CA_File: \n           Master_SSL_CA_Path: \n              Master_SSL_Cert: \n            Master_SSL_Cipher: \n               Master_SSL_Key: \n        Seconds_Behind_Master: 0\nMaster_SSL_Verify_Server_Cert: No\n                Last_IO_Errno: 0\n                Last_IO_Error: \n               Last_SQL_Errno: 0\n               Last_SQL_Error: \n  Replicate_Ignore_Server_Ids: \n             Master_Server_Id: 1\n                  Master_UUID: 9b911bea-43e6-11ee-b239-000c29074f5d\n             Master_Info_File: /var/lib/mysql/master.info\n                    SQL_Delay: 0\n          SQL_Remaining_Delay: NULL\n      Slave_SQL_Running_State: Slave has read all relay log; waiting for more updates\n           Master_Retry_Count: 86400\n                  Master_Bind: \n      Last_IO_Error_Timestamp: \n     Last_SQL_Error_Timestamp: \n               Master_SSL_Crl: \n           Master_SSL_Crlpath: \n           Retrieved_Gtid_Set: \n            Executed_Gtid_Set: \n                Auto_Position: 0\n         Replicate_Rewrite_DB: \n                 Channel_Name: \n           Master_TLS_Version: \n1 row in set (0.00 sec)\n</code></pre>\n<h4 id=\"3-分库分表\"><a class=\"anchor\" href=\"#3-分库分表\">#</a> 3. <a href=\"https://so.csdn.net/so/search?q=%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8&amp;spm=1001.2101.3001.7020\">分库分表</a></h4>\n<h5 id=\"31-分库分表介绍\"><a class=\"anchor\" href=\"#31-分库分表介绍\">#</a> 3.1 分库分表介绍</h5>\n<h6 id=\"311-现在的问题\"><a class=\"anchor\" href=\"#311-现在的问题\">#</a> 3.1.1 现在的问题</h6>\n<p><strong>单数据库</strong></p>\n<p>所有数据都是存放在一个<a href=\"https://so.csdn.net/so/search?q=%E6%95%B0%E6%8D%AE%E5%BA%93%E6%96%87%E4%BB%B6&amp;spm=1001.2101.3001.7020\">数据库文件</a>里的，经过常年累月，内存不足了怎么办？</p>\n<p><a href=\"https://imgse.com/i/pEgOyd0\"><img loading=\"lazy\" data-src=\"https://s21.ax1x.com/2025/04/09/pEgOyd0.png\" alt=\"pEgOyd0.png\" /></a></p>\n<p>随着互联网及移动互联网的发展，应用系统的数据量也是成指数式增长，若采用单数据库进行数据存储，存在以下性能瓶颈：</p>\n<p>IO 瓶颈：热点数据太多，数据库缓存不足，产生大量磁盘 IO，效率较低。请求数据太多，带宽不够，网络 IO 瓶颈。<br />\nCPU 瓶颈： 排序、分组、连接查询、聚合统计等 SQL 会耗费大量的 CPU 资源，请求数太多，CPU 出现瓶颈。</p>\n<p><a href=\"https://imgse.com/i/pEgO6oV\"><img loading=\"lazy\" data-src=\"https://s21.ax1x.com/2025/04/09/pEgO6oV.png\" alt=\"pEgO6oV.png\" /></a></p>\n<p><strong>分库分表的中心思想：<br />\n将数据分散存储，使得单一数据库 / 表的数据量变小来缓解单一数据库的性能问题，从而达到提升数据库性能的目的。</strong></p>\n<h6 id=\"312-拆分策略\"><a class=\"anchor\" href=\"#312-拆分策略\">#</a> 3.1.2 拆分策略</h6>\n<p><img loading=\"lazy\" data-src=\"https://img-blog.csdnimg.cn/e1f3b20cb856474eaec049096d9fbdd9.png#pic_center\" alt=\"在这里插入图片描述\" /></p>\n<h6 id=\"313-垂直拆分策略\"><a class=\"anchor\" href=\"#313-垂直拆分策略\">#</a> 3.1.3 垂直拆分策略</h6>\n<p><img loading=\"lazy\" data-src=\"https://img-blog.csdnimg.cn/4912fad133d84e638b3f0ba0a6827238.png#pic_center\" alt=\"在这里插入图片描述\" /></p>\n<p>特点:</p>\n<ol>\n<li>每个库的表结构都不一样。</li>\n<li>每个库的数据也不一样 。</li>\n<li>所有，库的并集是全量数据。</li>\n</ol>\n<p><img loading=\"lazy\" data-src=\"https://img-blog.csdnimg.cn/8d6d88eb551f415a9edc9dcf79352140.png#pic_center\" alt=\"在这里插入图片描述\" /></p>\n<p>特点:</p>\n<ol>\n<li>每个表的结构都不一样。</li>\n<li>每个表的数据也术一样，一般通过一列 (主键 / 外键) 关联。</li>\n<li>所有表的并集是全量数据。</li>\n</ol>\n<h6 id=\"314-水平拆分策略\"><a class=\"anchor\" href=\"#314-水平拆分策略\">#</a> 3.1.4 水平拆分策略</h6>\n<p><img loading=\"lazy\" data-src=\"https://img-blog.csdnimg.cn/d1f4ddf5d43f49538395ff16be70410f.png#pic_center\" alt=\"在这里插入图片描述\" /></p>\n<p>水平分库：以 “字段” 为依据，改为以 “行（记录）” 为依据。讲一个库的数据拆分到多个库</p>\n<p>特点：</p>\n<ol>\n<li>每个库的表结构都一样。</li>\n<li>每个库的数据都不一样。</li>\n<li>所有库的并集是全量数据。</li>\n</ol>\n<p><img loading=\"lazy\" data-src=\"https://img-blog.csdnimg.cn/a0f66e9cebc14bcabd67e4d038d2e1d1.png#pic_center\" alt=\"在这里插入图片描述\" /></p>\n<p>特点：</p>\n<ol>\n<li>每个表的表结构都一样 。</li>\n<li>每个表的数据都不一样 。</li>\n<li>所有表的并集是全量数据。</li>\n</ol>\n<p><img loading=\"lazy\" data-src=\"https://img-blog.csdnimg.cn/1506ad73a5fb408988fec987ba0b6282.png#pic_center\" alt=\"在这里插入图片描述\" /></p>\n<ul>\n<li>shardingJDBC：基于 AOP 原理，在应用程序中对本地执行的 SQL 进行拦截，解析、改写、路由处理。需要自行编码配置实现，只支持 java 语言，性能较高。</li>\n<li>MyCat：数据库分库分表中间件，不用调整代码即可实现分库分表，支持多种语言，性能不及前者。</li>\n</ul>\n<p><img loading=\"lazy\" data-src=\"https://img-blog.csdnimg.cn/32abcd34fd5742cb91944c1402918500.png#pic_center\" alt=\"在这里插入图片描述\" /></p>\n<h5 id=\"32-mycat概述\"><a class=\"anchor\" href=\"#32-mycat概述\">#</a> 3.2 Mycat 概述</h5>\n<p>Mycat 是开源的、活跃的、基于 Java 语言编写的<strong> MySQL 数据库中间件</strong>。可以像使用 mysql 一样来使用 mycat，对于开发人员来说根本感觉不到 mycat 的存在。</p>\n<p><img loading=\"lazy\" data-src=\"https://img-blog.csdnimg.cn/ee2bc7bf90354c73bcb89ca8aa0fa141.png#pic_center\" alt=\"在这里插入图片描述\" /></p>\n<p>优势：</p>\n<ul>\n<li>性能可靠稳定</li>\n<li>强大的技术团队</li>\n<li>体系完善</li>\n<li>社区活跃</li>\n</ul>\n<p>Mycat 是采用 java 语言开发的开源的数据库中间件，支持 Windows 和 Linux 运行环境，下面介绍 MyCat 的 Linux 中的环境搭建。 我们需要在准备好的服务器中安装如下软件。</p>\n<table>\n<thead>\n<tr>\n<th>服务器</th>\n<th>安装软件</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>192.168.40.213</td>\n<td>JDK、Mycat</td>\n<td>MyCat 中间件服务器</td>\n</tr>\n<tr>\n<td>192.168.40.210</td>\n<td>MySQL</td>\n<td>分片服务器</td>\n</tr>\n<tr>\n<td>192.168.40.211</td>\n<td>MySQL</td>\n<td>分片服务器</td>\n</tr>\n<tr>\n<td>192.168.40.212</td>\n<td>MySQL</td>\n<td>分片服务器</td>\n</tr>\n</tbody>\n</table>\n<p>JDK 安装</p>\n<pre><code>#解压jdk\n[root@mycat ~]# tar xf jdk-8u371-linux-x64.tar.gz -C /usr/local\n[root@mycat ~]# ln -s /usr/local/jdk1.8.0_371/ /usr/local/jdk\n\n# 添加环境变量\n[root@mycat ~]# vim /etc/profile.d/jdk.sh \nexport JAVA_HOME=/usr/local/jdk\nexport PATH=$PATH:$JAVA_HOME/bin\nexport JRE_HOME=$JAVA_HOME/jre \nexport CLASSPATH=$JAVA_HOME/lib/:$JRE_HOME/lib/\n\n[root@mycat ~]# source /etc/profile\n[root@mycat ~]# java -version\n</code></pre>\n<p>Mycat 安装</p>\n<pre><code>[root@mycat ~]# tar xf Mycat-server-1.6-RELEASE-20161028204710-linux.tar.gz -C /usr/local/\n[root@mycat ~]# ll /usr/local/mycat/\ntotal 12\ndrwxr-xr-x 2 root root  190 Dec  2 22:15 bin\ndrwxrwxrwx 2 root root    6 Mar  1  2016 catlet\ndrwxrwxrwx 4 root root 4096 Dec  2 22:15 conf\ndrwxr-xr-x 2 root root 4096 Dec  2 22:15 lib\ndrwxrwxrwx 2 root root    6 Oct 28  2016 logs\n-rwxrwxrwx 1 root root  217 Oct 28  2016 version.txt\n\n#上传jar包\n[root@mycat ~]# rz /usr/local/mycat/lib/mysql-connector-java-8.0.25.jar\n[root@mycat lib]# chmod 777 mysql-connector-java-8.0.25.jar \n</code></pre>\n<p><img loading=\"lazy\" data-src=\"https://img-blog.csdnimg.cn/1271af61dd794d77bf062037a7bd9207.png#pic_center\" alt=\"在这里插入图片描述\" /></p>\n<p><img loading=\"lazy\" data-src=\"https://img-blog.csdnimg.cn/9e8d0d07b6984b58a4205da0e0aad689.png#pic_center\" alt=\"在这里插入图片描述\" /></p>\n<h6 id=\"321-mycat入门\"><a class=\"anchor\" href=\"#321-mycat入门\">#</a> 3.2.1 Mycat 入门</h6>\n<p>由于 tb_gorder 表中数据量很大，磁盘 IO 及容量都到达了瓶颈，现在需要对 tb_order 表进行数据分片，分为三个数据节点，每一个节点主机位于不同的服务器上，具体的结构，参考下图：</p>\n<p><img loading=\"lazy\" data-src=\"https://img-blog.csdnimg.cn/7a17499312664b0dbe44f2f712ddf566.png#pic_center\" alt=\"在这里插入图片描述\" /></p>\n<p><img loading=\"lazy\" data-src=\"https://img-blog.csdnimg.cn/883c1a5153274f409fe1235f9348dc5d.png#pic_center\" alt=\"在这里插入图片描述\" /></p>\n<h6 id=\"322-mycat配置\"><a class=\"anchor\" href=\"#322-mycat配置\">#</a> 3.2.2 Mycat 配置</h6>\n<p><img loading=\"lazy\" data-src=\"https://img-blog.csdnimg.cn/f1965885c11542f8a0006e9be3b6f6a1.png#pic_center\" alt=\"在这里插入图片描述\" /></p>\n<pre><code>[root@mycat ~]# cat /usr/local/mycat/conf/schema.xml \n&lt;?xml version=&quot;1.0&quot;?&gt;\n&lt;!DOCTYPE mycat:schema SYSTEM &quot;schema.dtd&quot;&gt;\n&lt;mycat:schema xmlns:mycat=&quot;http://io.mycat/&quot;&gt;\n\t&lt;schema name=&quot;DB01&quot; checkSQLschema=&quot;true&quot; sqlMaxLimit=&quot;100&quot;&gt;\n\t\t&lt;table name=&quot;TB_ORDER&quot; dataNode=&quot;dn1,dn2,dn3&quot; rule=&quot;auto-sharding-long&quot; /&gt;\n\t&lt;/schema&gt;\n\t\n\t&lt;dataNode name=&quot;dn1&quot; dataHost=&quot;dhost1&quot; database=&quot;db01&quot; /&gt;\n\t&lt;dataNode name=&quot;dn2&quot; dataHost=&quot;dhost2&quot; database=&quot;db01&quot; /&gt;\n\t&lt;dataNode name=&quot;dn3&quot; dataHost=&quot;dhost3&quot; database=&quot;db01&quot; /&gt;\n\t\n\t&lt;dataHost name=&quot;dhost1&quot; maxCon=&quot;1000&quot; minCon=&quot;10&quot; balance=&quot;0&quot;\n\t\t\t  writeType=&quot;0&quot; dbType=&quot;mysql&quot; dbDriver=&quot;jdbc&quot; switchType=&quot;1&quot;  slaveThreshold=&quot;100&quot;&gt;\n\t\t&lt;heartbeat&gt;select user()&lt;/heartbeat&gt;\n\t\t\n\t\t&lt;writeHost host=&quot;master&quot; url=&quot;jdbc:mysql://192.168.40.210:3306?useSSL=false&amp;amp;serverTimezone=Asia/Shanghai&amp;amp;characterEncoding=utf8&quot; user=&quot;root&quot; password=&quot;Superman*2023&quot; /&gt;\n\t&lt;/dataHost&gt;\n\t\n\t&lt;dataHost name=&quot;dhost2&quot; maxCon=&quot;1000&quot; minCon=&quot;10&quot; balance=&quot;0&quot;\n\t\t\t  writeType=&quot;0&quot; dbType=&quot;mysql&quot; dbDriver=&quot;jdbc&quot; switchType=&quot;1&quot;  slaveThreshold=&quot;100&quot;&gt;\n\t\t&lt;heartbeat&gt;select user()&lt;/heartbeat&gt;\n\t\t\n\t\t&lt;writeHost host=&quot;master&quot; url=&quot;jdbc:mysql://192.168.40.211:3306?useSSL=false&amp;amp;serverTimezone=Asia/Shanghai&amp;amp;characterEncoding=utf8&quot; user=&quot;root&quot; password=&quot;Superman*2023&quot; /&gt;\n\t&lt;/dataHost&gt;\n\t\n\t&lt;dataHost name=&quot;dhost3&quot; maxCon=&quot;1000&quot; minCon=&quot;10&quot; balance=&quot;0&quot;\n\t\t\t  writeType=&quot;0&quot; dbType=&quot;mysql&quot; dbDriver=&quot;jdbc&quot; switchType=&quot;1&quot;  slaveThreshold=&quot;100&quot;&gt;\n\t\t&lt;heartbeat&gt;select user()&lt;/heartbeat&gt;\n\t\t\n\t\t&lt;writeHost host=&quot;master&quot; url=&quot;jdbc:mysql://192.168.40.212:3306?useSSL=false&amp;amp;serverTimezone=Asia/Shanghai&amp;amp;characterEncoding=utf8&quot; user=&quot;root&quot; password=&quot;Superman*2023&quot; /&gt;\n\t&lt;/dataHost&gt;\n&lt;/mycat:schema&gt;\n</code></pre>\n<p><img loading=\"lazy\" data-src=\"https://img-blog.csdnimg.cn/9c7db64a028149c697b4e3183764fb9d.png#pic_center\" alt=\"在这里插入图片描述\" /></p>\n<pre><code>[root@mycat mycat]# cat /usr/local/mycat/conf/server.xml \n&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n&lt;!-- - - Licensed under the Apache License, Version 2.0 (the &quot;License&quot;); \n\t- you may not use this file except in compliance with the License. - You \n\tmay obtain a copy of the License at - - http://www.apache.org/licenses/LICENSE-2.0 \n\t- - Unless required by applicable law or agreed to in writing, software - \n\tdistributed under the License is distributed on an &quot;AS IS&quot; BASIS, - WITHOUT \n\tWARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. - See the \n\tLicense for the specific language governing permissions and - limitations \n\tunder the License. --&gt;\n&lt;!DOCTYPE mycat:server SYSTEM &quot;server.dtd&quot;&gt;\n&lt;mycat:server xmlns:mycat=&quot;http://io.mycat/&quot;&gt;\n\t&lt;system&gt;\n\t&lt;property name=&quot;useSqlStat&quot;&gt;0&lt;/property&gt;  &lt;!-- 1为开启实时统计、0为关闭 --&gt;\n\t&lt;property name=&quot;useGlobleTableCheck&quot;&gt;0&lt;/property&gt;  &lt;!-- 1为开启全加班一致性检测、0为关闭 --&gt;\n\n\t\t&lt;property name=&quot;sequnceHandlerType&quot;&gt;2&lt;/property&gt;\n      &lt;!--  &lt;property name=&quot;useCompression&quot;&gt;1&lt;/property&gt;--&gt; &lt;!--1为开启mysql压缩协议--&gt;\n        &lt;!--  &lt;property name=&quot;fakeMySQLVersion&quot;&gt;5.6.20&lt;/property&gt;--&gt; &lt;!--设置模拟的MySQL版本号--&gt;\n\t&lt;!-- &lt;property name=&quot;processorBufferChunk&quot;&gt;40960&lt;/property&gt; --&gt;\n\t&lt;!-- \n\t&lt;property name=&quot;processors&quot;&gt;1&lt;/property&gt; \n\t&lt;property name=&quot;processorExecutor&quot;&gt;32&lt;/property&gt; \n\t --&gt;\n\t\t&lt;!--默认为type 0: DirectByteBufferPool | type 1 ByteBufferArena--&gt;\n\t\t&lt;property name=&quot;processorBufferPoolType&quot;&gt;0&lt;/property&gt;\n\t\t&lt;!--默认是65535 64K 用于sql解析时最大文本长度 --&gt;\n\t\t&lt;!--&lt;property name=&quot;maxStringLiteralLength&quot;&gt;65535&lt;/property&gt;--&gt;\n\t\t&lt;!--&lt;property name=&quot;sequnceHandlerType&quot;&gt;0&lt;/property&gt;--&gt;\n\t\t&lt;!--&lt;property name=&quot;backSocketNoDelay&quot;&gt;1&lt;/property&gt;--&gt;\n\t\t&lt;!--&lt;property name=&quot;frontSocketNoDelay&quot;&gt;1&lt;/property&gt;--&gt;\n\t\t&lt;!--&lt;property name=&quot;processorExecutor&quot;&gt;16&lt;/property&gt;--&gt;\n\t\t&lt;!--\n\t\t\t&lt;property name=&quot;serverPort&quot;&gt;8066&lt;/property&gt; &lt;property name=&quot;managerPort&quot;&gt;9066&lt;/property&gt; \n\t\t\t&lt;property name=&quot;idleTimeout&quot;&gt;300000&lt;/property&gt; &lt;property name=&quot;bindIp&quot;&gt;0.0.0.0&lt;/property&gt; \n\t\t\t&lt;property name=&quot;frontWriteQueueSize&quot;&gt;4096&lt;/property&gt; &lt;property name=&quot;processors&quot;&gt;32&lt;/property&gt; --&gt;\n\t\t&lt;!--分布式事务开关，0为不过滤分布式事务，1为过滤分布式事务（如果分布式事务内只涉及全局表，则不过滤），2为不过滤分布式事务,但是记录分布式事务日志--&gt;\n\t\t&lt;property name=&quot;handleDistributedTransactions&quot;&gt;0&lt;/property&gt;\n\t\t\n\t\t\t&lt;!--\n\t\t\toff heap for merge/order/group/limit      1开启   0关闭\n\t\t--&gt;\n\t\t&lt;property name=&quot;useOffHeapForMerge&quot;&gt;1&lt;/property&gt;\n\n\t\t&lt;!--\n\t\t\t单位为m\n\t\t--&gt;\n\t\t&lt;property name=&quot;memoryPageSize&quot;&gt;1m&lt;/property&gt;\n\n\t\t&lt;!--\n\t\t\t单位为k\n\t\t--&gt;\n\t\t&lt;property name=&quot;spillsFileBufferSize&quot;&gt;1k&lt;/property&gt;\n\n\t\t&lt;property name=&quot;useStreamOutput&quot;&gt;0&lt;/property&gt;\n\n\t\t&lt;!--\n\t\t\t单位为m\n\t\t--&gt;\n\t\t&lt;property name=&quot;systemReserveMemorySize&quot;&gt;384m&lt;/property&gt;\n\n\n\t\t&lt;!--是否采用zookeeper协调切换  --&gt;\n\t\t&lt;property name=&quot;useZKSwitch&quot;&gt;true&lt;/property&gt;\n\n\n\t&lt;/system&gt;\n\t\n\t&lt;!-- 全局SQL防火墙设置 --&gt;\n\t&lt;!-- \n\t&lt;firewall&gt; \n\t   &lt;whitehost&gt;\n\t      &lt;host host=&quot;127.0.0.1&quot; user=&quot;mycat&quot;/&gt;\n\t      &lt;host host=&quot;127.0.0.2&quot; user=&quot;mycat&quot;/&gt;\n\t   &lt;/whitehost&gt;\n       &lt;blacklist check=&quot;false&quot;&gt;\n       &lt;/blacklist&gt;\n\t&lt;/firewall&gt;\n\t--&gt;\n\t\n\t&lt;user name=&quot;root&quot;&gt;\n\t\t&lt;property name=&quot;password&quot;&gt;Superman*2023&lt;/property&gt;\n\t\t&lt;property name=&quot;schemas&quot;&gt;DB01&lt;/property&gt;\n\t\t\n\t\t&lt;!-- 表级 DML 权限设置 --&gt;\n\t\t&lt;!-- \t\t\n\t\t&lt;privileges check=&quot;false&quot;&gt;\n\t\t\t&lt;schema name=&quot;TESTDB&quot; dml=&quot;0110&quot; &gt;\n\t\t\t\t&lt;table name=&quot;tb01&quot; dml=&quot;0000&quot;&gt;&lt;/table&gt;\n\t\t\t\t&lt;table name=&quot;tb02&quot; dml=&quot;1111&quot;&gt;&lt;/table&gt;\n\t\t\t&lt;/schema&gt;\n\t\t&lt;/privileges&gt;\t\t\n\t\t --&gt;\n\t&lt;/user&gt;\n\n\t&lt;user name=&quot;user&quot;&gt;\n\t\t&lt;property name=&quot;password&quot;&gt;Superman*2023&lt;/property&gt;\n\t\t&lt;property name=&quot;schemas&quot;&gt;DB01&lt;/property&gt;\n\t\t&lt;property name=&quot;readOnly&quot;&gt;true&lt;/property&gt;\n\t&lt;/user&gt;\n\n&lt;/mycat:server&gt;\n</code></pre>\n<h6 id=\"323-mycat启动\"><a class=\"anchor\" href=\"#323-mycat启动\">#</a> 3.2.3 Mycat 启动</h6>\n<pre><code>#1.启动mycat\n[root@mycat mycat]# ./bin/mycat restart\n\n#2.wrapper.log日志中常见错误\nERROR | wrapper | 2021/1/10 13:31:05 | Startup failed: Timed out waiting for signal from JVM.\nERROR | wrapper | 2021/1/10 13:31:05 | JVM did not exit on request, terminated\n\n#3.启动Mycat超时,前往wrapper.conf配置超时策略\n[root@mycat mycat]# vim /usr/local/mycat/conf/wrapper.conf\n...\nwrapper.startup.timeout=300     //添加此行，超时时间300秒\nwrapper.ping.timeout=120\n\n#4.查看mycat是否启动\n[root@mycat mycat]# tail -f logs/wrapper.log\n...\nINFO   | jvm 1    | 2023/12/02 22:53:44 | MyCAT Server startup successfully. see logs in logs/mycat.log\n[root@mycat mycat]# netstat -lntp|grep 8066\ntcp6       0      0 :::8066                 :::*                    LISTEN      18028/java\n</code></pre>\n<h6 id=\"324-分片测试\"><a class=\"anchor\" href=\"#324-分片测试\">#</a> 3.2.4 分片测试</h6>\n<pre><code>[root@db3 ~]#  mysql -h 192.168.40.213 -P 8066 -uroot -p'Superman*2023'\nmysql: [Warning] Using a password on the command line interface can be insecure.\nWelcome to the MySQL monitor.  Commands end with ; or \\g.\nYour MySQL connection id is 3\nServer version: 5.6.29-mycat-1.6-RELEASE-20161028204710 MyCat Server (OpenCloundDB)\n\nCopyright (c) 2000, 2023, Oracle and/or its affiliates.\n\nOracle is a registered trademark of Oracle Corporation and/or its\naffiliates. Other names may be trademarks of their respective\nowners.\n\nType 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.\n\nmysql&gt; show databases;\n+----------+\n| DATABASE |\n+----------+\n| DB01     |\n+----------+\n1 row in set (0.00 sec)\n\nmysql&gt; use DB01;\nReading table information for completion of table and column names\nYou can turn off this feature to get a quicker startup with -A\n\nDatabase changed\nmysql&gt; show tables;\n+----------------+\n| Tables in DB01 |\n+----------------+\n| tb_order       |\n+----------------+\n1 row in set (0.00 sec)\nmysql&gt; CREATE TABLE TB_ORDER(\n    -&gt; id BIGINT(20) NOT NULL,\n    -&gt; title VARCHAR(100) NOT NULL,\n    -&gt; PRIMARY KEY (id)\n    -&gt; )ENGINE=INNODB DEFAULT CHARSET=utf8;\nQuery OK, 0 rows affected (0.04 sec)\n OK!\nmysql&gt;INSERT INTO TB_ORDER(id,title) VALUES(1,'guods1');\nmysql&gt;INSERT INTO TB_ORDER(id,title) VALUES(2,'guods2');\nmysql&gt;INSERT INTO TB_ORDER(id,title) VALUES(3,'guods3');\nmysql&gt;INSERT INTO TB_ORDER(id,title) VALUES(4,'guods4');\nmysql&gt; select * from TB_ORDER;\n+------+--------+\n| id   | title  |\n+------+--------+\n|    1 | guods1 |\n|    2 | guods2 |\n|    3 | guods3 |\n|    4 | guods4 |\n+------+--------+\n4 rows in set (0.03 sec)\n</code></pre>\n<p><strong>数据写入到 db1 中，因为 mycat 分片规则为 0-50000000 存入节点 1,5000001-10000000 存入节点 2,10000001-15000000 存入节点 3，15000001 以上无法插入数据，需要增加数据节点。</strong></p>\n<pre><code>[root@mycat mycat]# vim conf/rule.xml\n...\n        &lt;tableRule name=&quot;auto-sharding-long&quot;&gt;\n                &lt;rule&gt;\n                        &lt;columns&gt;id&lt;/columns&gt;\n                        &lt;algorithm&gt;rang-long&lt;/algorithm&gt;\n                &lt;/rule&gt;\n        &lt;/tableRule&gt;\n\n....\n       &lt;function name=&quot;rang-long&quot;\n                class=&quot;io.mycat.route.function.AutoPartitionByLong&quot;&gt;\n                &lt;property name=&quot;mapFile&quot;&gt;autopartition-long.txt&lt;/property&gt;\n        &lt;/function&gt;\n\n...\n\n[root@mycat mycat]# cat conf/autopartition-long.txt\n# range start-end ,data node index\n# K=1000,M=10000.\n0-500M=0\n500M-1000M=1\n\n#5000001-10000000存入节点2 \nmysql&gt; INSERT INTO TB_ORDER(id,title) VALUES(5000001,'guods5000001');\nQuery OK, 1 row affected (0.01 sec)\n OK!\n \n#10000001-15000000存入节点3 \nmysql&gt; INSERT INTO TB_ORDER(id,title) VALUES(10000001,'guods10000001');\nQuery OK, 1 row affected (0.00 sec)\n OK!\n\n#15000001以上无法插入数据，需要增加数据节点\nmysql&gt; INSERT INTO TB_ORDER(id,title) VALUES(15000001,'guods15000001');\nERROR 1064 (HY000): can't find any valid datanode :TB_ORDER -&gt; ID -&gt; 15000001\n</code></pre>\n<h5 id=\"33-mycat配置\"><a class=\"anchor\" href=\"#33-mycat配置\">#</a> 3.3 Mycat 配置</h5>\n<p><img loading=\"lazy\" data-src=\"https://img-blog.csdnimg.cn/5419360b032f4ac689bae6cc3f116b31.png#pic_center\" alt=\"在这里插入图片描述\" /></p>\n<h6 id=\"331-schema标签\"><a class=\"anchor\" href=\"#331-schema标签\">#</a> 3.3.1 Schema 标签</h6>\n<p><img loading=\"lazy\" data-src=\"https://img-blog.csdnimg.cn/46a044f4e39b492f901f75149fc93a83.png#pic_center\" alt=\"在这里插入图片描述\" /></p>\n<p>schema 标签用于定义 MyCat 实例中的逻辑库，一个 MyCat 实例中，可以有多个逻辑库，可以通过 schema 标签来划分不同的逻辑库。MyCat 中的逻辑库的概念，等同于 MySQL 中的 database 概念，需要操作某个逻辑库下的表时也需要切换逻辑库 (use xxx)。</p>\n<p><img loading=\"lazy\" data-src=\"https://img-blog.csdnimg.cn/70c92df034f1430db113f402a64e60a1.png#pic_center\" alt=\"在这里插入图片描述\" /></p>\n<p><img loading=\"lazy\" data-src=\"https://img-blog.csdnimg.cn/faf24e9c66a140f7a44b3eb02181cddc.png#pic_center\" alt=\"在这里插入图片描述\" /></p>\n<h6 id=\"332-datanode标签\"><a class=\"anchor\" href=\"#332-datanode标签\">#</a> 3.3.2 Datanode 标签</h6>\n<p><img loading=\"lazy\" data-src=\"https://img-blog.csdnimg.cn/b06d787c5cdb4a369c684ee97e11f937.png#pic_center\" alt=\"在这里插入图片描述\" /></p>\n<h6 id=\"333-datahost标签\"><a class=\"anchor\" href=\"#333-datahost标签\">#</a> 3.3.3 Datahost 标签</h6>\n<p><img loading=\"lazy\" data-src=\"https://img-blog.csdnimg.cn/39158b4dc09d40bb867926e331a877bb.png#pic_center\" alt=\"在这里插入图片描述\" /></p>\n<h6 id=\"334-rulexml\"><a class=\"anchor\" href=\"#334-rulexml\">#</a> 3.3.4 rule.xml</h6>\n<p>rule.xml 中定义所有拆分表的规则，在使用过程中可以灵活的使用分片算法，或者对同一个分片算法使用不同的参数，它让分片过程可配置化。主要包含两类标签： <code>tableRule</code> 、 <code>Function</code> 。</p>\n<p><img loading=\"lazy\" data-src=\"https://img-blog.csdnimg.cn/eb947d54cc5b4a849f2cafde330a882e.png#pic_center\" alt=\"在这里插入图片描述\" /></p>\n<h6 id=\"335-serverxml\"><a class=\"anchor\" href=\"#335-serverxml\">#</a> 3.3.5 server.xml</h6>\n<p><img loading=\"lazy\" data-src=\"https://img-blog.csdnimg.cn/d975eb41a0224765b0ebfa749ec41e7c.png#pic_center\" alt=\"在这里插入图片描述\" /></p>\n<h5 id=\"34-mycat分片\"><a class=\"anchor\" href=\"#34-mycat分片\">#</a> 3.4 Mycat 分片</h5>\n<h6 id=\"341-分库分表-mycat分片-垂直分库\"><a class=\"anchor\" href=\"#341-分库分表-mycat分片-垂直分库\">#</a> 3.4.1 分库分表 - MyCat 分片 - 垂直分库</h6>\n<p>场景：在业务系统中，涉及以下表结构，但是由于用户与订单每天都会产生大量的数据，单台服务器的数据存储及处理能力是有限的，可以对数据库表进行拆分，原有的数据库表如下。</p>\n<p><img loading=\"lazy\" data-src=\"https://img-blog.csdnimg.cn/e59c1067e38f401b915698c7b480ee2b.png\" alt=\"在这里插入图片描述\" /></p>\n<p><strong>ps: 分库不需要指定 rule，涉及分表需要使用 rule；</strong></p>\n<p><strong>环境准备</strong></p>\n<p>①如图所示准备三台 Linux 服务器（ip 为：192.168.40.210、192.168.40.211、192.168.40.212）可以根据自己的实际情况进行准备。<br />\n②三台服务器上都安装 MySQL，在 192.168.40.213 服务器上安装 MyCat。<br />\n③三台服务器关闭防火墙或者开放对应的端口。<br />\n④分别在三台 MySQL 中创建数据库 shopping。<br />\n<img loading=\"lazy\" data-src=\"https://img-blog.csdnimg.cn/956d2339ccf1416ca76f9092339887f8.png\" alt=\"在这里插入图片描述\" /></p>\n<p><strong>schema.xml 文件配置如下：</strong></p>\n<pre><code>[root@mycat ~]# cat /usr/local/mycat/conf/schema.xml \n&lt;?xml version=&quot;1.0&quot;?&gt;\n&lt;!DOCTYPE mycat:schema SYSTEM &quot;schema.dtd&quot;&gt;\n&lt;mycat:schema xmlns:mycat=&quot;http://io.mycat/&quot;&gt;\n\t&lt;schema name=&quot;SHOPPING&quot; checkSQLschema=&quot;true&quot; sqlMaxLimit=&quot;100&quot;&gt;\n\t\t&lt;table name=&quot;tb_goods_base&quot; dataNode=&quot;dn1&quot; primaryKey=&quot;id&quot; /&gt;\n\t\t&lt;table name=&quot;tb_goods_brand&quot; dataNode=&quot;dn1&quot; primaryKey=&quot;id&quot; /&gt;\n\t\t&lt;table name=&quot;tb_goods_cat&quot; dataNode=&quot;dn1&quot; primaryKey=&quot;id&quot; /&gt;\n\t\t&lt;table name=&quot;tb_goods_desc&quot; dataNode=&quot;dn1&quot; primaryKey=&quot;id&quot; /&gt;\n\t\t&lt;table name=&quot;tb_goods_item&quot; dataNode=&quot;dn1&quot; primaryKey=&quot;goods_id&quot; /&gt;\n\t\t\n\t\t&lt;table name=&quot;tb_order_item&quot; dataNode=&quot;dn2&quot; primaryKey=&quot;id&quot; /&gt;\n\t\t&lt;table name=&quot;tb_order_master&quot; dataNode=&quot;dn2&quot; primaryKey=&quot;order_id&quot; /&gt;\n\t\t&lt;table name=&quot;tb_order_pay_log&quot; dataNode=&quot;dn2&quot; primaryKey=&quot;out_trade_no&quot; /&gt;\n\t\t\n\t\t&lt;table name=&quot;tb_user&quot; dataNode=&quot;dn3&quot; primaryKey=&quot;id&quot; /&gt;\n\t\t&lt;table name=&quot;tb_user_address&quot; dataNode=&quot;dn3&quot; primaryKey=&quot;id&quot; /&gt;\n\t\t&lt;table name=&quot;tb_areas_provinces&quot; dataNode=&quot;dn3&quot; primaryKey=&quot;id&quot; /&gt;\n\t\t&lt;table name=&quot;tb_areas_city&quot; dataNode=&quot;dn3&quot; primaryKey=&quot;id&quot; /&gt;\n\t\t&lt;table name=&quot;tb_areas_region&quot; dataNode=&quot;dn3&quot; primaryKey=&quot;id&quot; /&gt;\n\t&lt;/schema&gt;\n\t\n\t&lt;dataNode name=&quot;dn1&quot; dataHost=&quot;dhost1&quot; database=&quot;shopping&quot; /&gt;\n\t&lt;dataNode name=&quot;dn2&quot; dataHost=&quot;dhost2&quot; database=&quot;shopping&quot; /&gt;\n\t&lt;dataNode name=&quot;dn3&quot; dataHost=&quot;dhost3&quot; database=&quot;shopping&quot; /&gt;\n\t\n\t&lt;dataHost name=&quot;dhost1&quot; maxCon=&quot;1000&quot; minCon=&quot;10&quot; balance=&quot;0&quot;\n\t\t\t  writeType=&quot;0&quot; dbType=&quot;mysql&quot; dbDriver=&quot;jdbc&quot; switchType=&quot;1&quot;  slaveThreshold=&quot;100&quot;&gt;\n\t\t&lt;heartbeat&gt;select user()&lt;/heartbeat&gt;\n\t\t\n\t\t&lt;writeHost host=&quot;master&quot; url=&quot;jdbc:mysql://192.168.40.210:3306?useSSL=false&amp;amp;serverTimezone=Asia/Shanghai&amp;amp;characterEncoding=utf8&quot; user=&quot;root&quot; password=&quot;Superman*2023&quot; /&gt;\n\t&lt;/dataHost&gt;\n\t\n\t&lt;dataHost name=&quot;dhost2&quot; maxCon=&quot;1000&quot; minCon=&quot;10&quot; balance=&quot;0&quot;\n\t\t\t  writeType=&quot;0&quot; dbType=&quot;mysql&quot; dbDriver=&quot;jdbc&quot; switchType=&quot;1&quot;  slaveThreshold=&quot;100&quot;&gt;\n\t\t&lt;heartbeat&gt;select user()&lt;/heartbeat&gt;\n\t\t\n\t\t&lt;writeHost host=&quot;master&quot; url=&quot;jdbc:mysql://192.168.40.211:3306?useSSL=false&amp;amp;serverTimezone=Asia/Shanghai&amp;amp;characterEncoding=utf8&quot; user=&quot;root&quot; password=&quot;Superman*2023&quot; /&gt;\n\t&lt;/dataHost&gt;\n\t\n\t&lt;dataHost name=&quot;dhost3&quot; maxCon=&quot;1000&quot; minCon=&quot;10&quot; balance=&quot;0&quot;\n\t\t\t  writeType=&quot;0&quot; dbType=&quot;mysql&quot; dbDriver=&quot;jdbc&quot; switchType=&quot;1&quot;  slaveThreshold=&quot;100&quot;&gt;\n\t\t&lt;heartbeat&gt;select user()&lt;/heartbeat&gt;\n\t\t\n\t\t&lt;writeHost host=&quot;master&quot; url=&quot;jdbc:mysql://192.168.40.212:3306?useSSL=false&amp;amp;serverTimezone=Asia/Shanghai&amp;amp;characterEncoding=utf8&quot; user=&quot;root&quot; password=&quot;Superman*2023&quot; /&gt;\n\t&lt;/dataHost&gt;\n&lt;/mycat:schema&gt;\n</code></pre>\n<p><strong>server.xml 文件配置如下：</strong></p>\n<pre><code>[root@mycat ~]# cat /usr/local/mycat/conf/server.xml \n...\n\t&lt;user name=&quot;root&quot;&gt;\n\t\t&lt;property name=&quot;password&quot;&gt;Superman*2023&lt;/property&gt;\n\t\t&lt;property name=&quot;schemas&quot;&gt;SHOPPING&lt;/property&gt;\n\t\t\n\t\t&lt;!-- 表级 DML 权限设置 --&gt;\n\t\t&lt;!-- \t\t\n\t\t&lt;privileges check=&quot;false&quot;&gt;\n\t\t\t&lt;schema name=&quot;TESTDB&quot; dml=&quot;0110&quot; &gt;\n\t\t\t\t&lt;table name=&quot;tb01&quot; dml=&quot;0000&quot;&gt;&lt;/table&gt;\n\t\t\t\t&lt;table name=&quot;tb02&quot; dml=&quot;1111&quot;&gt;&lt;/table&gt;\n\t\t\t&lt;/schema&gt;\n\t\t&lt;/privileges&gt;\t\t\n\t\t --&gt;\n\t&lt;/user&gt;\n\n\t&lt;user name=&quot;user&quot;&gt;\n\t\t&lt;property name=&quot;password&quot;&gt;Superman*2023&lt;/property&gt;\n\t\t&lt;property name=&quot;schemas&quot;&gt;SHOPPING&lt;/property&gt;\n\t\t&lt;property name=&quot;readOnly&quot;&gt;true&lt;/property&gt;\n\t&lt;/user&gt;\n\n&lt;/mycat:server&gt;\n</code></pre>\n<p><strong>分库分表 - MyCat 分片 - 垂直分库 - 测试</strong></p>\n<p><strong>垂直分库 - 测试</strong></p>\n<pre><code>#1.重启mycat\n[root@mycat ~]# /usr/local/mycat/bin/mycat restart\nStopping Mycat-server...\nStopped Mycat-server.\nStarting Mycat-server...\n[root@mycat ~]# tail -f  /usr/local/mycat/logs/wrapper.log \n...\nINFO   | jvm 1    | 2023/12/03 15:29:02 | MyCAT Server startup successfully. see logs in logs/mycat.log\ncreate database shopping default charset utf8mb4;\n\n#2.在3台节点创建shopping数据库\nmysql&gt; create database shopping default charset utf8mb4;\nmysql&gt; create database shopping default charset utf8mb4;\nmysql&gt; create database shopping default charset utf8mb4;\n\n#3.登入mycat\n[root@db3 ~]# mysql -h 192.168.40.213 -P 8066 -uroot -p'Superman*2023'\nmysql&gt; show databases;\n+----------+\n| DATABASE |\n+----------+\n| SHOPPING |\n+----------+\n1 row in set (0.01 sec)\n\n#4.查看逻辑库\nmysql&gt; show databases;\n+----------+\n| DATABASE |\n+----------+\n| SHOPPING |\n+----------+\n1 row in set (0.01 sec)\n\n#5.切换到SHOPPING数据库\nmysql&gt; use SHOPPING;\nReading table information for completion of table and column names\nYou can turn off this feature to get a quicker startup with -A\n\nDatabase changed\n\n#6.查看逻辑表\nmysql&gt; show tables;\n+--------------------+\n| Tables in SHOPPING |\n+--------------------+\n| tb_areas_city      |\n| tb_areas_provinces |\n| tb_areas_region    |\n| tb_goods_base      |\n| tb_goods_brand     |\n| tb_goods_cat       |\n| tb_goods_desc      |\n| tb_goods_item      |\n| tb_order_item      |\n| tb_order_master    |\n| tb_order_pay_log   |\n| tb_user            |\n| tb_user_address    |\n+--------------------+\n13 rows in set (0.00 sec)\n\n#7.上传shopping-table.sql表结构文件与shopping-insert.sql数据文件\n\n#8.执行shopping-table.sql文件\nmysql&gt; source /root/shopping-table.sql\n\n#9.执行shopping-insert.sql文件\nmysql&gt; source /root/shopping-insert.sql\n\n#10.查看三个数据库可以发现（根据schema.xml配置文件的配置进行了实现）\n①192.168.40.210的数据库中存放了 tb_goods_base、tb_goods_brand、tb_goods_cat、tb_goods_desc、tb_goods_item这五张表\n②192.168.40.211的数据库中存放了 tb_order_item、tb_order_master、tb_order_pay_log这三张表；\n③192.168.40.212的数据库中存放了 tb_user、tb_user_address、tb_areas_provinces、tb_areas_city、tb_areas_region这五张表\n</code></pre>\n<p><strong>exam1: 查询用户的收件人及收件人地址信息 (包含省、市、区)。</strong></p>\n<pre><code>mysql&gt; select ua.user_id,ua.contact,p.province,c.city,r.area,ua.address from tb_user_address ua,tb_areas_city c,tb_areas_provinces p,tb_areas_region r where ua.province_id = p.provinceid and ua.city_id = c.cityid and ua.town_id = r.areaid;\n+-----------+-----------+-----------+-----------+-----------+--------------------+\n| user_id   | contact   | province  | city      | area      | address            |\n+-----------+-----------+-----------+-----------+-----------+--------------------+\n| deng      | 叶问      | 北京市    | 市辖区    | 西城区    | 咏春武馆总部       |\n| java00001 | 李佳红    | 北京市    | 市辖区    | 崇文区    | 修正大厦           |\n| deng      | 李小龙    | 北京市    | 市辖区    | 崇文区    | 永春武馆           |\n| zhaoliu   | 赵三      | 北京市    | 市辖区    | 宣武区    | 西直门             |\n| java00001 | 李嘉诚    | 北京市    | 市辖区    | 朝阳区    | 金燕龙办公楼       |\n| java00001 | 李佳星    | 北京市    | 市辖区    | 朝阳区    | 中腾大厦           |\n+-----------+-----------+-----------+-----------+-----------+--------------------+\n</code></pre>\n<p><em><strong>ps: 此查询语句只涉及了一个分片所以查询成功</strong></em></p>\n<p><strong>exam2: 查询每一笔订单及订单的收件地址信息 (包含省、市、区)。</strong></p>\n<pre><code>mysql&gt; SELECT order_id,payment,receiver,province,city,area FROM tb_order_master o,tb_areas_provinces p,tb_areas_city c,tb_areas_region r WHERE o.receiver_province = p.provinceid AND o.receiver_city = c.cityid AND o.receiver_region = r.areaid;\nERROR 1064 (HY000): invalid route in sql, multi tables found but datanode has no intersection  sql:SELECT order_id,payment,receiver,province,city,area FROM tb_order_master o,tb_areas_provinces p,tb_areas_city c,tb_areas_region r WHERE o.receiver_province = p.provinceid AND o.receiver_city = c.cityid AND o.receiver_region = r.areaid\n</code></pre>\n<p><em><strong>ps: 此查询语句涉及多个分片所以查询报错，为了解决这个问题需要进行全局表配置</strong></em></p>\n<p><strong>全局表配置</strong></p>\n<p>对于省、市、区 / 县表 tb_areas_provinces，tb_areas_city，tb_areas_region，是属于数据字典表，在多个业务模块中都可能会遇到，可以将其设置为全局表，利于业务操作。</p>\n<p><img loading=\"lazy\" data-src=\"https://img-blog.csdnimg.cn/53feb8089b8f407d85736dd0b1726f13.png\" alt=\"在这里插入图片描述\" /></p>\n<p><strong>1. 修改 MyCat—schema.xml 文件配置</strong></p>\n<p><strong>schema.xml 文件配置如下：</strong></p>\n<pre><code>[root@mycat ~]# cat /usr/local/mycat/conf/schema.xml \n&lt;?xml version=&quot;1.0&quot;?&gt;\n&lt;!DOCTYPE mycat:schema SYSTEM &quot;schema.dtd&quot;&gt;\n&lt;mycat:schema xmlns:mycat=&quot;http://io.mycat/&quot;&gt;\n\t&lt;schema name=&quot;SHOPPING&quot; checkSQLschema=&quot;true&quot; sqlMaxLimit=&quot;100&quot;&gt;\n\t\t&lt;table name=&quot;tb_goods_base&quot; dataNode=&quot;dn1&quot; primaryKey=&quot;id&quot; /&gt;\n\t\t&lt;table name=&quot;tb_goods_brand&quot; dataNode=&quot;dn1&quot; primaryKey=&quot;id&quot; /&gt;\n\t\t&lt;table name=&quot;tb_goods_cat&quot; dataNode=&quot;dn1&quot; primaryKey=&quot;id&quot; /&gt;\n\t\t&lt;table name=&quot;tb_goods_desc&quot; dataNode=&quot;dn1&quot; primaryKey=&quot;id&quot; /&gt;\n\t\t&lt;table name=&quot;tb_goods_item&quot; dataNode=&quot;dn1&quot; primaryKey=&quot;goods_id&quot; /&gt;\n\t\t\n\t\t&lt;table name=&quot;tb_order_item&quot; dataNode=&quot;dn2&quot; primaryKey=&quot;id&quot; /&gt;\n\t\t&lt;table name=&quot;tb_order_master&quot; dataNode=&quot;dn2&quot; primaryKey=&quot;order_id&quot; /&gt;\n\t\t&lt;table name=&quot;tb_order_pay_log&quot; dataNode=&quot;dn2&quot; primaryKey=&quot;out_trade_no&quot; /&gt;\n\t\t\n\t\t&lt;table name=&quot;tb_user&quot; dataNode=&quot;dn3&quot; primaryKey=&quot;id&quot; /&gt;\n\t\t&lt;table name=&quot;tb_user_address&quot; dataNode=&quot;dn3&quot; primaryKey=&quot;id&quot; /&gt;\n\n\t\t&lt;table name=&quot;tb_areas_provinces&quot; dataNode=&quot;dn1,dn2,dn3&quot; primaryKey=&quot;id&quot; type=&quot;global&quot;/&gt;\n\t\t&lt;table name=&quot;tb_areas_city&quot; dataNode=&quot;dn1,dn2,dn3&quot; primaryKey=&quot;id&quot; type=&quot;global&quot;/&gt;\n\t\t&lt;table name=&quot;tb_areas_region&quot; dataNode=&quot;dn1,dn2,dn3&quot; primaryKey=&quot;id&quot; type=&quot;global&quot; /&gt;\n\t&lt;/schema&gt;\n\t\n\t&lt;dataNode name=&quot;dn1&quot; dataHost=&quot;dhost1&quot; database=&quot;shopping&quot; /&gt;\n\t&lt;dataNode name=&quot;dn2&quot; dataHost=&quot;dhost2&quot; database=&quot;shopping&quot; /&gt;\n\t&lt;dataNode name=&quot;dn3&quot; dataHost=&quot;dhost3&quot; database=&quot;shopping&quot; /&gt;\n\t\n\t&lt;dataHost name=&quot;dhost1&quot; maxCon=&quot;1000&quot; minCon=&quot;10&quot; balance=&quot;0&quot;\n\t\t\t  writeType=&quot;0&quot; dbType=&quot;mysql&quot; dbDriver=&quot;jdbc&quot; switchType=&quot;1&quot;  slaveThreshold=&quot;100&quot;&gt;\n\t\t&lt;heartbeat&gt;select user()&lt;/heartbeat&gt;\n\t\t\n\t\t&lt;writeHost host=&quot;master&quot; url=&quot;jdbc:mysql://192.168.40.210:3306?useSSL=false&amp;amp;serverTimezone=Asia/Shanghai&amp;amp;characterEncoding=utf8&quot; user=&quot;root&quot; password=&quot;Superman*2023&quot; /&gt;\n\t&lt;/dataHost&gt;\n\t\n\t&lt;dataHost name=&quot;dhost2&quot; maxCon=&quot;1000&quot; minCon=&quot;10&quot; balance=&quot;0&quot;\n\t\t\t  writeType=&quot;0&quot; dbType=&quot;mysql&quot; dbDriver=&quot;jdbc&quot; switchType=&quot;1&quot;  slaveThreshold=&quot;100&quot;&gt;\n\t\t&lt;heartbeat&gt;select user()&lt;/heartbeat&gt;\n\t\t\n\t\t&lt;writeHost host=&quot;master&quot; url=&quot;jdbc:mysql://192.168.40.211:3306?useSSL=false&amp;amp;serverTimezone=Asia/Shanghai&amp;amp;characterEncoding=utf8&quot; user=&quot;root&quot; password=&quot;Superman*2023&quot; /&gt;\n\t&lt;/dataHost&gt;\n\t\n\t&lt;dataHost name=&quot;dhost3&quot; maxCon=&quot;1000&quot; minCon=&quot;10&quot; balance=&quot;0&quot;\n\t\t\t  writeType=&quot;0&quot; dbType=&quot;mysql&quot; dbDriver=&quot;jdbc&quot; switchType=&quot;1&quot;  slaveThreshold=&quot;100&quot;&gt;\n\t\t&lt;heartbeat&gt;select user()&lt;/heartbeat&gt;\n\t\t\n\t\t&lt;writeHost host=&quot;master&quot; url=&quot;jdbc:mysql://192.168.40.212:3306?useSSL=false&amp;amp;serverTimezone=Asia/Shanghai&amp;amp;characterEncoding=utf8&quot; user=&quot;root&quot; password=&quot;Superman*2023&quot; /&gt;\n\t&lt;/dataHost&gt;\n&lt;/mycat:schema&gt;\n</code></pre>\n<p><strong>2. 全局表测试</strong></p>\n<pre><code>#1.删除3个节点上原有表\n\n#2.重启mycat\n[root@mycat ~]# /usr/local/mycat/bin/mycat restart\nStopping Mycat-server...\nStopped Mycat-server.\nStarting Mycat-server...\n[root@mycat ~]# tail -f  /usr/local/mycat/logs/wrapper.log \n...\nINFO   | jvm 1    | 2023/12/03 15:29:02 | MyCAT Server startup successfully. see logs in logs/mycat.log\ncreate database shopping default charset utf8mb4;\n\n#3.执行shopping-table.sql文件\n[root@db3 ~]# mysql -h 192.168.40.213 -P 8066 -uroot -p'Superman*2023'\nmysql&gt; source /root/shopping-table.sql\n\n#4.执行shopping-insert.sql文件\nmysql&gt; source /root/shopping-insert.sql\n\n#5 exam1:查询用户的收件人及收件人地址信息(包含省、市、区)。\nmysql&gt; select ua.user_id,ua.contact,p.province,c.city,r.area,ua.address from tb_user_address ua,tb_areas_city c,tb_areas_provinces p,tb_areas_region r where ua.province_id = p.provinceid and ua.city_id = c.cityid and ua.town_id = r.areaid;\n\n#6 exam2:查询每一笔订单及订单的收件地址信息(包含省、市、区)\nmysql&gt; SELECT order_id,payment,receiver,province,city,area FROM tb_order_master o,tb_areas_provinces p,tb_areas_city c,tb_areas_region r WHERE o.receiver_province = p.provinceid AND o.receiver_city = c.cityid AND o.receiver_region = r.areaid;\n</code></pre>\n<h6 id=\"342-分库分表-mycat分片-水平分表\"><a class=\"anchor\" href=\"#342-分库分表-mycat分片-水平分表\">#</a> 3.4.2 分库分表 - MyCat 分片 - 水平分表</h6>\n<ul>\n<li><strong>水平分表</strong></li>\n</ul>\n<p><strong>场景</strong>：在业务系统中，有一张表（日志表），业务系统每天都会产生大量的日志数据，单台服务器的数据存储及处理能力是有限的，可以对数据库表进行拆分。</p>\n<p><img loading=\"lazy\" data-src=\"https://img-blog.csdnimg.cn/50c6b8bfbf2d4a8f86c457c9d7db0cde.png\" alt=\"在这里插入图片描述\" /></p>\n<p><strong>准备环境：</strong></p>\n<p>①如图所示准备三台 Linux 服务器（ip 为：192.168.40.210、192.168.40.211、192.168.40.212）可以根据自己的实际情况进行准备。<br />\n②三台服务器上都安装 MySQL，在 192.168.40.213 服务器上安装 MyCat。<br />\n③三台服务器关闭防火墙或者开放对应的端口。<br />\n④分别在三台 MySQL 中创建数据库 itcast。<br />\n<img loading=\"lazy\" data-src=\"https://img-blog.csdnimg.cn/3791fd8009f949f9b5a752400370a2ec.png\" alt=\"在这里插入图片描述\" /></p>\n<p><strong>1. 三台 MySQL 中创建数据库 itcast</strong></p>\n<pre><code>mysql&gt; create database itcast default charset utf8mb4;\nmysql&gt; create database itcast default charset utf8mb4;\nmysql&gt; create database itcast default charset utf8mb4;\n</code></pre>\n<p><strong>2.MyCat—server.xml 文件配置</strong></p>\n<p><strong>server.xml 文件配置如下：</strong></p>\n<pre><code>[root@mycat ~]# cat /usr/local/mycat/conf/schema.xml \n&lt;?xml version=&quot;1.0&quot;?&gt;\n&lt;!DOCTYPE mycat:schema SYSTEM &quot;schema.dtd&quot;&gt;\n&lt;mycat:schema xmlns:mycat=&quot;http://io.mycat/&quot;&gt;\n\t&lt;schema name=&quot;SHOPPING&quot; checkSQLschema=&quot;true&quot; sqlMaxLimit=&quot;100&quot;&gt;\n\t\t&lt;table name=&quot;tb_goods_base&quot; dataNode=&quot;dn1&quot; primaryKey=&quot;id&quot; /&gt;\n\t\t&lt;table name=&quot;tb_goods_brand&quot; dataNode=&quot;dn1&quot; primaryKey=&quot;id&quot; /&gt;\n\t\t&lt;table name=&quot;tb_goods_cat&quot; dataNode=&quot;dn1&quot; primaryKey=&quot;id&quot; /&gt;\n\t\t&lt;table name=&quot;tb_goods_desc&quot; dataNode=&quot;dn1&quot; primaryKey=&quot;id&quot; /&gt;\n\t\t&lt;table name=&quot;tb_goods_item&quot; dataNode=&quot;dn1&quot; primaryKey=&quot;goods_id&quot; /&gt;\n\t\t\n\t\t&lt;table name=&quot;tb_order_item&quot; dataNode=&quot;dn2&quot; primaryKey=&quot;id&quot; /&gt;\n\t\t&lt;table name=&quot;tb_order_master&quot; dataNode=&quot;dn2&quot; primaryKey=&quot;order_id&quot; /&gt;\n\t\t&lt;table name=&quot;tb_order_pay_log&quot; dataNode=&quot;dn2&quot; primaryKey=&quot;out_trade_no&quot; /&gt;\n\t\t\n\t\t&lt;table name=&quot;tb_user&quot; dataNode=&quot;dn3&quot; primaryKey=&quot;id&quot; /&gt;\n\t\t&lt;table name=&quot;tb_user_address&quot; dataNode=&quot;dn3&quot; primaryKey=&quot;id&quot; /&gt;\n\n                &lt;table name=&quot;tb_areas_provinces&quot; dataNode=&quot;dn1,dn2,dn3&quot; primaryKey=&quot;id&quot; type=&quot;global&quot; /&gt;\n\t\t&lt;table name=&quot;tb_areas_city&quot; dataNode=&quot;dn1,dn2,dn3&quot; primaryKey=&quot;id&quot; type=&quot;global&quot; /&gt;\n\t\t&lt;table name=&quot;tb_areas_region&quot; dataNode=&quot;dn1,dn2,dn3&quot; primaryKey=&quot;id&quot; type=&quot;global&quot; /&gt;\n\t&lt;/schema&gt;\n\n        &lt;schema name=&quot;ITCAST&quot; checkSQLschema=&quot;true&quot; sqlMaxLimit=&quot;100&quot;&gt;\n        \t&lt;table name=&quot;tb_log&quot; dataNode=&quot;dn4,dn5,dn6&quot; primaryKey=&quot;id&quot; rule=&quot;mod-long&quot; /&gt;\n        &lt;/schema&gt;\n\t\n\t&lt;dataNode name=&quot;dn1&quot; dataHost=&quot;dhost1&quot; database=&quot;shopping&quot; /&gt;\n\t&lt;dataNode name=&quot;dn2&quot; dataHost=&quot;dhost2&quot; database=&quot;shopping&quot; /&gt;\n\t&lt;dataNode name=&quot;dn3&quot; dataHost=&quot;dhost3&quot; database=&quot;shopping&quot; /&gt;\n\n\t&lt;dataNode name=&quot;dn4&quot; dataHost=&quot;dhost1&quot; database=&quot;itcast&quot; /&gt;\n\t&lt;dataNode name=&quot;dn5&quot; dataHost=&quot;dhost2&quot; database=&quot;itcast&quot; /&gt;\n\t&lt;dataNode name=&quot;dn6&quot; dataHost=&quot;dhost3&quot; database=&quot;itcast&quot; /&gt;\n\t\n\t&lt;dataHost name=&quot;dhost1&quot; maxCon=&quot;1000&quot; minCon=&quot;10&quot; balance=&quot;0&quot;\n\t\t\t  writeType=&quot;0&quot; dbType=&quot;mysql&quot; dbDriver=&quot;jdbc&quot; switchType=&quot;1&quot;  slaveThreshold=&quot;100&quot;&gt;\n\t\t&lt;heartbeat&gt;select user()&lt;/heartbeat&gt;\n\t\t\n\t\t&lt;writeHost host=&quot;master&quot; url=&quot;jdbc:mysql://192.168.40.210:3306?useSSL=false&amp;amp;serverTimezone=Asia/Shanghai&amp;amp;characterEncoding=utf8&quot; user=&quot;root&quot; password=&quot;Superman*2023&quot; /&gt;\n\t&lt;/dataHost&gt;\n\t\n\t&lt;dataHost name=&quot;dhost2&quot; maxCon=&quot;1000&quot; minCon=&quot;10&quot; balance=&quot;0&quot;\n\t\t\t  writeType=&quot;0&quot; dbType=&quot;mysql&quot; dbDriver=&quot;jdbc&quot; switchType=&quot;1&quot;  slaveThreshold=&quot;100&quot;&gt;\n\t\t&lt;heartbeat&gt;select user()&lt;/heartbeat&gt;\n\t\t\n\t\t&lt;writeHost host=&quot;master&quot; url=&quot;jdbc:mysql://192.168.40.211:3306?useSSL=false&amp;amp;serverTimezone=Asia/Shanghai&amp;amp;characterEncoding=utf8&quot; user=&quot;root&quot; password=&quot;Superman*2023&quot; /&gt;\n\t&lt;/dataHost&gt;\n\t\n\t&lt;dataHost name=&quot;dhost3&quot; maxCon=&quot;1000&quot; minCon=&quot;10&quot; balance=&quot;0&quot;\n\t\t\t  writeType=&quot;0&quot; dbType=&quot;mysql&quot; dbDriver=&quot;jdbc&quot; switchType=&quot;1&quot;  slaveThreshold=&quot;100&quot;&gt;\n\t\t&lt;heartbeat&gt;select user()&lt;/heartbeat&gt;\n\t\t\n\t\t&lt;writeHost host=&quot;master&quot; url=&quot;jdbc:mysql://192.168.40.212:3306?useSSL=false&amp;amp;serverTimezone=Asia/Shanghai&amp;amp;characterEncoding=utf8&quot; user=&quot;root&quot; password=&quot;Superman*2023&quot; /&gt;\n\t&lt;/dataHost&gt;\n&lt;/mycat:schema&gt;\n</code></pre>\n<p><strong>3.MyCat—server.xml 文件配置</strong></p>\n<p><strong>server.xml 文件配置如下：</strong></p>\n<pre><code>[root@mycat ~]# cat /usr/local/mycat/conf/server.xml \n...\n\t&lt;user name=&quot;root&quot;&gt;\n\t\t&lt;property name=&quot;password&quot;&gt;Superman*2023&lt;/property&gt;\n\t\t&lt;property name=&quot;schemas&quot;&gt;SHOPPING,ITCAST&lt;/property&gt;\n\t\t\n\t\t&lt;!-- 表级 DML 权限设置 --&gt;\n\t\t&lt;!-- \t\t\n\t\t&lt;privileges check=&quot;false&quot;&gt;\n\t\t\t&lt;schema name=&quot;TESTDB&quot; dml=&quot;0110&quot; &gt;\n\t\t\t\t&lt;table name=&quot;tb01&quot; dml=&quot;0000&quot;&gt;&lt;/table&gt;\n\t\t\t\t&lt;table name=&quot;tb02&quot; dml=&quot;1111&quot;&gt;&lt;/table&gt;\n\t\t\t&lt;/schema&gt;\n\t\t&lt;/privileges&gt;\t\t\n\t\t --&gt;\n\t&lt;/user&gt;\n\n\t&lt;user name=&quot;user&quot;&gt;\n\t\t&lt;property name=&quot;password&quot;&gt;Superman*2023&lt;/property&gt;\n\t\t&lt;property name=&quot;schemas&quot;&gt;SHOPPING,ITCAST&lt;/property&gt;\n\t\t&lt;property name=&quot;readOnly&quot;&gt;true&lt;/property&gt;\n\t&lt;/user&gt;\n\n&lt;/mycat:server&gt;\n</code></pre>\n<p><strong>4.MyCat 启动</strong></p>\n<pre><code>#1.重启mycat\n[root@mycat ~]# /usr/local/mycat/bin/mycat restart\nStopping Mycat-server...\nStopped Mycat-server.\nStarting Mycat-server...\n[root@mycat ~]# tail -f  /usr/local/mycat/logs/wrapper.log \n...\nINFO   | jvm 1    | 2023/12/03 15:29:02 | MyCAT Server startup successfully. see logs in logs/mycat.log\ncreate database shopping default charset utf8mb4;\n\n#2.登入mycat\n[root@db3 ~]# mysql -h 192.168.40.213 -P 8066 -uroot -p'Superman*2023'\nmysql&gt; show databases;\n+----------+\n| DATABASE |\n+----------+\n| ITCAST   |\n| SHOPPING |\n+----------+\n2 rows in set (0.00 sec)\n\nmysql&gt; use ITCAST;\nmysql&gt; show tables;\n+------------------+\n| Tables in ITCAST |\n+------------------+\n| tb_log           |\n+------------------+\n\n#3.创建表结构及数据导入\nmysql&gt; CREATE TABLE tb_log (\n    -&gt;   id bigint(20) NOT NULL COMMENT 'ID',\n    -&gt;   model_name varchar(200) DEFAULT NULL COMMENT '模块名',\n    -&gt;   model_value varchar(200) DEFAULT NULL COMMENT '模块值',\n    -&gt;   return_value varchar(200) DEFAULT NULL COMMENT '返回值',\n    -&gt;   return_class varchar(200) DEFAULT NULL COMMENT '返回值类型',\n    -&gt;   operate_user varchar(20) DEFAULT NULL COMMENT '操作用户',\n    -&gt;   operate_time varchar(20) DEFAULT NULL COMMENT '操作时间',\n    -&gt;   param_and_value varchar(500) DEFAULT NULL COMMENT '请求参数名及参数值',\n    -&gt;   operate_class varchar(200) DEFAULT NULL COMMENT '操作类',\n    -&gt;   operate_method varchar(200) DEFAULT NULL COMMENT '操作方法',\n    -&gt;   cost_time bigint(20) DEFAULT NULL COMMENT '执行方法耗时, 单位 ms',\n    -&gt;   source int(1) DEFAULT NULL COMMENT '来源 : 1 PC , 2 Android , 3 IOS',\n    -&gt;   PRIMARY KEY (id)\n    -&gt; ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\nQuery OK, 0 rows affected (0.09 sec)\n OK!\n查看三个数据库可以发现表和表结构都有了\n\n#4.添加数据\nINSERT INTO tb_log (id, model_name, model_value, return_value, return_class, operate_user, operate_time, param_and_value, operate_class, operate_method, cost_time，source) VALUES('1','user','insert','success','java.lang.String','10001','2022-01-06 18:12:28','&#123;\\&quot;age\\&quot;:\\&quot;20\\&quot;,\\&quot;name\\&quot;:\\&quot;Tom\\&quot;,\\&quot;gender\\&quot;:\\&quot;1\\&quot;&#125;','cn.itcast.controller.UserController','insert','10',1);\nINSERT INTO tb_log (id, model_name, model_value, return_value, return_class, operate_user, operate_time, param_and_value, operate_class, operate_method, cost_time，source) VALUES('2','user','insert','success','java.lang.String','10001','2022-01-06 18:12:27','&#123;\\&quot;age\\&quot;:\\&quot;20\\&quot;,\\&quot;name\\&quot;:\\&quot;Tom\\&quot;,\\&quot;gender\\&quot;:\\&quot;1\\&quot;&#125;','cn.itcast.controller.UserController','insert','23',1);\nINSERT INTO tb_log (id, model_name, model_value, return_value, return_class, operate_user, operate_time, param_and_value, operate_class, operate_method, cost_time，source) VALUES('3','user','update','success','java.lang.String','10001','2022-01-06 18:16:45','&#123;\\&quot;age\\&quot;:\\&quot;20\\&quot;,\\&quot;name\\&quot;:\\&quot;Tom\\&quot;,\\&quot;gender\\&quot;:\\&quot;1\\&quot;&#125;','cn.itcast.controller.UserController','update','34',1);\nINSERT INTO tb_log (id, model_name, model_value, return_value, return_class, operate_user, operate_time, param_and_value, operate_class, operate_method, cost_time，source) VALUES('4','user','update','success','java.lang.String','10001','2022-01-06 18:16:45','&#123;\\&quot;age\\&quot;:\\&quot;20\\&quot;,\\&quot;name\\&quot;:\\&quot;Tom\\&quot;,\\&quot;gender\\&quot;:\\&quot;1\\&quot;&#125;','cn.itcast.controller.UserController','update','13',2);\nINSERT INTO tb_log (id, model_name, model_value, return_value, return_class, operate_user, operate_time, param_and_value, operate_class, operate_method, cost_time，source) VALUES('5','user','insert','success','java.lang.String','10001','2022-01-06 18:30:31','&#123;\\&quot;age\\&quot;:\\&quot;200\\&quot;,\\&quot;name\\&quot;:\\&quot;TomCat\\&quot;,\\&quot;gender\\&quot;:\\&quot;0\\&quot;&#125;','cn.itcast.controller.UserController','insert','29',3);\nINSERT INTO tb_log (id, model_name, model_value, return_value, return_class, operate_user, operate_time, param_and_value, operate_class, operate_method, cost_time，source) VALUES('6','user','find','success','java.lang.String','10001','2022-01-06 18:30:31','&#123;\\&quot;age\\&quot;:\\&quot;200\\&quot;,\\&quot;name\\&quot;:\\&quot;TomCat\\&quot;,\\&quot;gender\\&quot;:\\&quot;0\\&quot;&#125;','cn.itcast.controller.UserController','find','29',2);\n\n查看三个数据库内的tb_log表发现有数据了，数据的分布规则是 id模以3的结果为0的数据分布在第一个节点，id模以3的结果为1的数据分布在第二个节点，id模以3的结果为2的数据分布在第三个节点\n</code></pre>\n<h5 id=\"33-分库分表-分片规则\"><a class=\"anchor\" href=\"#33-分库分表-分片规则\">#</a> 3.3 分库分表 - 分片规则</h5>\n<h6 id=\"331-分库分表-分片规则-范围分片\"><a class=\"anchor\" href=\"#331-分库分表-分片规则-范围分片\">#</a> 3.3.1 分库分表 - 分片规则 - 范围分片</h6>\n<p><strong>范围分片</strong>：根据指定的字段及其配置的范围与数据节点的对应情况，来决定该数据属于哪一个分片。</p>\n<p><img loading=\"lazy\" data-src=\"https://img-blog.csdnimg.cn/03a9b7c4bb2e46318de134cf7d88499d.png\" alt=\"在这里插入图片描述\" /></p>\n<p><img loading=\"lazy\" data-src=\"https://img-blog.csdnimg.cn/80ec2db3bffc4e29835565145c89157d.png\" alt=\"在这里插入图片描述\" /></p>\n<pre><code>[root@mycat ~]# cat /usr/local/mycat/conf/autopartition-long.txt\n# range start-end ,data node index\n# K=1000,M=10000.\n0-500M=0\n500M-1000M=1\n1000M-1500M=2\n</code></pre>\n<h6 id=\"332-分库分表-分片规则-取模分片\"><a class=\"anchor\" href=\"#332-分库分表-分片规则-取模分片\">#</a> 3.3.2 分库分表 - 分片规则 - 取模分片</h6>\n<p><strong>取模分片</strong>：根据指定的字段值与节点数量进行求模运算，根据运算结果，来决定该数据属于哪一个分片。</p>\n<p><img loading=\"lazy\" data-src=\"https://img-blog.csdnimg.cn/c863d1cdde204446b992374ed2802d49.png\" alt=\"在这里插入图片描述\" /></p>\n<p><img loading=\"lazy\" data-src=\"https://img-blog.csdnimg.cn/e714e7a5524d4c6f92fca19565f711ba.png\" alt=\"在这里插入图片描述\" /></p>\n<h6 id=\"333-分库分表-分片规则-一致性hash算法\"><a class=\"anchor\" href=\"#333-分库分表-分片规则-一致性hash算法\">#</a> 3.3.3 分库分表 - 分片规则 - 一致性 hash 算法</h6>\n<p><strong>一致性 hash 算法</strong>：所谓一致性哈希，相同的哈希因子计算值总是被划分到相同的分区表中，不会因为分区节点的增加而改变原来数据的分区位置。</p>\n<p><img loading=\"lazy\" data-src=\"https://img-blog.csdnimg.cn/02cd32046b4d447db16be17d418105a9.png\" alt=\"在这里插入图片描述\" /></p>\n<p><img loading=\"lazy\" data-src=\"https://img-blog.csdnimg.cn/eb546ce3d10946bfb4819545cc2f0aba.png\" alt=\"在这里插入图片描述\" /></p>\n<p><strong>一致性 hash 测试</strong></p>\n<p>schema.xml 配置</p>\n<pre><code>[root@mycat ~]# cat /usr/local/mycat/conf/schema.xml \n&lt;?xml version=&quot;1.0&quot;?&gt;\n&lt;!DOCTYPE mycat:schema SYSTEM &quot;schema.dtd&quot;&gt;\n&lt;mycat:schema xmlns:mycat=&quot;http://io.mycat/&quot;&gt;\n\t&lt;schema name=&quot;SHOPPING&quot; checkSQLschema=&quot;true&quot; sqlMaxLimit=&quot;100&quot;&gt;\n\t\t&lt;table name=&quot;tb_goods_base&quot; dataNode=&quot;dn1&quot; primaryKey=&quot;id&quot; /&gt;\n\t\t&lt;table name=&quot;tb_goods_brand&quot; dataNode=&quot;dn1&quot; primaryKey=&quot;id&quot; /&gt;\n\t\t&lt;table name=&quot;tb_goods_cat&quot; dataNode=&quot;dn1&quot; primaryKey=&quot;id&quot; /&gt;\n\t\t&lt;table name=&quot;tb_goods_desc&quot; dataNode=&quot;dn1&quot; primaryKey=&quot;id&quot; /&gt;\n\t\t&lt;table name=&quot;tb_goods_item&quot; dataNode=&quot;dn1&quot; primaryKey=&quot;goods_id&quot; /&gt;\n\t\t\n\t\t&lt;table name=&quot;tb_order_item&quot; dataNode=&quot;dn2&quot; primaryKey=&quot;id&quot; /&gt;\n\t\t&lt;table name=&quot;tb_order_master&quot; dataNode=&quot;dn2&quot; primaryKey=&quot;order_id&quot; /&gt;\n\t\t&lt;table name=&quot;tb_order_pay_log&quot; dataNode=&quot;dn2&quot; primaryKey=&quot;out_trade_no&quot; /&gt;\n\t\t\n\t\t&lt;table name=&quot;tb_user&quot; dataNode=&quot;dn3&quot; primaryKey=&quot;id&quot; /&gt;\n\t\t&lt;table name=&quot;tb_user_address&quot; dataNode=&quot;dn3&quot; primaryKey=&quot;id&quot; /&gt;\n\n                &lt;table name=&quot;tb_areas_provinces&quot; dataNode=&quot;dn1,dn2,dn3&quot; primaryKey=&quot;id&quot; type=&quot;global&quot; /&gt;\n\t\t&lt;table name=&quot;tb_areas_city&quot; dataNode=&quot;dn1,dn2,dn3&quot; primaryKey=&quot;id&quot; type=&quot;global&quot; /&gt;\n\t\t&lt;table name=&quot;tb_areas_region&quot; dataNode=&quot;dn1,dn2,dn3&quot; primaryKey=&quot;id&quot; type=&quot;global&quot; /&gt;\n\t&lt;/schema&gt;\n\n        &lt;schema name=&quot;ITCAST&quot; checkSQLschema=&quot;true&quot; sqlMaxLimit=&quot;100&quot;&gt;\n        \t&lt;table name=&quot;tb_log&quot; dataNode=&quot;dn4,dn5,dn6&quot; primaryKey=&quot;id&quot; rule=&quot;mod-long&quot; /&gt;\n        \t&lt;table name=&quot;tb_order&quot; dataNode=&quot;dn4,dn5,dn6&quot; primaryKey=&quot;id&quot; rule=&quot;sharding-by-murmur&quot; /&gt;\n        &lt;/schema&gt;\n\t\n\t&lt;dataNode name=&quot;dn1&quot; dataHost=&quot;dhost1&quot; database=&quot;shopping&quot; /&gt;\n\t&lt;dataNode name=&quot;dn2&quot; dataHost=&quot;dhost2&quot; database=&quot;shopping&quot; /&gt;\n\t&lt;dataNode name=&quot;dn3&quot; dataHost=&quot;dhost3&quot; database=&quot;shopping&quot; /&gt;\n\n\t&lt;dataNode name=&quot;dn4&quot; dataHost=&quot;dhost1&quot; database=&quot;itcast&quot; /&gt;\n\t&lt;dataNode name=&quot;dn5&quot; dataHost=&quot;dhost2&quot; database=&quot;itcast&quot; /&gt;\n\t&lt;dataNode name=&quot;dn6&quot; dataHost=&quot;dhost3&quot; database=&quot;itcast&quot; /&gt;\n\t\n\t&lt;dataHost name=&quot;dhost1&quot; maxCon=&quot;1000&quot; minCon=&quot;10&quot; balance=&quot;0&quot;\n\t\t\t  writeType=&quot;0&quot; dbType=&quot;mysql&quot; dbDriver=&quot;jdbc&quot; switchType=&quot;1&quot;  slaveThreshold=&quot;100&quot;&gt;\n\t\t&lt;heartbeat&gt;select user()&lt;/heartbeat&gt;\n\t\t\n\t\t&lt;writeHost host=&quot;master&quot; url=&quot;jdbc:mysql://192.168.40.210:3306?useSSL=false&amp;amp;serverTimezone=Asia/Shanghai&amp;amp;characterEncoding=utf8&quot; user=&quot;root&quot; password=&quot;Superman*2023&quot; /&gt;\n\t&lt;/dataHost&gt;\n\t\n\t&lt;dataHost name=&quot;dhost2&quot; maxCon=&quot;1000&quot; minCon=&quot;10&quot; balance=&quot;0&quot;\n\t\t\t  writeType=&quot;0&quot; dbType=&quot;mysql&quot; dbDriver=&quot;jdbc&quot; switchType=&quot;1&quot;  slaveThreshold=&quot;100&quot;&gt;\n\t\t&lt;heartbeat&gt;select user()&lt;/heartbeat&gt;\n\t\t\n\t\t&lt;writeHost host=&quot;master&quot; url=&quot;jdbc:mysql://192.168.40.211:3306?useSSL=false&amp;amp;serverTimezone=Asia/Shanghai&amp;amp;characterEncoding=utf8&quot; user=&quot;root&quot; password=&quot;Superman*2023&quot; /&gt;\n\t&lt;/dataHost&gt;\n\t\n\t&lt;dataHost name=&quot;dhost3&quot; maxCon=&quot;1000&quot; minCon=&quot;10&quot; balance=&quot;0&quot;\n\t\t\t  writeType=&quot;0&quot; dbType=&quot;mysql&quot; dbDriver=&quot;jdbc&quot; switchType=&quot;1&quot;  slaveThreshold=&quot;100&quot;&gt;\n\t\t&lt;heartbeat&gt;select user()&lt;/heartbeat&gt;\n\t\t\n\t\t&lt;writeHost host=&quot;master&quot; url=&quot;jdbc:mysql://192.168.40.212:3306?useSSL=false&amp;amp;serverTimezone=Asia/Shanghai&amp;amp;characterEncoding=utf8&quot; user=&quot;root&quot; password=&quot;Superman*2023&quot; /&gt;\n\t&lt;/dataHost&gt;\n&lt;/mycat:schema&gt;\n</code></pre>\n<p><strong>rule.xml 配置</strong></p>\n<pre><code>[root@mycat ~]# cat /usr/local/mycat/conf/rule.xml \n...\n\t&lt;function name=&quot;murmur&quot;\n\t\tclass=&quot;io.mycat.route.function.PartitionByMurmurHash&quot;&gt;\n\t\t&lt;property name=&quot;seed&quot;&gt;0&lt;/property&gt;&lt;!-- 默认是0 --&gt;\n\t\t&lt;property name=&quot;count&quot;&gt;3&lt;/property&gt;&lt;!-- 要分片的数据库节点数量，必须指定，否则没法分片 --&gt;\n\t\t&lt;property name=&quot;virtualBucketTimes&quot;&gt;160&lt;/property&gt;&lt;!-- 一个实际的数据库节点被映射为这么多虚拟节点，默认是160倍，也就是虚拟节点数是物理节点数的160倍 --&gt;\n\t\t&lt;!-- &lt;property name=&quot;weightMapFile&quot;&gt;weightMapFile&lt;/property&gt; 节点的权重，没有指定权重的节点默认是1。以properties文件的格式填写，以从0开始到count-1的整数值也就是节点索引为key，以节点权重值为值。所有权重值必须是正整数，否则以1代替 --&gt;\n\t\t&lt;!-- &lt;property name=&quot;bucketMapPath&quot;&gt;/etc/mycat/bucketMapPath&lt;/property&gt; \n\t\t\t用于测试时观察各物理节点与虚拟节点的分布情况，如果指定了这个属性，会把虚拟节点的murmur hash值与物理节点的映射按行输出到这个文件，没有默认值，如果不指定，就不会输出任何东西 --&gt;\n\t&lt;/function&gt;\n...\n</code></pre>\n<p><strong>重启 mycat 并插入数据测试</strong></p>\n<pre><code>[root@mycat ~]# /usr/local/mycat/bin/mycat restart\nStopping Mycat-server...\nStopped Mycat-server.\nStarting Mycat-server...\n\n[root@mycat ~]# tail -f  /usr/local/mycat/logs/wrapper.log\n...\nINFO   | jvm 1    | 2023/12/03 22:17:47 | MyCAT Server startup successfully. see logs in logs/mycat.log\n\n[root@db3 ~]# mysql -h 192.168.40.213 -P 8066 -uroot -p'Superman*2023'\nServer version: 5.6.29-mycat-1.6-RELEASE-20161028204710 MyCat Server (OpenCloundDB)\n\nmysql&gt; show databases;\n+----------+\n| DATABASE |\n+----------+\n| ITCAST   |\n| SHOPPING |\n+----------+\n2 rows in set (0.00 sec)\n\nmysql&gt; use ITCAST;\nReading table information for completion of table and column names\nYou can turn off this feature to get a quicker startup with -A\n\nDatabase changed\nmysql&gt; show tables;\n+------------------+\n| Tables in ITCAST |\n+------------------+\n| tb_log           |\n| tb_order         |\n+------------------+\n2 rows in set (0.00 sec)\n\n#创建表结构\ncreate table tb_order(\n    id  varchar(100) not null primary key,\n    money   int null,\n    content varchar(200) null\n);\n\n#插入数据\nINSERT INTO tb_order (id, money, content) VALUES ('b92fdaaf-6fc4-11ec-b831-482ae33c4a2d', 10, 'b92fdaf8-6fc4-11ec-b831-482ae33c4a2d');\nINSERT INTO tb_order (id, money, content) VALUES ('b93482b6-6fc4-11ec-b831-482ae33c4a2d', 20, 'b93482d5-6fc4-11ec-b831-482ae33c4a2d');\nINSERT INTO tb_order (id, money, content) VALUES ('b937e246-6fc4-11ec-b831-482ae33c4a2d', 50, 'b937e25d-6fc4-11ec-b831-482ae33c4a2d');\nINSERT INTO tb_order (id, money, content) VALUES ('b93be2dd-6fc4-11ec-b831-482ae33c4a2d', 100, 'b93be2f9-6fc4-11ec-b831-482ae33c4a2d');\nINSERT INTO tb_order (id, money, content) VALUES ('b93f2d68-6fc4-11ec-b831-482ae33c4a2d', 130, 'b93f2d7d-6fc4-11ec-b831-482ae33c4a2d');\nINSERT INTO tb_order (id, money, content) VALUES ('b9451b98-6fc4-11ec-b831-482ae33c4a2d', 30, 'b9451bcc-6fc4-11ec-b831-482ae33c4a2d');\nINSERT INTO tb_order (id, money, content) VALUES ('b9488ec1-6fc4-11ec-b831-482ae33c4a2d', 560, 'b9488edb-6fc4-11ec-b831-482ae33c4a2d');\nINSERT INTO tb_order (id, money, content) VALUES ('b94be6e6-6fc4-11ec-b831-482ae33c4a2d', 10, 'b94be6ff-6fc4-11ec-b831-482ae33c4a2d');\nINSERT INTO tb_order (id, money, content) VALUES ('b94ee10d-6fc4-11ec-b831-482ae33c4a2d', 123, 'b94ee12c-6fc4-11ec-b831-482ae33c4a2d');\nINSERT INTO tb_order (id, money, content) VALUES ('b952492a-6fc4-11ec-b831-482ae33c4a2d', 145, 'b9524945-6fc4-11ec-b831-482ae33c4a2d');\nINSERT INTO tb_order (id, money, content) VALUES ('b95553ac-6fc4-11ec-b831-482ae33c4a2d', 543, 'b95553c8-6fc4-11ec-b831-482ae33c4a2d');\nINSERT INTO tb_order (id, money, content) VALUES ('b9581cdd-6fc4-11ec-b831-482ae33c4a2d', 17, 'b9581cfa-6fc4-11ec-b831-482ae33c4a2d');\nINSERT INTO tb_order (id, money, content) VALUES ('b95afc0f-6fc4-11ec-b831-482ae33c4a2d', 18, 'b95afc2a-6fc4-11ec-b831-482ae33c4a2d');\nINSERT INTO tb_order (id, money, content) VALUES ('b95daa99-6fc4-11ec-b831-482ae33c4a2d', 134, 'b95daab2-6fc4-11ec-b831-482ae33c4a2d');\nINSERT INTO tb_order (id, money, content) VALUES ('b9667e3c-6fc4-11ec-b831-482ae33c4a2d', 156, 'b9667e60-6fc4-11ec-b831-482ae33c4a2d');\nINSERT INTO tb_order (id, money, content) VALUES ('b96ab489-6fc4-11ec-b831-482ae33c4a2d', 175, 'b96ab4a5-6fc4-11ec-b831-482ae33c4a2d');\nINSERT INTO tb_order (id, money, content) VALUES ('b96e2942-6fc4-11ec-b831-482ae33c4a2d', 180, 'b96e295b-6fc4-11ec-b831-482ae33c4a2d');\nINSERT INTO tb_order (id, money, content) VALUES ('b97092ec-6fc4-11ec-b831-482ae33c4a2d', 123, 'b9709306-6fc4-11ec-b831-482ae33c4a2d');\nINSERT INTO tb_order (id, money, content) VALUES ('b973727a-6fc4-11ec-b831-482ae33c4a2d', 230, 'b9737293-6fc4-11ec-b831-482ae33c4a2d');\nINSERT INTO tb_order (id, money, content) VALUES ('b978840f-6fc4-11ec-b831-482ae33c4a2d', 560, 'b978843c-6fc4-11ec-b831-482ae33c4a2d');\n</code></pre>\n<p>PS：数据按一致性 hash 分布在不同节点</p>\n",
            "tags": [
                "MySQL"
            ]
        },
        {
            "id": "http://xuyong.cn/posts/2771271649.html",
            "url": "http://xuyong.cn/posts/2771271649.html",
            "title": "云原生K8s安全专家CKS认证考题详解",
            "date_published": "2025-04-09T13:38:39.000Z",
            "content_html": "<div class=\"hbe hbe-container\" id=\"hexo-blog-encrypt\" data-wpm=\"抱歉, 这个密码看着不太对, 请再试试。\" data-whm=\"抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容。\">\n  <script id=\"hbeData\" type=\"hbeData\" data-hmacdigest=\"51b7696c170db1f393208c9728cf1b39666792a92daee416449ae392a4ae125d\"></script>\n  <div class=\"hbe hbe-content\">\n    <div class=\"hbe hbe-input hbe-input-xray\">\n      <input class=\"hbe hbe-input-field hbe-input-field-xray\" type=\"password\" id=\"hbePass\">\n      <label class=\"hbe hbe-input-label hbe-input-label-xray\" for=\"hbePass\">\n        <span class=\"hbe hbe-input-label-content hbe-input-label-content-xray\">您好, 这里需要输入密码。</span>\n      </label>\n      <svg class=\"hbe hbe-graphic hbe-graphic-xray\" width=\"300%\" height=\"100%\" viewBox=\"0 0 1200 60\" preserveAspectRatio=\"none\">\n        <path d=\"M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0\"></path>\n        <path d=\"M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0\"></path>\n      </svg>\n    </div>\n  </div>\n</div>\n<script data-pjax src=\"/lib/hbe.js\"></script><link href=\"/css/hbe.style.css\" rel=\"stylesheet\" type=\"text/css\">",
            "tags": [
                "Kubernetes"
            ]
        },
        {
            "id": "http://xuyong.cn/posts/1414180692.html",
            "url": "http://xuyong.cn/posts/1414180692.html",
            "title": "Redis集群（主从+哨兵）模式",
            "date_published": "2025-04-09T11:50:06.000Z",
            "content_html": "<h3 id=\"redis集群主从哨兵模式\"><a class=\"anchor\" href=\"#redis集群主从哨兵模式\">#</a> Redis 集群（主从 + 哨兵）模式</h3>\n<h3 id=\"一-什么是redis主从复制\"><a class=\"anchor\" href=\"#一-什么是redis主从复制\">#</a> 一、什么是 redis 主从复制？</h3>\n<p>主从复制，是指将一台 Redis 服务器的数据，复制到其他的 Redis 服务器。前者称为主节点 (master)，后者称为从节点 (slave), 数据的复制是单向的，只能由主节点到从节点。master 以写为主，slave 以读为主。</p>\n<p><a href=\"https://imgse.com/i/pEgTlKx\"><img loading=\"lazy\" data-src=\"https://s21.ax1x.com/2025/04/09/pEgTlKx.png\" alt=\"pEgTlKx.png\" /></a></p>\n<h3 id=\"二-主从复制的作用\"><a class=\"anchor\" href=\"#二-主从复制的作用\">#</a> 二、主从复制的作用</h3>\n<p>数据冗余：主从复制实现了数据的热备份，是持久化之外的一种数据冗余方式。<br />\n故障恢复：当主节点出现问题时，可以由从节点提供服务，实现快速的故障恢复；实际上是一种服务的冗余。<br />\n负载均衡：在主从复制的基础上，配合读写分离，可以由主节点提供写服务，由从节点提供读服务（即写 Redis 数据时应用连接主节点，读 Redis 数据时应用连接从节点），分担服务器负载；尤其是在写少读多的场景下，通过多个从节点分担读负载，可以大大提高 Redis 服务器的并发量。<br />\n读写分离：用于实现读写分离，主库写、从库读，读写分离不仅可以提高服务器的负载能力，同时可根据需求的变化，改变从库的数量；<br />\n高可用基石：除了上述作用以外，主从复制还是哨兵和集群能够实施的基础，因此说主从复制是 Redis 高可用的基础。</p>\n<h3 id=\"三-实现主从复制\"><a class=\"anchor\" href=\"#三-实现主从复制\">#</a> 三、实现主从复制</h3>\n<table>\n<thead>\n<tr>\n<th>主机名</th>\n<th>IP</th>\n<th>角色</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>redis01</td>\n<td>192.168.40.101</td>\n<td>master</td>\n</tr>\n<tr>\n<td>redis02</td>\n<td>192.168.40.102</td>\n<td>slave</td>\n</tr>\n<tr>\n<td>redis03</td>\n<td>192.168.40.103</td>\n<td>slave</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"31-关闭防火墙-selinux\"><a class=\"anchor\" href=\"#31-关闭防火墙-selinux\">#</a> 3.1 关闭防火墙、selinux</h4>\n<pre><code>[root@master01 ~]# hostnamectl set-hostname redis01\n[root@redis01 ~]# systemctl stop firewalld\n[root@redis01 ~]# systemctl disable firewalld\n[root@redis01 ~]# sed -i 's/^SELINUX=enforcing/SELINUX=disabled/g' /etc/sysconfig/selinux\n[root@redis01 ~]# sed -i 's/^SELINUX=enforcing/SELINUX=disabled/g' /etc/selinux/config\n[root@redis01 ~]# yum install net-tools vim tree lrzsz wget unzip dos2unix bash-completion  lsof ntp ntpdate git -y\n[root@redis01 ~]# yum update -y --exclude=kernel* &amp;&amp; reboot\n[root@redis01 ~]# echo 'Asia/Shanghai' &gt;/etc/timezone\n[root@redis01 ~]# ntpdate time2.aliyun.com\n[root@redis01 ~]# crontab -e\n*/5 * * * * /usr/sbin/ntpdate time2.aliyun.com &amp;&gt; /dev/null\n[root@redis01 ~]# mkdir /soft /data /scripts /backup\n</code></pre>\n<h4 id=\"32-安装redis\"><a class=\"anchor\" href=\"#32-安装redis\">#</a> 3.2 安装 redis</h4>\n<pre><code>[root@redis01 ~]# yum install gcc-c++ -y\n[root@redis01 soft]# wget https://download.redis.io/releases/redis-6.2.11.tar.gz\n[root@redis01 soft]# tar xf redis-6.2.11.tar.gz \n[root@redis01 soft]# ln -s /soft/redis-6.2.11 /soft/redis\n[root@redis01 soft]# cd /soft/redis\n[root@redis01 redis]# make            #执行make编译\n[root@redis01 redis]# make install    #将 src下的许多可执行文件复制到/usr/local/bin 目录下\n[root@redis01 redis]# redis-server /soft/redis/redis.conf &amp;\n[root@redis01 redis]# netstat -lntp|grep redis\ntcp        0      0 127.0.0.1:6379          0.0.0.0:*               LISTEN      69686/redis-server  \ntcp6       0      0 ::1:6379                :::*                    LISTEN      69686/redis-server     \n[root@redis01 redis]# redis-cli shutdown      #关闭Redis服务\n</code></pre>\n<h4 id=\"33-redis配置文件说明\"><a class=\"anchor\" href=\"#33-redis配置文件说明\">#</a> 3.3 redis 配置文件说明</h4>\n<pre><code>[root@db01 redis]# vim redis.conf \nbind 127.0.0.1      \t\t# 绑定的ip\nprotected-mode yes  \t\t# 保护模式\nport 6379           \t\t# 端口设置\ndaemonize yes               # 后台启动\nbind 127.0.0.1      \t\t# 绑定的ip\nprotected-mode yes  \t\t# 保护模式\nport 6379           \t\t# 端口设置\nloglevel notice     \t\t# 记录日志级别\nlogfile &quot;redis.log&quot;         # 日志的文件位置名\ndir ./               \t\t# 日志存储目录\ndatabases 16        \t\t# 数据库的数量，默认是 16 个数据库\nalways-show-logo yes \t\t# 是否总是显示LOGO\n\n# 如果900s内，如果至少有一个1 key进行了修改，我们及进行持久化操作\nsave 900 1\n# 如果300s内，如果至少10 key进行了修改，我们及进行持久化操作\nsave 300 10\n# 如果60s内，如果至少10000 key进行了修改，我们及进行持久化操作\nsave 60 10000\n# 我们之后学习持久化，会自己定义这个测试！\nstop-writes-on-bgsave-error yes   # 持久化如果出错，是否还需要继续工作！\nrdbcompression yes                # 是否压缩 rdb 文件，需要消耗一些cpu资源！\nrdbchecksum yes                   # 保存rdb文件的时候，进行错误的检查校验！\ndbfilename dump.rdb               # rdb 文件保存的名称！\ndir ./                            # rdb 文件保存的目录！\n\nslaveof 192.168.1.154 6379        # 配置主从复制\nrequirepass foobared              # 配置redis登录密码\n\nappendonly no    # 默认是不开启aof模式的，默认是使用rdb方式持久化的，在大部分所有的情况下，rdb完全够用！\nappendfilename &quot;appendonly.aof&quot;   # 持久化的文件的名字\n# appendfsync always        # 每次修改都会 sync。消耗性能\nappendfsync everysec        # 每秒执行一次 sync，可能会丢失这1s的数据！\n# appendfsync no            # 不执行 sync，这个时候操作系统自己同步数据，速度最快！\nno-appendfsync-on-rewrite   #重写时是否可以运用appendsync，默认no，可以保证数据的安全性\n</code></pre>\n<h4 id=\"34-redis环境配置\"><a class=\"anchor\" href=\"#34-redis环境配置\">#</a> 3.4 redis 环境配置</h4>\n<p>#修改 maser 配置文件</p>\n<pre><code>vim redis.conf\nbind 192.168.40.101 #绑定本机ip地址\nport 6739          #绑定端口号\ndaemonize yes      #用来指定redis是否要用守护进程的方式启动，默认为no\npidfile /var/run/redis_6379.pid\nlogfile &quot;redis.log&quot;   #redis日志文件\nrequirepass Superman*2023  #本地redis密码\nmasterauth Superman*2023   #主节点redis密码 注意:从节点也要配置，后边哨兵容灾切换用到\nprotected-mode yes    #保护模式\n</code></pre>\n<p>#修改 slave01 配置文件</p>\n<pre><code>vim redis.conf\nbind 192.168.40.102 #绑定本机ip地址\nport 6739          #绑定端口号\ndaemonize yes      #用来指定redis是否要用守护进程的方式启动，默认为no\npidfile /var/run/redis_6379.pid\nlogfile &quot;redis.log&quot;   #redis日志文件\nreplicaof  192.168.40.101 6379 #配置文件中设置主节点，redis主从复制这个地方只配置从库，注意:主库不需要这个配置\nrequirepass Superman*2023  #本地redis密码\nmasterauth Superman*2023   #主节点redis密码 注意:从节点也要配置，后边哨兵容灾切换用到\nprotected-mode yes    #保护模式\n</code></pre>\n<p>#修改 slave02 配置文件</p>\n<pre><code>vim redis.conf\nbind 192.168.40.103 #绑定本机ip地址\nport 6739          #绑定端口号\ndaemonize yes      #用来指定redis是否要用守护进程的方式启动，默认为no\npidfile /var/run/redis_6379.pid\nlogfile &quot;redis.log&quot;   #redis日志文件\nreplicaof  192.168.40.101 6379 #配置文件中设置主节点，redis主从复制这个地方只配置从库，注意:主库不需要这个配置\nrequirepass Superman*2023  #本地redis密码\nmasterauth Superman*2023   #主节点redis密码 注意:从节点也要配置，后边哨兵容灾切换用到\nprotected-mode yes    #保护模式\n</code></pre>\n<h4 id=\"35-启动3台redis服务\"><a class=\"anchor\" href=\"#35-启动3台redis服务\">#</a> 3.5 启动 3 台 redis 服务</h4>\n<pre><code>#启动redis01\n[root@redis01 redis]# redis-server /soft/redis/redis.conf\n[root@redis0[root@redis01 redis]# redis-server /soft/redis/redis.conf redis]# netstat -lntp|grep redis\ntcp        0      0 192.168.40.101:6379     0.0.0.0:*               LISTEN      117358/redis-server \n\n#启动redis02\n[root@redis02 redis]# redis-server /soft/redis/redis.conf\n[root@redis02 redis]# netstat -lntp|grep redis\ntcp        0      0 192.168.40.102:6379     0.0.0.0:*               LISTEN      18210/redis-server\n\n启动redis03\n[root@redis03 redis]# redis-server /soft/redis/redis.conf\n[root@redis03 redis]# netstat -lntp|grep redis\ntcp        0      0 192.168.40.103:6379     0.0.0.0:*               LISTEN      19186/redis-server \n</code></pre>\n<h4 id=\"36-查看主从状态\"><a class=\"anchor\" href=\"#36-查看主从状态\">#</a> 3.6 查看主从状态</h4>\n<pre><code>#主节点\n[root@redis01 redis]# redis-cli -p 6379 -h 192.168.40.101 -a Superman*2023\n192.168.40.101:6379&gt; info replication\n# Replication\nrole:master\nconnected_slaves:2\nslave0:ip=192.168.40.102,port=6379,state=online,offset=616,lag=0\nslave1:ip=192.168.40.103,port=6379,state=online,offset=616,lag=0\nmaster_failover_state:no-failover\nmaster_replid:93df7cd5095dcccdbf8266787031b17cf638a2ad\nmaster_replid2:0000000000000000000000000000000000000000\nmaster_repl_offset:616\nsecond_repl_offset:-1\nrepl_backlog_active:1\nrepl_backlog_size:1048576\nrepl_backlog_first_byte_offset:1\nrepl_backlog_histlen:616\n\n#从节点\n[root@redis01 redis]# redis-cli -p 6379 -h 192.168.40.103 -a Superman*2023\nWarning: Using a password with '-a' or '-u' option on the command line interface may not be safe.\n192.168.40.103:6379&gt; info replication\n# Replication\nrole:slave\nmaster_host:192.168.40.101\nmaster_port:6379\nmaster_link_status:up\nmaster_last_io_seconds_ago:1\nmaster_sync_in_progress:0\nslave_read_repl_offset:812\nslave_repl_offset:812\nslave_priority:100\nslave_read_only:1\nreplica_announced:1\nconnected_slaves:0\nmaster_failover_state:no-failover\nmaster_replid:93df7cd5095dcccdbf8266787031b17cf638a2ad\nmaster_replid2:0000000000000000000000000000000000000000\nmaster_repl_offset:812\nsecond_repl_offset:-1\nrepl_backlog_active:1\nrepl_backlog_size:1048576\nrepl_backlog_first_byte_offset:295\nrepl_backlog_histlen:518\n</code></pre>\n<h4 id=\"37-测试主从\"><a class=\"anchor\" href=\"#37-测试主从\">#</a> 3.7 测试主从</h4>\n<pre><code>[root@redis01 redis]# redis-cli -p 6379 -h 192.168.40.101 -a Superman*2023\nWarning: Using a password with '-a' or '-u' option on the command line interface may not be safe.\n192.168.40.101:6379&gt; set k1 v1\nOK\n192.168.40.101:6379&gt; set k2 v2\nOK\n\n[root@redis03 redis]# redis-cli -p 6379 -h 192.168.40.103 -a Superman*2023\nWarning: Using a password with '-a' or '-u' option on the command line interface may not be safe.\n192.168.40.103:6379&gt; get k1\n&quot;v1&quot;\n192.168.40.103:6379&gt; get k2\n&quot;v2&quot;\n</code></pre>\n<p><strong>注意:</strong><br />\n1、主机可以写，从机不能写，只能读。主机中的所有数据都会保存到从机中去。<br />\n2、主机断开连接，从机依旧连接到主机的，但是没有写操作，这个时候，主机如果回来了，从机依旧可以直接获取到主机写的信息！<br />\n3、如果是使用命令行，来配置的主从，这个时候如果重启了，就会变回主机！只要变为从机，立马就会从主机中获取值！<br />\n4、主从复制原理<br />\n Slave 启动成功连接到 master 后会发送一个 sync 同步命令<br />\n Master 接到命令，启动后台的存盘进程，同时收集所有接收到的用于修改数据集命令，在后台进程执行完毕之后，master 将传送整个数据文件到 slave，并完成一次完全同步。<br />\n全量复制：slave 服务在接收到数据库文件数据后，将其存盘并加载到内存中。<br />\n增量复制：Master 继续将新的所有收集到的修改命令依次传给 slave，完成同步，但是只要是重新连接 master，一次完全同步（全量复制）将被自动执行！ 主机的数据一定可以在从机中看到。</p>\n<h3 id=\"四-哨兵模式搭建\"><a class=\"anchor\" href=\"#四-哨兵模式搭建\">#</a> 四、哨兵模式搭建</h3>\n<p>1、什么是 redis 哨兵？<br />\nRedisSentinel 是 Redis 的高可用性解决方案，由一个或多个 Sentinel（哨兵）实例组成。它可以监视任意多个主服务器，以及这些主服务器属下的所有从服务器，并在被监视的主服务器进入下线状态时，自动将下线主服务器属下的某个从服务器升级为新的主服务器，它的主要功能如下：<br />\n监控 (Monitoring)：Sentinel 会不断地检查你的主服务器和从服务器是否运作正常。<br />\n通知 (Notification)：当被监控的某个 Redis 服务器出现问题时，Sentinel 可以通过 API 向管理员或者其他应用程序发送通知。<br />\n故障迁移：当主服务器不能正常工作时，Sentinel 会自动进行故障迁移，也就是主从切换。<br />\n统一的配置：管理连接者询问 sentinel 取得主从的地址。</p>\n<p>2、哨兵原理是什么？<br />\nSentinel 使用的算法核心是 Raft 算法，主要用途就是用于分布式系统，系统容错，以及 Leader 选举，每个 Sentinel 都需要定期的执行以下任务：<br />\n每个 Sentinel 会自动发现其他 Sentinel 和从服务器，它以每秒钟一次的频率向它所知的主服务器、从服务器以及其他 Sentinel 实例发送一个 PING 命令。<br />\n如果一个实例（instance）距离最后一次有效回复 PING 命令的时间超过 down-after-milliseconds 选项所指定的值， 那么这个实例会被 Sentinel 标记为主观下线。 有效回复可以是： +PONG 、 -LOADING 或者 -MASTERDOWN 。<br />\n如果一个主服务器被标记为主观下线， 那么正在监视这个主服务器的所有 Sentinel 要以每秒一次的频率确认主服务器的确进入了主观下线状态。<br />\n如果一个主服务器被标记为主观下线， 并且有足够数量的 Sentinel（至少要达到配置文件指定的数量）在指定的时间范围内同意这一判断，那么这个主服务器被标记为客观下线。<br />\n在一般情况下， 每个 Sentinel 会以每 10 秒一次的频率向它已知的所有主服务器和从服务器发送 INFO 命令。当一个主服务器 Sentinel 标记为客观下线时，Sentinel 向下线主服务器的所有从服务器发送 INFO 命令的频率会从 10 秒一次改为每秒一次。<br />\n当没有足够数量的 Sentinel 同意主服务器已经下线， 主服务器的客观下线状态就会被移除。 当主服务器重新向 Sentinel 的 PING 命令返回有效回复时， 主服务器的主管下线状态就会被移除。</p>\n<p><a href=\"https://imgse.com/i/pEgT1r6\"><img loading=\"lazy\" data-src=\"https://s21.ax1x.com/2025/04/09/pEgT1r6.png\" alt=\"pEgT1r6.png\" /></a></p>\n<h4 id=\"41-搭建哨兵\"><a class=\"anchor\" href=\"#41-搭建哨兵\">#</a> 4.1 搭建哨兵</h4>\n<p><em>在每台服务器上部署一个哨兵，配置方式如下:</em></p>\n<pre><code>[root@redis01 redis]# vim sentinel.conf\n#端口默认为26379。\nport 26379\n#关闭保护模式，可以外部访问。\nprotected-mode no\n#设置为后台启动。\ndaemonize yes\n#日志文件。\nlogfile &quot;/soft/redis/sentinel.log&quot;\n#指定服务器IP地址和端口，并且指定当有2台哨兵认为主机挂了，则对主机进行容灾切换。注意:三台哨兵这里的ip配置均为主节点ip 和端口\nsentinel monitor mymaster 192.168.40.101 6379 2\n#当在Redis实例中开启了requirepass，这里就需要提供密码。\nsentinel auth-pass mymaster psw66\n#这里设置了主机多少秒无响应，则认为挂了。\nsentinel down-after-milliseconds mymaster 3000\n#主备切换时，最多有多少个slave同时对新的master进行同步，这里设置为默认的\nsnetinel parallel-syncs mymaster 1\n#故障转移的超时时间，这里设置为三分钟。\nsentinel failover-timeout mymaster 180000\n</code></pre>\n<h4 id=\"42-启动三台服务器上的哨兵\"><a class=\"anchor\" href=\"#42-启动三台服务器上的哨兵\">#</a> 4.2 启动三台服务器上的哨兵</h4>\n<pre><code>#启动redis01的sentine\n[root@redis01 redis]# redis-sentinel /soft/redis/sentinel.conf\n[root@redis01 redis]#  netstat -lntp|grep redis\ntcp        0      0 0.0.0.0:26379           0.0.0.0:*               LISTEN      33536/redis-sentine \ntcp        0      0 192.168.40.101:6379     0.0.0.0:*               LISTEN      117358/redis-server \ntcp6       0      0 :::26379                :::*                    LISTEN      33536/redis-sentine\n\n#启动redis02的sentine\n[root@redis02 redis]# redis-sentinel /soft/redis/sentinel.conf\n[root@redis02 redis]#  netstat -lntp|grep redis\ntcp        0      0 0.0.0.0:26379           0.0.0.0:*               LISTEN      18757/redis-sentine \ntcp        0      0 192.168.40.102:6379     0.0.0.0:*               LISTEN      18210/redis-server  \ntcp6       0      0 :::26379                :::*                    LISTEN      18757/redis-sentine\n\n#启动redis03的sentine\n[root@redis03 redis]# redis-sentinel /soft/redis/sentinel.conf                     \n[root@redis03 redis]# netstat -lntp|grep redis\ntcp        0      0 0.0.0.0:26379           0.0.0.0:*               LISTEN      19745/redis-sentine \ntcp        0      0 192.168.40.103:6379     0.0.0.0:*               LISTEN      19186/redis-server  \ntcp6       0      0 :::26379                :::*                    LISTEN      19745/redis-sentine\n</code></pre>\n<h4 id=\"43-连接客户端\"><a class=\"anchor\" href=\"#43-连接客户端\">#</a> 4.3 连接客户端</h4>\n<pre><code>[root@redis01 redis]# redis-cli -p 26379\n127.0.0.1:26379&gt;  info sentinel\n# Sentinel\nsentinel_masters:1\nsentinel_tilt:0\nsentinel_running_scripts:0\nsentinel_scripts_queue_length:0\nsentinel_simulate_failure_flags:0\nmaster0:name=mymaster,status=ok,address=192.168.40.101:6379,slaves=2,sentinels=3\n</code></pre>\n<h4 id=\"44-redis容灾切换\"><a class=\"anchor\" href=\"#44-redis容灾切换\">#</a> 4.4 redis 容灾切换</h4>\n<pre><code>#连接redis客户端\n[root@redis01 redis]# redis-cli -p 6379 -h 192.168.40.101 \n#验证密码\n192.168.40.101:6379&gt; auth Superman*2023\nOK\n#关闭redis服务\n192.168.40.101:6379&gt; shutdown\nnot connected&gt;\n#退出客户端\nnot connected&gt; exit\n</code></pre>\n<p>关闭主节点之后，我们去查看哨兵日志:</p>\n<pre><code>[root@redis01 ~]# tail -f /soft/redis/sentinel.log \n91936:X 14 Apr 2023 23:26:23.838 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo\n91936:X 14 Apr 2023 23:26:23.838 # Redis version=6.2.11, bits=64, commit=00000000, modified=0, pid=91936, just started\n91936:X 14 Apr 2023 23:26:23.838 # Configuration loaded\n91936:X 14 Apr 2023 23:26:23.838 * monotonic clock: POSIX clock_gettime\n91936:X 14 Apr 2023 23:26:23.839 * Running mode=sentinel, port=26379.\n91936:X 14 Apr 2023 23:26:23.839 # Sentinel ID is 835b4c8544fb250af5fd479f834ee369cc4f388e\n91936:X 14 Apr 2023 23:26:23.839 # +monitor master mymaster 192.168.40.101 6379 quorum 2\n\n\n\n91936:X 14 Apr 2023 23:31:25.329 # +sdown master mymaster 192.168.40.101 6379   #这里应该是发现主节点宕机\n91936:X 14 Apr 2023 23:31:25.359 # +new-epoch 5\n91936:X 14 Apr 2023 23:31:25.360 # +vote-for-leader ab43979285cb47b1b459aeb0ab91b63fa9d1a989 5\n91936:X 14 Apr 2023 23:31:25.401 # +odown master mymaster 192.168.40.101 6379 #quorum 3/2 两个哨兵都觉得主节点宕机了\n91936:X 14 Apr 2023 23:31:25.401 # Next failover delay: I will not start a failover before Fri Apr 14 23:37:25 2023\n91936:X 14 Apr 2023 23:31:26.468 # +config-update-from sentinel ab43979285cb47b1b459aeb0ab91b63fa9d1a989 192.168.40.102 26379 @ mymaster 192.168.40.101 6379\n91936:X 14 Apr 2023 23:31:26.468 # +switch-master mymaster 192.168.40.101 6379 192.168.40.103 6379 #通过投票选举40.103为新的主节点\n91936:X 14 Apr 2023 23:31:26.468 * +slave slave 192.168.40.102:6379 192.168.40.102 6379 @ mymaster 192.168.40.103 6379\n91936:X 14 Apr 2023 23:31:26.469 * +slave slave 192.168.40.101:6379 192.168.40.101 6379 @ mymaster 192.168.40.103 6379\n</code></pre>\n<p>下面我们去 40.103 下查看哨兵主从切换是否成功</p>\n<pre><code>[root@redis03 redis]# redis-cli -p 6379 -h 192.168.40.103\n192.168.40.103:6379&gt; auth Superman*2023\nOK\n192.168.40.103:6379&gt; info replication\n# Replication\nrole:master   # 40.103变成主节点了\nconnected_slaves:1   # 下面的从机个数为1\nslave0:ip=192.168.40.102,port=6379,state=online,offset=108708,lag=1\nmaster_failover_state:no-failover\nmaster_replid:cf36f762dcae0c07b54f7287dc19d7ecc0d50dd3\nmaster_replid2:a7de32d10b2d31f8886c84ca91dc7f055439c935\nmaster_repl_offset:108851\nsecond_repl_offset:59887\nrepl_backlog_active:1\nrepl_backlog_size:1048576\nrepl_backlog_first_byte_offset:1\nrepl_backlog_histlen:108851\n</code></pre>\n<p>重新连接挂掉的主节点</p>\n<pre><code>[root@redis01 redis]# redis-server redis.conf \n[root@redis01 redis]#  redis-cli -p 6379 -h 192.168.40.101\n192.168.40.101:6379&gt; auth Superman*2023\nOK\n192.168.40.101:6379&gt; info replication\n# Replication\nrole:slave          #主节点连接回来之后自动变成了从节点，并且成功连上了主机\nmaster_host:192.168.40.103\nmaster_port:6379\nmaster_link_status:up\nmaster_last_io_seconds_ago:1\nmaster_sync_in_progress:0\nslave_read_repl_offset:130607\nslave_repl_offset:130607\nslave_priority:100\nslave_read_only:1\nreplica_announced:1\nconnected_slaves:0\nmaster_failover_state:no-failover\nmaster_replid:cf36f762dcae0c07b54f7287dc19d7ecc0d50dd3\nmaster_replid2:0000000000000000000000000000000000000000\nmaster_repl_offset:130607\nsecond_repl_offset:-1\nrepl_backlog_active:1\nrepl_backlog_size:1048576\nrepl_backlog_first_byte_offset:126982\nrepl_backlog_histlen:3626\n</code></pre>\n<p>再去主节点确认一下</p>\n<pre><code>192.168.40.103:6379&gt; info replication\n# Replication\nrole:master\nconnected_slaves:2   #两个从节点\nslave0:ip=192.168.40.102,port=6379,state=online,offset=147879,lag=1\nslave1:ip=192.168.40.101,port=6379,state=online,offset=147879,lag=1\nmaster_failover_state:no-failover\nmaster_replid:cf36f762dcae0c07b54f7287dc19d7ecc0d50dd3\nmaster_replid2:a7de32d10b2d31f8886c84ca91dc7f055439c935\nmaster_repl_offset:148165\nsecond_repl_offset:59887\nrepl_backlog_active:1\nrepl_backlog_size:1048576\nrepl_backlog_first_byte_offset:1\nrepl_backlog_histlen:148165\n</code></pre>\n<p>五、哨兵模式的优缺点<br />\n 1. 优点</p>\n<p>哨兵集群，基于主从复制模式，所有的主从配置优点，它全有</p>\n<p>主从可以切换，故障可以转移，系统的可用性就会更好</p>\n<p>哨兵模式就是主从模式的升级，手动到自动，更加健壮！</p>\n<p>2. 缺点</p>\n<p>Redis 不好在线扩容，集群容量一旦到达上限，在线扩容就十分麻烦</p>\n<p>哨兵模式的配置繁琐</p>\n<p>3. 哨兵模式的配置文件详解</p>\n<pre><code># Example sentinel.conf\n# 哨兵sentinel实例运行的端口 默认26379\nport 26379\n \n# 哨兵sentinel的工作目录\ndir /tmp\n \n# 哨兵sentinel监控的redis主节点的 ip port\n# master-name 可以自己命名的主节点名字 只能由字母A-z、数字0-9 、这三个字符&quot;.-_&quot;组成。\n# quorum 配置多少个sentinel哨兵统一认为master主节点失联 那么这时客观上认为主节点失联了\n# sentinel monitor &lt;master-name&gt; &lt;ip&gt; &lt;redis-port&gt; &lt;quorum&gt;\nsentinel monitor mymaster 127.0.0.1 6379 2\n  \n# 当在Redis实例中开启了requirepass foobared 授权密码这样所有连接Redis实例的客户端都要提供 密码\n# 设置哨兵sentinel 连接主从的密码 注意必须为主从设置一样的验证密码\n# sentinel auth-pass &lt;master-name&gt; &lt;password&gt;\nsentinel auth-pass mymaster MySUPER--secret-0123passw0rd\n \n# 指定多少毫秒之后 主节点没有应答哨兵sentinel 此时哨兵主观上认为主节点下线 默认30秒\n# sentinel down-after-milliseconds &lt;master-name&gt; &lt;milliseconds&gt;\nsentinel down-after-milliseconds mymaster 30000\n \n# 这个配置项指定了在发生failover主备切换时最多可以有多少个slave同时对新的master进行同步，这个数字越小，完成failover所需的时间就越长， 但是如果这个数字越大，就意味着越 多的slave因为replication而不可用。 可以通过将这个值设为 1 来保证每次只有一个slave 处于不能处理命令请求的状态。\n# sentinel parallel-syncs &lt;master-name&gt; &lt;numslaves&gt;\nsentinel parallel-syncs mymaster 1\n \n# 故障转移的超时时间 failover-timeout 可以用在以下这些方面：\n#1. 同一个sentinel对同一个master两次failover之间的间隔时间。\n#2. 当一个slave从一个错误的master那里同步数据开始计算时间。直到slave被纠正为向正确的master那 里同步数据时。\n#3.当想要取消一个正在进行的failover所需要的时间。\n#4.当进行failover时，配置所有slaves指向新的master所需的最大时间。不过，即使过了这个超时， slaves依然会被正确配置为指向master，但是就不按parallel-syncs所配置的规则来了 # 默认三分钟\n# sentinel failover-timeout &lt;master-name&gt; &lt;milliseconds&gt; bilibili：\nsentinel failover-timeout mymaster 180000\n \n# SCRIPTS EXECUTION\n#配置当某一事件发生时所需要执行的脚本，可以通过脚本来通知管理员，例如当系统运行不正常时发邮件通知 相关人员。\n#对于脚本的运行结果有以下规则：\n#若脚本执行后返回1，那么该脚本稍后将会被再次执行，重复次数目前默认为10\n#若脚本执行后返回2，或者比2更高的一个返回值，脚本将不会重复执行。\n#如果脚本在执行过程中由于收到系统中断信号被终止了，则同返回值为1时的行为相同。\n#一个脚本的最大执行时间为60s，如果超过这个时间，脚本将会被一个SIGKILL信号终止，之后重新执行。\n#通知型脚本:当sentinel有任何警告级别的事件发生时（比如说redis实例的主观失效和客观失效等等）， 将会去调用这个脚本，这时这个脚本应该通过邮件，SMS等方式去通知系统管理员关于系统不正常运行的信 息。调用该脚本时，将传给脚本两个参数，一个是事件的类型，一个是事件的描述。如果sentinel.conf配 置文件中配置了这个脚本路径，那么必须保证这个脚本存在于这个路径，并且是可执行的，否则sentinel无 法正常启动成功。\n#通知脚本\n# shell编程\n# sentinel notification-script &lt;master-name&gt; &lt;script-path&gt; sentinel\nnotification-script mymaster /var/redis/notify.sh\n \n# 客户端重新配置主节点参数脚本\n# 当一个master由于failover而发生改变时，这个脚本将会被调用，通知相关的客户端关于master地址已 经发生改变的信息。\n# 以下参数将会在调用脚本时传给脚本:\n# &lt;master-name&gt; &lt;role&gt; &lt;state&gt; &lt;from-ip&gt; &lt;from-port&gt; &lt;to-ip&gt; &lt;to-port&gt; # 目前&lt;state&gt;总是“failover”,\n# &lt;role&gt;是“leader”或者“observer”中的一个。\n# 参数 from-ip, from-port, to-ip, to-port是用来和旧的master和新的master(即旧的slave)通 信的# 这个脚本应该是通用的，能被多次调用，不是针对性的。\n# sentinel client-reconfig-script &lt;master-name&gt; &lt;script-path&gt; sentinel client-reconfig-\nscript mymaster /var/redis/reconfig.sh\n</code></pre>\n<p><em>再去看一下 redis 的配置文件和哨兵的配置文件，你会惊讶的发现，里边的配置文件已经被改过来了。</em></p>\n<pre><code>cat redis.con\n...\nreplicaof 192.168.40.103 6379\n</code></pre>\n",
            "tags": [
                "Redis"
            ]
        },
        {
            "id": "http://xuyong.cn/posts/3166738000.html",
            "url": "http://xuyong.cn/posts/3166738000.html",
            "title": "Kubeadm高可用安装K8s集群",
            "date_published": "2025-04-09T10:28:34.000Z",
            "content_html": "<h2 id=\"kubeadm高可用安装k8s集群\"><a class=\"anchor\" href=\"#kubeadm高可用安装k8s集群\">#</a> Kubeadm 高可用安装 K8s 集群</h2>\n<h4 id=\"1-基本配置\"><a class=\"anchor\" href=\"#1-基本配置\">#</a> 1. 基本配置</h4>\n<h5 id=\"11-基本环境配置\"><a class=\"anchor\" href=\"#11-基本环境配置\">#</a> 1.1 基本环境配置</h5>\n<table>\n<thead>\n<tr>\n<th>主机名</th>\n<th>IP 地址</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>k8s-master01 ~ 03</td>\n<td>192.168.1.71 ~ 73</td>\n<td>master 节点 * 3</td>\n</tr>\n<tr>\n<td>/</td>\n<td>192.168.1.70</td>\n<td>keepalived 虚拟 IP（不占用机器）</td>\n</tr>\n<tr>\n<td>k8s-node01 ~ 02</td>\n<td>192.168.1.74/75</td>\n<td>worker 节点 * 2</td>\n</tr>\n</tbody>\n</table>\n<p><em>请统一替换这些网段，Pod 网段和 service 和宿主机网段不要重复！！！</em></p>\n<table>\n<thead>\n<tr>\n<th><em><strong>* 配置信息 *</strong></em></th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>系统版本</td>\n<td>Rocky Linux 8/9</td>\n</tr>\n<tr>\n<td>Containerd</td>\n<td>latest</td>\n</tr>\n<tr>\n<td>Pod 网段</td>\n<td>172.16.0.0/16</td>\n</tr>\n<tr>\n<td>Service 网段</td>\n<td>10.96.0.0/16</td>\n</tr>\n</tbody>\n</table>\n<p><mark>所有节点</mark>更改主机名（其它节点按需修改）：</p>\n<pre><code>hostnamectl set-hostname k8s-master01 \n</code></pre>\n<p><mark>所有节点</mark>配置 hosts，修改 /etc/hosts 如下：</p>\n<pre><code>[root@k8s-master01 ~]# cat /etc/hosts\n127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4\n::1         localhost localhost.localdomain localhost6 localhost6.localdomain6\n192.168.1.71 k8s-master01\n192.168.1.72 k8s-master02\n192.168.1.73 k8s-master03\n192.168.1.74 k8s-node01\n192.168.1.75 k8s-node02\n</code></pre>\n<p><mark>所有节点</mark>配置 yum 源：</p>\n<pre><code># 配置基础源\nsed -e 's|^mirrorlist=|#mirrorlist=|g' \\\n    -e 's|^#baseurl=http://dl.rockylinux.org/$contentdir|baseurl=https://mirrors.aliyun.com/rockylinux|g' \\\n    -i.bak \\\n    /etc/yum.repos.d/*.repo\n\nyum makecache\n</code></pre>\n<p><mark>所有节点</mark>必备工具安装：</p>\n<pre><code>yum install wget jq psmisc vim net-tools telnet yum-utils device-mapper-persistent-data lvm2 git rsyslog -y\n</code></pre>\n<p><mark>所有节点</mark>关闭防火墙、selinux、dnsmasq、swap、开启 rsyslog。服务器配置如下：</p>\n<pre><code>systemctl disable --now firewalld \nsystemctl disable --now dnsmasq\nsetenforce 0\nsed -i 's#SELINUX=enforcing#SELINUX=disabled#g' /etc/sysconfig/selinux\nsed -i 's#SELINUX=enforcing#SELINUX=disabled#g' /etc/selinux/config\nsystemctl enable --now rsyslog\n</code></pre>\n<p><mark>所有节点</mark>关闭 swap 分区：</p>\n<pre><code>swapoff -a &amp;&amp; sysctl -w vm.swappiness=0\nsed -ri '/^[^#]*swap/s@^@#@' /etc/fstab\n</code></pre>\n<p><mark>所有节点</mark>安装 ntpdate：</p>\n<pre><code>sudo dnf install epel-release -y\nsudo dnf config-manager --set-enabled epel\nsudo dnf install ntpsec\n</code></pre>\n<p><mark>所有节点</mark>同步时间并配置上海时区：</p>\n<pre><code>ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime\necho 'Asia/Shanghai' &gt;/etc/timezone\nntpdate time2.aliyun.com\n# 加入到crontab\ncrontab -e\n*/5 * * * * /usr/sbin/ntpdate time2.aliyun.com\n</code></pre>\n<p><mark>所有节点</mark>配置 limit：</p>\n<pre><code>ulimit -SHn 65535\nvim /etc/security/limits.conf\n# 末尾添加如下内容\n* soft nofile 65536\n* hard nofile 131072\n* soft nproc 65535\n* hard nproc 655350\n* soft memlock unlimited\n* hard memlock unlimited\n</code></pre>\n<p><mark>所有节点</mark>升级系统：</p>\n<pre><code>yum update -y\n</code></pre>\n<p><mark>Master01 节点</mark>免密钥登录其他节点，安装过程中生成配置文件和证书均在 Master01 上操作，集群管理也在 Master01 上操作：</p>\n<pre><code>ssh-keygen -t rsa\nfor i in k8s-master01 k8s-master02 k8s-master03 k8s-node01 k8s-node02;do ssh-copy-id -i .ssh/id_rsa.pub $i;done\n</code></pre>\n<p><em>注意：公有云环境，可能需要把 kubectl 放在一个非 Master 节点上</em></p>\n<p><mark>Master01 节点</mark>下载安装所有的源码文件：</p>\n<pre><code>cd /root/ ; git clone https://gitee.com/chinagei/k8s-ha-install\n</code></pre>\n<h5 id=\"12-内核配置\"><a class=\"anchor\" href=\"#12-内核配置\">#</a> 1.2 内核配置</h5>\n<p><mark>所有节点</mark>安装 ipvsadm：</p>\n<pre><code>yum install ipvsadm ipset sysstat conntrack libseccomp -y\n</code></pre>\n<p><mark>所有节点</mark>配置 ipvs 模块：</p>\n<pre><code>modprobe -- ip_vs\nmodprobe -- ip_vs_rr\nmodprobe -- ip_vs_wrr\nmodprobe -- ip_vs_sh\nmodprobe -- nf_conntrack\n</code></pre>\n<p><mark>所有节点</mark>创建 ipvs.conf，并配置开机自动加载：</p>\n<pre><code>vim /etc/modules-load.d/ipvs.conf \n# 加入以下内容\nip_vs\nip_vs_lc\nip_vs_wlc\nip_vs_rr\nip_vs_wrr\nip_vs_lblc\nip_vs_lblcr\nip_vs_dh\nip_vs_sh\nip_vs_fo\nip_vs_nq\nip_vs_sed\nip_vs_ftp\nip_vs_sh\nnf_conntrack\nip_tables\nip_set\nxt_set\nipt_set\nipt_rpfilter\nipt_REJECT\nipip\n</code></pre>\n<p><mark>所有节点</mark>然后执行 systemctl enable --now systemd-modules-load.service 即可（报错不用管）</p>\n<pre><code>systemctl enable --now systemd-modules-load.service\n</code></pre>\n<p><mark>所有节点</mark>内核优化配置：</p>\n<pre><code>cat &lt;&lt;EOF &gt; /etc/sysctl.d/k8s.conf\nnet.ipv4.ip_forward = 1\nnet.bridge.bridge-nf-call-iptables = 1\nnet.bridge.bridge-nf-call-ip6tables = 1\nfs.may_detach_mounts = 1\nnet.ipv4.conf.all.route_localnet = 1\nvm.overcommit_memory=1\nvm.panic_on_oom=0\nfs.inotify.max_user_watches=89100\nfs.file-max=52706963\nfs.nr_open=52706963\nnet.netfilter.nf_conntrack_max=2310720\n\nnet.ipv4.tcp_keepalive_time = 600\nnet.ipv4.tcp_keepalive_probes = 3\nnet.ipv4.tcp_keepalive_intvl =15\nnet.ipv4.tcp_max_tw_buckets = 36000\nnet.ipv4.tcp_tw_reuse = 1\nnet.ipv4.tcp_max_orphans = 327680\nnet.ipv4.tcp_orphan_retries = 3\nnet.ipv4.tcp_syncookies = 1\nnet.ipv4.tcp_max_syn_backlog = 16384\nnet.ipv4.ip_conntrack_max = 65536\nnet.ipv4.tcp_max_syn_backlog = 16384\nnet.ipv4.tcp_timestamps = 0\nnet.core.somaxconn = 16384\nEOF\n</code></pre>\n<p><mark>所有节点</mark>应用配置：</p>\n<pre><code>sysctl --system\n</code></pre>\n<p><mark>所有节点</mark>配置完内核后，重启机器，之后查看内核模块是否已自动加载：</p>\n<pre><code>reboot\nlsmod | grep --color=auto -e ip_vs -e nf_conntrack\n</code></pre>\n<h4 id=\"2-高可用组件安装\"><a class=\"anchor\" href=\"#2-高可用组件安装\">#</a> 2. 高可用组件安装</h4>\n<p><em>注意：如果安装的不是高可用集群，haproxy 和 keepalived 无需安装</em></p>\n<p><em>注意：公有云要用公有云自带的负载均衡，比如阿里云的 SLB、NLB，腾讯云的 ELB，用来替代 haproxy 和 keepalived，因为公有云大部分都是不支持 keepalived 的。</em></p>\n<p><mark>所有 Master 节点</mark>通过 yum 安装 HAProxy 和 KeepAlived：</p>\n<pre><code>yum install keepalived haproxy -y\n</code></pre>\n<p><mark>所有 Master 节点</mark>配置 HAProxy，需要注意黄色部分的 IP：</p>\n<pre><code>[root@k8s-master01 etc]# mkdir /etc/haproxy\n[root@k8s-master01 etc]# vim /etc/haproxy/haproxy.cfg \nglobal\n  maxconn  2000\n  ulimit-n  16384\n  log  127.0.0.1 local0 err\n  stats timeout 30s\n\ndefaults\n  log global\n  mode  http\n  option  httplog\n  timeout connect 5000\n  timeout client  50000\n  timeout server  50000\n  timeout http-request 15s\n  timeout http-keep-alive 15s\n\nfrontend monitor-in\n  bind *:33305\n  mode http\n  option httplog\n  monitor-uri /monitor\n\nfrontend k8s-master\n  bind 0.0.0.0:16443       #HAProxy监听端口\n  bind 127.0.0.1:16443     #HAProxy监听端口\n  mode tcp\n  option tcplog\n  tcp-request inspect-delay 5s\n  default_backend k8s-master\n\nbackend k8s-master\n  mode tcp\n  option tcplog\n  option tcp-check\n  balance roundrobin\n  default-server inter 10s downinter 5s rise 2 fall 2 slowstart 60s maxconn 250 maxqueue 256 weight 100\n  server k8s-master01\t192.168.1.71:6443  check       #API Server IP地址\n  server k8s-master02\t192.168.1.72:6443  check       #API Server IP地址\n  server k8s-master03\t192.168.1.73:6443  check       #API Server IP地址\n</code></pre>\n<p><mark>所有 Master 节点</mark>配置 KeepAlived，需要注意黄色部分的配置。</p>\n<p><mark>Master01 节点</mark>的配置：</p>\n<pre><code>[root@k8s-master01 etc]# mkdir /etc/keepalived\n\n[root@k8s-master01 ~]# vim /etc/keepalived/keepalived.conf \n! Configuration File for keepalived\nglobal_defs &#123;\n    router_id LVS_DEVEL\nscript_user root\n    enable_script_security\n&#125;\nvrrp_script chk_apiserver &#123;\n    script &quot;/etc/keepalived/check_apiserver.sh&quot;\n    interval 5\n    weight -5\n    fall 2  \nrise 1\n&#125;\nvrrp_instance VI_1 &#123;\n    state MASTER\n    interface ens160               #网卡名称\n    mcast_src_ip 192.168.1.71      #K8s-master01 IP地址\n    virtual_router_id 51\n    priority 101\n    advert_int 2\n    authentication &#123;\n        auth_type PASS\n        auth_pass K8SHA_KA_AUTH\n    &#125;\n    virtual_ipaddress &#123;\n        192.168.1.70        #VIP地址\n    &#125;\n    track_script &#123;\n       chk_apiserver\n    &#125;\n&#125;\t\n</code></pre>\n<p><mark>Master02 节点</mark>的配置：</p>\n<pre><code># vim /etc/keepalived/keepalived.conf \n\n! Configuration File for keepalived\nglobal_defs &#123;\n    router_id LVS_DEVEL\nscript_user root\n    enable_script_security\n&#125;\nvrrp_script chk_apiserver &#123;\n    script &quot;/etc/keepalived/check_apiserver.sh&quot;\n   interval 5\n    weight -5\n    fall 2  \nrise 1\n&#125;\nvrrp_instance VI_1 &#123;\n    state BACKUP\n    interface ens160                #网卡名称\n    mcast_src_ip 192.168.1.72       #K8s-master02 IP地址\n    virtual_router_id 51\n    priority 100\n    advert_int 2\n    authentication &#123;\n        auth_type PASS\n        auth_pass K8SHA_KA_AUTH\n    &#125;\n    virtual_ipaddress &#123;\n        192.168.1.70              #VIP地址\n    &#125;\n    track_script &#123;\n       chk_apiserver\n    &#125;\n&#125;\n</code></pre>\n<p><mark>Master03 节点</mark>的配置：</p>\n<pre><code># vim /etc/keepalived/keepalived.conf \n\n! Configuration File for keepalived\nglobal_defs &#123;\n    router_id LVS_DEVEL\nscript_user root\n    enable_script_security\n&#125;\nvrrp_script chk_apiserver &#123;\n    script &quot;/etc/keepalived/check_apiserver.sh&quot;\n interval 5\n    weight -5\n    fall 2  \nrise 1\n&#125;\nvrrp_instance VI_1 &#123;\n    state BACKUP\n    interface ens160                 #网卡名称\n    mcast_src_ip 192.168.1.73        #K8s-master03 IP地址\n    virtual_router_id 51\n    priority 100\n    advert_int 2\n    authentication &#123;\n        auth_type PASS\n        auth_pass K8SHA_KA_AUTH\n    &#125;\n    virtual_ipaddress &#123;\n        192.168.1.70          #VIP地址\n    &#125;\n    track_script &#123;\n       chk_apiserver\n    &#125;\n&#125;\n</code></pre>\n<p><mark>所有 master 节点</mark>配置 KeepAlived 健康检查文件：</p>\n<pre><code>[root@k8s-master01 keepalived]# vim /etc/keepalived/check_apiserver.sh \n#!/bin/bash\n\nerr=0\nfor k in $(seq 1 3)\ndo\n    check_code=$(pgrep haproxy)\n    if [[ $check_code == &quot;&quot; ]]; then\n        err=$(expr $err + 1)\n        sleep 1\n        continue\n    else\n        err=0\n        break\n    fi\ndone\n\nif [[ $err != &quot;0&quot; ]]; then\n    echo &quot;systemctl stop keepalived&quot;\n    /usr/bin/systemctl stop keepalived\n    exit 1\nelse\n    exit 0\nfi\n</code></pre>\n<p><mark>所有 master 节点</mark>配置健康检查文件添加执行权限：</p>\n<pre><code>chmod +x /etc/keepalived/check_apiserver.sh\n</code></pre>\n<p><mark>所有 master 节点</mark>启动 haproxy 和 keepalived：</p>\n<pre><code>[root@k8s-master01 keepalived]# systemctl daemon-reload\n[root@k8s-master01 keepalived]# systemctl enable --now haproxy\n[root@k8s-master01 keepalived]# systemctl enable --now keepalived\n</code></pre>\n<p>重要：如果安装了 keepalived 和 haproxy，需要测试 keepalived 是否是正常的</p>\n<pre><code>所有节点测试VIP\n[root@k8s-master01 ~]# ping 192.168.1.70 -c 4\nPING 192.168.1.70 (192.168.1.70) 56(84) bytes of data.\n64 bytes from 192.168.1.70: icmp_seq=1 ttl=64 time=0.464 ms\n64 bytes from 192.168.1.70: icmp_seq=2 ttl=64 time=0.063 ms\n64 bytes from 192.168.1.70: icmp_seq=3 ttl=64 time=0.062 ms\n64 bytes from 192.168.1.70: icmp_seq=4 ttl=64 time=0.063 ms\n\n[root@k8s-master01 ~]# telnet 192.168.1.70 16443\nTrying 192.168.1.70...\nConnected to 192.168.1.70.\nEscape character is '^]'.\nConnection closed by foreign host.\n</code></pre>\n<p>如果 ping 不通且 telnet 没有出现 ] ，则认为 VIP 不可以，不可在继续往下执行，需要排查 keepalived 的问题，比如防火墙和 selinux，haproxy 和 keepalived 的状态，监听端口等</p>\n<ul>\n<li>所有节点查看防火墙状态必须为 disable 和 inactive：systemctl status firewalld</li>\n<li>所有节点查看 selinux 状态，必须为 disable：getenforce</li>\n<li>master 节点查看 haproxy 和 keepalived 状态：systemctl status keepalived haproxy</li>\n<li>master 节点查看监听端口：netstat -lntp</li>\n</ul>\n<p>如果以上都没有问题，需要确认：</p>\n<ol>\n<li>\n<p>是否是公有云机器</p>\n</li>\n<li>\n<p>是否是私有云机器（类似 OpenStack）</p>\n</li>\n</ol>\n<p>上述公有云一般都是不支持 keepalived，私有云可能也有限制，需要和自己的私有云管理员咨询</p>\n<h4 id=\"3-runtime安装\"><a class=\"anchor\" href=\"#3-runtime安装\">#</a> 3. Runtime 安装</h4>\n<p>如果安装的版本低于 1.24，选择 Docker 和 Containerd 均可，高于 1.24 建议选择 Containerd 作为 Runtime，不再推荐使用 Docker 作为 Runtime。</p>\n<h5 id=\"31-安装containerd\"><a class=\"anchor\" href=\"#31-安装containerd\">#</a> 3.1 安装 Containerd</h5>\n<p><mark>所有节点</mark>配置安装源：</p>\n<pre><code>yum install wget jq psmisc vim net-tools telnet yum-utils device-mapper-persistent-data lvm2 git -y\nyum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\n</code></pre>\n<p><mark>所有节点</mark>安装 docker-ce（如果在以前已经安装过，需要重新安装更新一下）：</p>\n<pre><code># yum install docker-ce containerd -y\n</code></pre>\n<p><em>可以无需启动 Docker，只需要配置和启动 Containerd 即可。</em></p>\n<p>首先配置 Containerd 所需的模块（<mark>所有节点</mark>）：</p>\n<pre><code># cat &lt;&lt;EOF | sudo tee /etc/modules-load.d/containerd.conf\noverlay\nbr_netfilter\nEOF\n</code></pre>\n<p><mark>所有节点</mark>加载模块：</p>\n<pre><code># modprobe -- overlay\n# modprobe -- br_netfilter\n</code></pre>\n<p><mark>所有节点</mark>，配置 Containerd 所需的内核：</p>\n<pre><code># cat &lt;&lt;EOF | sudo tee /etc/sysctl.d/99-kubernetes-cri.conf\nnet.bridge.bridge-nf-call-iptables  = 1\nnet.ipv4.ip_forward                 = 1\nnet.bridge.bridge-nf-call-ip6tables = 1\nEOF\n</code></pre>\n<p><mark>所有节点</mark>加载内核：</p>\n<pre><code># sysctl --system\n</code></pre>\n<p><mark>所有节点</mark>生成 Containerd 的配置文件：</p>\n<pre><code># mkdir -p /etc/containerd\n# containerd config default | tee /etc/containerd/config.toml\n</code></pre>\n<p><mark>所有节点</mark>更改 Containerd 的 Cgroup 和 Pause 镜像配置：</p>\n<pre><code>sed -i 's#SystemdCgroup = false#SystemdCgroup = true#g' /etc/containerd/config.toml\nsed -i 's#k8s.gcr.io/pause#registry.cn-hangzhou.aliyuncs.com/google_containers/pause#g'  /etc/containerd/config.toml\nsed -i 's#registry.gcr.io/pause#registry.cn-hangzhou.aliyuncs.com/google_containers/pause#g'  /etc/containerd/config.toml\nsed -i 's#registry.k8s.io/pause#registry.cn-hangzhou.aliyuncs.com/google_containers/pause#g'  /etc/containerd/config.toml\n</code></pre>\n<p><mark>所有节点</mark>启动 Containerd，并配置开机自启动：</p>\n<pre><code># systemctl daemon-reload\n# systemctl enable --now containerd\n</code></pre>\n<p><mark>所有节点</mark>配置 crictl 客户端连接的运行时位置（可选）：</p>\n<pre><code># cat &gt; /etc/crictl.yaml &lt;&lt;EOF\nruntime-endpoint: unix:///run/containerd/containerd.sock\nimage-endpoint: unix:///run/containerd/containerd.sock\ntimeout: 10\ndebug: false\nEOF\n</code></pre>\n<h4 id=\"4-安装kubernetes组件\"><a class=\"anchor\" href=\"#4-安装kubernetes组件\">#</a> 4 . 安装 Kubernetes 组件</h4>\n<p><mark>所有节点</mark>配置源（注意更改版本号）：</p>\n<pre><code>cat &lt;&lt;EOF | tee /etc/yum.repos.d/kubernetes.repo\n[kubernetes]\nname=Kubernetes\nbaseurl=https://mirrors.aliyun.com/kubernetes-new/core/stable/v1.32/rpm/\nenabled=1\ngpgcheck=1\ngpgkey=https://mirrors.aliyun.com/kubernetes-new/core/stable/v1.32/rpm/repodata/repomd.xml.key\nEOF\n</code></pre>\n<p>首先在<mark> Master01 节点</mark>查看最新的 Kubernetes 版本是多少：</p>\n<pre><code># yum list kubeadm.x86_64 --showduplicates | sort -r\n</code></pre>\n<p><mark>所有节点</mark>安装 1.32 最新版本 kubeadm、kubelet 和 kubectl：</p>\n<pre><code># yum install kubeadm-1.32* kubelet-1.32* kubectl-1.32* -y\n</code></pre>\n<p><mark>所有节点</mark>设置 Kubelet 开机自启动（由于还未初始化，没有 kubelet 的配置文件，此时 kubelet 无法启动，无需关心）：</p>\n<pre><code># systemctl daemon-reload\n# systemctl enable --now kubelet\n</code></pre>\n<p><em>此时 kubelet 是起不来的，日志会有报错不影响！</em></p>\n<h4 id=\"5-集群初始化\"><a class=\"anchor\" href=\"#5-集群初始化\">#</a> 5 . 集群初始化</h4>\n<p>以下操作在<mark> master01</mark>（注意黄色部分）：</p>\n<pre><code>vim kubeadm-config.yaml\napiVersion: kubeadm.k8s.io/v1beta3\nbootstrapTokens:\n- groups:\n  - system:bootstrappers:kubeadm:default-node-token\n  token: 7t2weq.bjbawausm0jaxury\n  ttl: 24h0m0s\n  usages:\n  - signing\n  - authentication\nkind: InitConfiguration\nlocalAPIEndpoint:\n  advertiseAddress: 192.168.1.71\n  bindPort: 6443\nnodeRegistration:\n  criSocket: unix:///var/run/containerd/containerd.sock\n  name: k8s-master01\n  taints:\n  - effect: NoSchedule\n    key: node-role.kubernetes.io/control-plane\n---\napiServer:\n  certSANs:\n  - 192.168.1.70               # 如果搭建的不是高可用集群，把此处改为master的IP\n  timeoutForControlPlane: 4m0s\napiVersion: kubeadm.k8s.io/v1beta3\ncertificatesDir: /etc/kubernetes/pki\nclusterName: kubernetes\ncontrolPlaneEndpoint: 192.168.1.70:16443 # 如果搭建的不是高可用集群，把此处IP改为master的IP，端口改成6443\ncontrollerManager: &#123;&#125;\netcd:\n  local:\n    dataDir: /var/lib/etcd\nimageRepository: registry.cn-hangzhou.aliyuncs.com/google_containers\nkind: ClusterConfiguration\nkubernetesVersion: v1.32.3    # 更改此处的版本号和kubeadm version一致\nnetworking:\n  dnsDomain: cluster.local\n  podSubnet: 172.16.0.0/16    # 注意此处的网段，不要与service和节点网段冲突\n  serviceSubnet: 10.96.0.0/16 # 注意此处的网段，不要与pod和节点网段冲突\nscheduler: &#123;&#125;\n</code></pre>\n<p><mark>master01 节点</mark>更新 kubeadm 文件：</p>\n<pre><code>kubeadm config migrate --old-config kubeadm-config.yaml --new-config new.yaml\n</code></pre>\n<p>将 new.yaml 文件复制到<mark>其他 master 节点</mark>:</p>\n<pre><code>for i in k8s-master02 k8s-master03; do scp new.yaml $i:/root/; done\n</code></pre>\n<p>之后<mark>所有 Master 节点</mark>提前下载镜像，可以节省初始化时间（其他节点不需要更改任何配置，包括 IP 地址也不需要更改）：</p>\n<pre><code>kubeadm config images pull --config /root/new.yaml \n</code></pre>\n<p>正确的反馈信息如下（<em><strong>* 版本可能不一样 *</strong></em>）：</p>\n<pre><code>[root@k8s-master02 ~]# kubeadm config images pull --config /root/new.yaml \n[config/images] Pulled registry.cn-hangzhou.aliyuncs.com/google_containers/kube-apiserver:v1.32.0\n[config/images] Pulled registry.cn-hangzhou.aliyuncs.com/google_containers/kube-controller-manager:v1.32.0\n[config/images] Pulled registry.cn-hangzhou.aliyuncs.com/google_containers/kube-scheduler:v1.32.0\n[config/images] Pulled registry.cn-hangzhou.aliyuncs.com/google_containers/kube-proxy:v1.32.0\n[config/images] Pulled registry.cn-hangzhou.aliyuncs.com/google_containers/coredns:v1.11.3\n[config/images] Pulled registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.10\n[config/images] Pulled registry.cn-hangzhou.aliyuncs.com/google_containers/etcd:3.5.16-0\n</code></pre>\n<p><mark>Master01 节点</mark>初始化，初始化以后会在 /etc/kubernetes 目录下生成对应的证书和配置文件，之后其他 Master 节点加入 Master01 即可：</p>\n<pre><code>kubeadm init --config /root/new.yaml  --upload-certs\n</code></pre>\n<p>初始化成功以后，会产生 Token 值，用于其他节点加入时使用，因此要记录下初始化成功生成的 token 值（令牌值）：</p>\n<pre><code>Your Kubernetes control-plane has initialized successfully!\n\nTo start using your cluster, you need to run the following as a regular user:\n\n  mkdir -p $HOME/.kube\n  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config\n  sudo chown $(id -u):$(id -g) $HOME/.kube/config\n\nAlternatively, if you are the root user, you can run:\n\n  export KUBECONFIG=/etc/kubernetes/admin.conf\n\nYou should now deploy a pod network to the cluster.\nRun &quot;kubectl apply -f [podnetwork].yaml&quot; with one of the options listed at:\n  https://kubernetes.io/docs/concepts/cluster-administration/addons/\n\nYou can now join any number of the control-plane node running the following command on each as root:\n\n# 不要复制文档当中的，要去使用节点生成的\n  kubeadm join 192.168.1.70:16443 --token 7t2weq.bjbawausm0jaxury \\\n\t--discovery-token-ca-cert-hash sha256:df72788de04bbc2e8fca70becb8a9e8503a962b5d7cd9b1842a0c39930d08c94 \\\n\t--control-plane --certificate-key c595f7f4a7a3beb0d5bdb75d9e4eff0a60b977447e76c1d6885e82c3aa43c94c\n\nPlease note that the certificate-key gives access to cluster sensitive data, keep it secret!\nAs a safeguard, uploaded-certs will be deleted in two hours; If necessary, you can use\n&quot;kubeadm init phase upload-certs --upload-certs&quot; to reload certs afterward.\n\nThen you can join any number of worker nodes by running the following on each as root:\n\nkubeadm join 192.168.1.70:16443 --token 7t2weq.bjbawausm0jaxury \\\n\t--discovery-token-ca-cert-hash sha256:df72788de04bbc2e8fca70becb8a9e8503a962b5d7cd9b1842a0c39930d08c94\n</code></pre>\n<p><mark>Master01 节点</mark>配置环境变量，用于访问 Kubernetes 集群：</p>\n<pre><code>cat &lt;&lt;EOF &gt;&gt; /root/.bashrc\nexport KUBECONFIG=/etc/kubernetes/admin.conf\nEOF\nsource /root/.bashrc\n</code></pre>\n<p><mark>Master01 节点</mark>查看节点状态：（显示 NotReady 不影响）</p>\n<pre><code># kubectl get node\nNAME           STATUS     ROLES           AGE   VERSION\nk8s-master01   NotReady   control-plane   24s   v1.32.3\n</code></pre>\n<p>采用初始化安装方式，所有的系统组件均以容器的方式运行并且在 kube-system 命名空间内，此时可以查看 Pod 状态（显示 pending 不影响）：</p>\n<pre><code class=\"language-\\\"># kubectl get pods -n kube-system\n</code></pre>\n<h5 id=\"51-初始化失败排查\"><a class=\"anchor\" href=\"#51-初始化失败排查\">#</a> 5.1 初始化失败排查</h5>\n<p>如果初始化失败，重置后再次初始化，命令如下（没有失败不要执行）：</p>\n<pre><code>kubeadm reset -f ; ipvsadm --clear  ; rm -rf ~/.kube\n</code></pre>\n<p>如果多次尝试都是初始化失败，需要看系统日志，CentOS/RockyLinux 日志路径:/var/log/messages，Ubuntu 系列日志路径:/var/log/syslog：</p>\n<pre><code>tail -f /var/log/messages | grep -v &quot;not found&quot;\n</code></pre>\n<p>经常出错的原因：</p>\n<ol>\n<li>Containerd 的配置文件修改的不对，自行参考《安装 containerd》小节核对</li>\n<li>new.yaml 配置问题，比如非高可用集群忘记修改 16443 端口为 6443</li>\n<li>new.yaml 配置问题，三个网段有交叉，出现 IP 地址冲突</li>\n<li>VIP 不通导致无法初始化成功，此时 messages 日志会有 VIP 超时的报错</li>\n</ol>\n<h5 id=\"52-高可用master\"><a class=\"anchor\" href=\"#52-高可用master\">#</a> 5.2 高可用 Master</h5>\n<p><strong>其他 master</strong> 加入集群，master02 和 master03 分别执行 (千万不要在 master01 再次执行，不能直接复制文档当中的命令，而是你自己刚才 master01 初始化之后产生的命令)</p>\n<pre><code>kubeadm join 192.168.1.70:16443 --token 7t2weq.bjbawausm0jaxury \\\n\t--discovery-token-ca-cert-hash sha256:df72788de04bbc2e8fca70becb8a9e8503a962b5d7cd9b1842a0c39930d08c94 \\\n\t--control-plane --certificate-key c595f7f4a7a3beb0d5bdb75d9e4eff0a60b977447e76c1d6885e82c3aa43c94c\n</code></pre>\n<p>查看当前状态：（如果显示 NotReady 不影响）</p>\n<pre><code># kubectl get node\nNAME           STATUS     ROLES           AGE     VERSION\nk8s-master01   NotReady   control-plane   4m23s   v1.32.3\nk8s-master02   NotReady   control-plane   66s     v1.32.3\nk8s-master03   NotReady   control-plane   14s     v1.32.3\n</code></pre>\n<h5 id=\"53-token过期处理\"><a class=\"anchor\" href=\"#53-token过期处理\">#</a> 5.3 Token 过期处理</h5>\n<p>注意：以下步骤是上述 init 命令产生的 Token 过期了才需要执行以下步骤，如果没有过期不需要执行，直接 join 即可。</p>\n<p>Token 过期后生成新的 token：</p>\n<pre><code>kubeadm token create --print-join-command\n</code></pre>\n<p>Master 需要生成 --certificate-key：</p>\n<pre><code>kubeadm init phase upload-certs  --upload-certs\n</code></pre>\n<h4 id=\"6-node节点的配置\"><a class=\"anchor\" href=\"#6-node节点的配置\">#</a> 6. Node 节点的配置</h4>\n<p>Node 节点上主要部署公司的一些业务应用，生产环境中不建议 Master 节点部署系统组件之外的其他 Pod，测试环境可以允许 Master 节点部署 Pod 以节省系统资源。</p>\n<pre><code>kubeadm join 192.168.1.70:16443 --token 7t2weq.bjbawausm0jaxury \\\n\t--discovery-token-ca-cert-hash sha256:377702f508fe70b9d8ab68beccaa9af1b4609b754e4cc2fcc6185974e1d620b5\n</code></pre>\n<p>所有节点初始化完成后，查看集群状态（NotReady 不影响）</p>\n<pre><code># kubectl get node\nNAME           STATUS     ROLES           AGE     VERSION\nk8s-master01   NotReady   control-plane   4m23s   v1.32.3\nk8s-master02   NotReady   control-plane   66s     v1.32.3\nk8s-master03   NotReady   control-plane   14s     v1.32.3\nk8s-node01     NotReady   &lt;none&gt;          13s     v1.32.3\nk8s-node02     NotReady   &lt;none&gt;          10s     v1.32.3\n</code></pre>\n<h4 id=\"7-calico组件的安装\"><a class=\"anchor\" href=\"#7-calico组件的安装\">#</a> 7. Calico 组件的安装</h4>\n<p><mark>所有节点</mark>禁止 NetworkManager 管理 Calico 的网络接口，防止有冲突或干扰：</p>\n<pre><code>cat &gt;&gt;/etc/NetworkManager/conf.d/calico.conf&lt;&lt;EOF\n[keyfile]\nunmanaged-devices=interface-name:cali*;interface-name:tunl*;interface-name:vxlan.calico;interface-name:vxlan-v6.calico;interface-name:wireguard.cali;interface-name:wg-v6.cali\nEOF\nsystemctl daemon-reload\nsystemctl restart NetworkManager\n</code></pre>\n<p>以下步骤只在<mark> master01</mark> 执行（.x 不需要更改）：</p>\n<pre><code>cd /root/k8s-ha-install &amp;&amp; git checkout manual-installation-v1.32.x &amp;&amp; cd calico/\n</code></pre>\n<p>修改 Pod 网段：</p>\n<pre><code>POD_SUBNET=`cat /etc/kubernetes/manifests/kube-controller-manager.yaml | grep cluster-cidr= | awk -F= '&#123;print $NF&#125;'`\n\nsed -i &quot;s#POD_CIDR#$&#123;POD_SUBNET&#125;#g&quot; calico.yaml\nkubectl apply -f calico.yaml\n</code></pre>\n<p>查看容器和节点状态：</p>\n<pre><code>[root@k8s-master01 ~]# kubectl get pods -n kube-system\nNAME                                       READY   STATUS    RESTARTS   AGE\ncalico-kube-controllers-6f497d8478-v2q8c   1/1     Running   0          24h\ncalico-node-7mzmb                          1/1     Running   0          24h\ncalico-node-ljqnl                          1/1     Running   0          24h\ncalico-node-njqlb                          1/1     Running   0          24h\ncalico-node-ph4m4                          1/1     Running   0          24h\ncalico-node-rx8rl                          1/1     Running   0          24h\ncoredns-76fccbbb6b-76559                   1/1     Running   0          24h\ncoredns-76fccbbb6b-hkvn7                   1/1     Running   0          24h\netcd-k8s-master01                          1/1     Running   0          24h\netcd-k8s-master02                          1/1     Running   0          24h\netcd-k8s-master03                          1/1     Running   0          24h\nkube-apiserver-k8s-master01                1/1     Running   0          24h\nkube-apiserver-k8s-master02                1/1     Running   0          24h\nkube-apiserver-k8s-master03                1/1     Running   0          24h\nkube-controller-manager-k8s-master01       1/1     Running   0          24h\nkube-controller-manager-k8s-master02       1/1     Running   0          24h\nkube-controller-manager-k8s-master03       1/1     Running   0          24h\nkube-proxy-9dtz4                           1/1     Running   0          24h\nkube-proxy-jh7rl                           1/1     Running   0          24h\nkube-proxy-jvvwt                           1/1     Running   0          24h\nkube-proxy-sh89l                           1/1     Running   0          24h\nkube-proxy-t2j49                           1/1     Running   0          24h\nkube-scheduler-k8s-master01                1/1     Running   0          24h\nkube-scheduler-k8s-master02                1/1     Running   0          24h\nkube-scheduler-k8s-master03                1/1     Running   0          24h\nmetrics-server-7d9d8df576-jgnp2            1/1     Running   0          24h\n</code></pre>\n<p>此时节点全部变为 Ready 状态：</p>\n<pre><code>[root@k8s-master01 ~]# kubectl get nodes\nNAME           STATUS   ROLES           AGE   VERSION\nk8s-master01   Ready    control-plane   24h   v1.32.3\nk8s-master02   Ready    control-plane   24h   v1.32.3\nk8s-master03   Ready    control-plane   24h   v1.32.3\nk8s-node01     Ready    &lt;none&gt;          24h   v1.32.3\nk8s-node02     Ready    &lt;none&gt;          24h   v1.32.3\n</code></pre>\n<h4 id=\"8-metrics部署\"><a class=\"anchor\" href=\"#8-metrics部署\">#</a> 8. Metrics 部署</h4>\n<p>在新版的 Kubernetes 中系统资源的采集均使用 Metrics-server，可以通过 Metrics 采集节点和 Pod 的内存、磁盘、CPU 和网络的使用率。</p>\n<p>将<mark> Master01 节点</mark>的 front-proxy-ca.crt 复制到所有 Node 节点</p>\n<pre><code>scp /etc/kubernetes/pki/front-proxy-ca.crt k8s-node01:/etc/kubernetes/pki/front-proxy-ca.crt\n\nscp /etc/kubernetes/pki/front-proxy-ca.crt k8s-node(其他节点自行拷贝):/etc/kubernetes/pki/front-proxy-ca.crt\n</code></pre>\n<p>以下操作均在<mark> master01 节点</mark>执行:</p>\n<p>安装 metrics server</p>\n<pre><code>cd /root/k8s-ha-install/kubeadm-metrics-server\n\n# kubectl  create -f comp.yaml \nserviceaccount/metrics-server created\nclusterrole.rbac.authorization.k8s.io/system:aggregated-metrics-reader created\nclusterrole.rbac.authorization.k8s.io/system:metrics-server created\nrolebinding.rbac.authorization.k8s.io/metrics-server-auth-reader created\nclusterrolebinding.rbac.authorization.k8s.io/metrics-server:system:auth-delegator created\nclusterrolebinding.rbac.authorization.k8s.io/system:metrics-server created\nservice/metrics-server created\ndeployment.apps/metrics-server created\napiservice.apiregistration.k8s.io/v1beta1.metrics.k8s.io created\n</code></pre>\n<p>查看状态：</p>\n<pre><code>[root@k8s-master01 ~]# kubectl get po -n kube-system -l k8s-app=metrics-server\nNAME                              READY   STATUS    RESTARTS   AGE\nmetrics-server-7d9d8df576-jgnp2   1/1     Running   0          24h\n</code></pre>\n<p>等 Pod 变成 1/1   Running 后，查看节点和 Pod 资源使用率：</p>\n<pre><code>[root@k8s-master01 ~]#  kubectl top node\nNAME           CPU(cores)   CPU(%)   MEMORY(bytes)   MEMORY(%)   \nk8s-master01   132m         3%       932Mi           5%          \nk8s-master02   131m         3%       845Mi           5%          \nk8s-master03   148m         3%       912Mi           5%          \nk8s-node01     54m          1%       600Mi           3%          \nk8s-node02     49m          1%       602Mi           3%          \n[root@k8s-master01 ~]#  kubectl top po -A\nNAMESPACE              NAME                                         CPU(cores)   MEMORY(bytes)   \ningress-nginx          ingress-nginx-controller-5v9gl               2m           98Mi            \ningress-nginx          ingress-nginx-controller-r978m               1m           104Mi           \nkrm                    krm-backend-d7ff675d8-vmt9z                  1m           21Mi            \nkrm                    krm-frontend-588ffd677b-c2pgj                1m           4Mi             \nkrm                    nginx-574cf48959-vcfjs                       0m           2Mi             \nkube-system            calico-kube-controllers-6f497d8478-v2q8c     6m           17Mi            \nkube-system            calico-node-7mzmb                            16m          176Mi           \nkube-system            calico-node-ljqnl                            15m          182Mi           \nkube-system            calico-node-njqlb                            19m          180Mi           \nkube-system            calico-node-ph4m4                            15m          178Mi           \nkube-system            calico-node-rx8rl                            17m          180Mi           \nkube-system            coredns-76fccbbb6b-76559                     2m           16Mi            \nkube-system            coredns-76fccbbb6b-hkvn7                     2m           16Mi            \nkube-system            etcd-k8s-master01                            22m          86Mi            \nkube-system            etcd-k8s-master02                            27m          84Mi            \nkube-system            etcd-k8s-master03                            22m          84Mi            \nkube-system            kube-apiserver-k8s-master01                  22m          267Mi           \nkube-system            kube-apiserver-k8s-master02                  20m          242Mi           \nkube-system            kube-apiserver-k8s-master03                  18m          241Mi           \nkube-system            kube-controller-manager-k8s-master01         6m           69Mi            \nkube-system            kube-controller-manager-k8s-master02         2m           21Mi            \nkube-system            kube-controller-manager-k8s-master03         1m           19Mi            \nkube-system            kube-proxy-9dtz4                             11m          30Mi            \nkube-system            kube-proxy-jh7rl                             1m           27Mi            \nkube-system            kube-proxy-jvvwt                             17m          29Mi            \nkube-system            kube-proxy-sh89l                             1m           29Mi            \nkube-system            kube-proxy-t2j49                             16m          29Mi            \nkube-system            kube-scheduler-k8s-master01                  6m           25Mi            \nkube-system            kube-scheduler-k8s-master02                  6m           25Mi            \nkube-system            kube-scheduler-k8s-master03                  6m           25Mi            \nkube-system            metrics-server-7d9d8df576-jgnp2              2m           26Mi            \nkubernetes-dashboard   dashboard-metrics-scraper-69b4796d9b-klnwr   1m           19Mi            \nkubernetes-dashboard   kubernetes-dashboard-778584b9dd-pd5ln        1m           31Mi  \n</code></pre>\n<h4 id=\"9-dashboard部署\"><a class=\"anchor\" href=\"#9-dashboard部署\">#</a> 9. Dashboard 部署</h4>\n<h5 id=\"91-安装dashboard\"><a class=\"anchor\" href=\"#91-安装dashboard\">#</a> 9.1 安装 Dashboard</h5>\n<p>Dashboard 用于展示集群中的各类资源，同时也可以通过 Dashboard 实时查看 Pod 的日志和在容器中执行一些命令等。</p>\n<pre><code>cd /root/k8s-ha-install/dashboard/\n\n[root@k8s-master01 dashboard]# kubectl  create -f .\nserviceaccount/admin-user created\nclusterrolebinding.rbac.authorization.k8s.io/admin-user created\nnamespace/kubernetes-dashboard created\nserviceaccount/kubernetes-dashboard created\nservice/kubernetes-dashboard created\nsecret/kubernetes-dashboard-certs created\nsecret/kubernetes-dashboard-csrf created\nsecret/kubernetes-dashboard-key-holder created\nconfigmap/kubernetes-dashboard-settings created\nrole.rbac.authorization.k8s.io/kubernetes-dashboard created\nclusterrole.rbac.authorization.k8s.io/kubernetes-dashboard created\nrolebinding.rbac.authorization.k8s.io/kubernetes-dashboard created\nclusterrolebinding.rbac.authorization.k8s.io/kubernetes-dashboard created\ndeployment.apps/kubernetes-dashboard created\nservice/dashboard-metrics-scraper created\ndeployment.apps/dashboard-metrics-scraper created\n</code></pre>\n<h5 id=\"92-登录dashboard\"><a class=\"anchor\" href=\"#92-登录dashboard\">#</a> 9.2 登录 dashboard</h5>\n<p>在谷歌浏览器（Chrome）启动文件中加入启动参数，用于解决无法访问 Dashboard 的问题，参考下图：</p>\n<pre><code>--test-type --ignore-certificate-errors\n</code></pre>\n<p><a href=\"https://imgse.com/i/pEgWfHJ\"><img loading=\"lazy\" data-src=\"https://s21.ax1x.com/2025/04/09/pEgWfHJ.png\" alt=\"pEgWfHJ.png\" /></a></p>\n<p>更改 dashboard 的 svc 为 NodePort:</p>\n<pre><code>kubectl edit svc kubernetes-dashboard -n kubernetes-dashboard\n</code></pre>\n<p><a href=\"https://imgse.com/i/pEgW5NR\"><img loading=\"lazy\" data-src=\"https://s21.ax1x.com/2025/04/09/pEgW5NR.png\" alt=\"pEgW5NR.png\" /></a></p>\n<p><em>将 ClusterIP 更改为 NodePort（如果已经为 NodePort 忽略此步骤）</em></p>\n<p>查看端口号：</p>\n<pre><code>[root@k8s-master01 ~]# kubectl get svc kubernetes-dashboard -n kubernetes-dashboard\nNAME                   TYPE       CLUSTER-IP     EXTERNAL-IP   PORT(S)         AGE\nkubernetes-dashboard   NodePort   10.96.139.11   &lt;none&gt;        443:32409/TCP   24h\n</code></pre>\n<p>根据自己的实例端口号，通过任意安装了 kube-proxy 的宿主机的 IP + 端口即可访问到 dashboard：</p>\n<p>访问 Dashboard：<a href=\"https://192.168.181.129:31106\">https://192.168.1.71:32409</a> （把 IP 地址和端口改成你自己的）选择登录方式为令牌（即 token 方式），参考下图：</p>\n<p><a href=\"https://imgse.com/i/pEgW736\"><img loading=\"lazy\" data-src=\"https://s21.ax1x.com/2025/04/09/pEgW736.png\" alt=\"pEgW736.png\" /></a></p>\n<p>创建登录 Token：</p>\n<pre><code>kubectl create token admin-user -n kube-system\n</code></pre>\n<p>将 token 值输入到令牌后，单击登录即可访问 Dashboard，参考下图：</p>\n<p><a href=\"https://imgse.com/i/pEgfPv8\"><img loading=\"lazy\" data-src=\"https://s21.ax1x.com/2025/04/09/pEgfPv8.png\" alt=\"pEgfPv8.png\" /></a></p>\n<h4 id=\"10必看一些必须的配置更改\"><a class=\"anchor\" href=\"#10必看一些必须的配置更改\">#</a> 10.【必看】一些必须的配置更改</h4>\n<p>将 Kube-proxy 改为 ipvs 模式，因为在初始化集群的时候注释了 ipvs 配置，所以需要自行修改一下：</p>\n<p>在 master01 节点执行：</p>\n<pre><code>kubectl edit cm kube-proxy -n kube-system\nmode: ipvs\n</code></pre>\n<p>更新 Kube-Proxy 的 Pod：</p>\n<pre><code>kubectl patch daemonset kube-proxy -p &quot;&#123;\\&quot;spec\\&quot;:&#123;\\&quot;template\\&quot;:&#123;\\&quot;metadata\\&quot;:&#123;\\&quot;annotations\\&quot;:&#123;\\&quot;date\\&quot;:\\&quot;`date +'%s'`\\&quot;&#125;&#125;&#125;&#125;&#125;&quot; -n kube-system\n</code></pre>\n<p>验证 Kube-Proxy 模式:</p>\n<pre><code>[root@k8s-master01]# curl 127.0.0.1:10249/proxyMode\nipvs\n</code></pre>\n<h4 id=\"11必看注意事项\"><a class=\"anchor\" href=\"#11必看注意事项\">#</a> 11.【必看】注意事项</h4>\n<p>注意：kubeadm 安装的集群，证书有效期默认是一年。master 节点的 kube-apiserver、kube-scheduler、kube-controller-manager、etcd 都是以容器运行的。可以通过 kubectl get po -n kube-system 查看。</p>\n<p>启动和二进制不同的是，kubelet 的配置文件在 /etc/sysconfig/kubelet 和 /var/lib/kubelet/config.yaml，修改后需要重启 kubelet 进程。</p>\n<p>其他组件的配置文件在 /etc/kubernetes/manifests 目录下，比如 kube-apiserver.yaml，该 yaml 文件更改后，kubelet 会自动刷新配置，也就是会重启 pod。不能再次创建该文件。</p>\n<p>kube-proxy 的配置在 kube-system 命名空间下的 configmap 中，可以通过</p>\n<pre><code>kubectl edit cm kube-proxy -n kube-system\n</code></pre>\n<p>进行更改，更改完成后，可以通过 patch 重启 kube-proxy</p>\n<pre><code>kubectl patch daemonset kube-proxy -p &quot;&#123;\\&quot;spec\\&quot;:&#123;\\&quot;template\\&quot;:&#123;\\&quot;metadata\\&quot;:&#123;\\&quot;annotations\\&quot;:&#123;\\&quot;date\\&quot;:\\&quot;`date +'%s'`\\&quot;&#125;&#125;&#125;&#125;&#125;&quot; -n kube-system\n</code></pre>\n<p>Kubeadm 安装后，master 节点默认不允许部署 pod，可以通过以下方式删除 Taint，即可部署 Pod：</p>\n<pre><code>[root@k8s-master01 ~]# kubectl  taint node  -l node-role.kubernetes.io/control-plane node-role.kubernetes.io/control-plane:NoSchedule-\n</code></pre>\n<h4 id=\"12-containerd配置镜像加速\"><a class=\"anchor\" href=\"#12-containerd配置镜像加速\">#</a> 12. Containerd 配置镜像加速</h4>\n<pre><code># vim /etc/containerd/config.toml\n#添加以下配置镜像加速服务\n       [plugins.&quot;io.containerd.grpc.v1.cri&quot;.registry.mirrors.&quot;docker.io&quot;]\n        endpoint=[&quot;https://dockerproxy.com&quot;, &quot;https://mirror.baidubce.com&quot;,&quot;https://ccr.ccs.tencentyun.com&quot;,&quot;https://docker.m.daocloud.io&quot;,&quot;https://docker.nju.edu.cn&quot;,&quot;https://docker.mirrors.ustc.edu.cn&quot;,&quot;https://registry-1.docker.io&quot;, &quot;https://hbv0b596.mirror.aliyuncs.com&quot;]\n       [plugins.&quot;io.containerd.grpc.v1.cri&quot;.registry.mirrors.&quot;registry.k8s.io&quot;]\n        endpoint=[&quot;https://dockerproxy.com&quot;, &quot;https://mirror.baidubce.com&quot;,&quot;https://ccr.ccs.tencentyun.com&quot;,&quot;https://docker.m.daocloud.io&quot;,&quot;https://docker.nju.edu.cn&quot;,&quot;https://docker.mirrors.ustc.edu.cn&quot;,&quot;https://hbv0b596.mirror.aliyuncs.com&quot;, &quot;https://k8s.m.daocloud.io&quot;, &quot;https://docker.mirrors.ustc.edu.cn&quot;,&quot;https://hub-mirror.c.163.com&quot;]\n</code></pre>\n<p>所有节点重新启动 Containerd：</p>\n<pre><code># systemctl daemon-reload\n# systemctl restart containerd\n</code></pre>\n<h4 id=\"13-docker配置镜像加速\"><a class=\"anchor\" href=\"#13-docker配置镜像加速\">#</a> 13. Docker 配置镜像加速</h4>\n<pre><code># sudo mkdir -p /etc/docker\n# sudo tee /etc/docker/daemon.json &lt;&lt;-'EOF'\n&#123;\n  &quot;registry-mirrors&quot;: [\n\t  &quot;https://docker.credclouds.com&quot;,\n\t  &quot;https://k8s.credclouds.com&quot;,\n\t  &quot;https://quay.credclouds.com&quot;,\n\t  &quot;https://gcr.credclouds.com&quot;,\n\t  &quot;https://k8s-gcr.credclouds.com&quot;,\n\t  &quot;https://ghcr.credclouds.com&quot;,\n\t  &quot;https://do.nark.eu.org&quot;,\n\t  &quot;https://docker.m.daocloud.io&quot;,\n\t  &quot;https://docker.nju.edu.cn&quot;,\n\t  &quot;https://docker.mirrors.sjtug.sjtu.edu.cn&quot;,\n\t  &quot;https://docker.1panel.live&quot;,\n\t  &quot;https://docker.rainbond.cc&quot;\n  ], \n  &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;] \n&#125;\nEOF\n</code></pre>\n<p>所有节点重新启动 Docker：</p>\n<pre><code># systemctl daemon-reload\n# systemctl enable --now docker\n</code></pre>\n<p><em>本文出自于：<a href=\"https://edu.51cto.com/course/23845.html\">https://edu.51cto.com/course/23845.html</a></em></p>\n",
            "tags": [
                "Kubernetes"
            ]
        },
        {
            "id": "http://xuyong.cn/posts/1922841233.html",
            "url": "http://xuyong.cn/posts/1922841233.html",
            "title": "Rsync服务实践",
            "date_published": "2025-03-30T12:45:48.000Z",
            "content_html": "<h3 id=\"ursync服务实践u\"><a class=\"anchor\" href=\"#ursync服务实践u\">#</a> <u>Rsync 服务实践</u></h3>\n<p><strong>环境准备</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">主机名</th>\n<th style=\"text-align:center\"><strong>IP</strong></th>\n<th><strong>角色</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">server</td>\n<td style=\"text-align:center\">192.168.40.101</td>\n<td>rsync 服务端</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">client</td>\n<td style=\"text-align:center\">192.168.40.102</td>\n<td>rsync 客户</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"1rsync服务端\"><a class=\"anchor\" href=\"#1rsync服务端\">#</a> 1.rsync 服务端</h4>\n<h5 id=\"11-关闭防火墙-selinux\"><a class=\"anchor\" href=\"#11-关闭防火墙-selinux\">#</a> 1.1 关闭防火墙、selinux</h5>\n<pre><code>[root@localhost ~]# hostnamectl set-hostname backup\n[root@localhost ~]# bash\n[root@backup ~]# hostnamectl set-hostname aizj_lb01\n[root@backup ~]# systemctl stop firewalld\n[root@backup ~]# systemctl disable firewalld\n[root@backup ~]# sed -i 's/^SELINUX=enforcing/SELINUX=disabled/g' /etc/sysconfig/selinux\n[root@backup ~]# sed -i 's/^SELINUX=enforcing/SELINUX=disabled/g' /etc/selinux/config\n[root@backup ~]# yum install net-tools vim tree lrzsz wget unzip dos2unix bash-completion  lsof ntp ntpdate git -y\n[root@backup ~]# yum update -y --exclude=kernel* &amp;&amp; reboot\n[root@backup ~]# echo 'Asia/Shanghai' &gt;/etc/timezone\n[root@backup ~]# ntpdate time2.aliyun.com\n[root@backup ~]# crontab -e\n*/5 * * * * /usr/sbin/ntpdate time2.aliyun.com &amp;&gt; /dev/nul\n[root@backup ~]# mkdir /soft /data /scripts /backup\n</code></pre>\n<h5 id=\"12-安装rsync\"><a class=\"anchor\" href=\"#12-安装rsync\">#</a> 1.2 安装 rsync</h5>\n<pre><code>[root@backup ~]# yum install -y rsync\n[root@server ~]# systemctl start rsyncd\n[root@server ~]# systemctl enable rsyncd\n[root@backup ~]# useradd -M -s /sbin/nologin rsync\n[root@backup ~]# mkdir -p /backup/mysql  /backup/file\n[root@backup ~]# chown -R rsync.rsync /backup/mysql /backup/file \n</code></pre>\n<h5 id=\"13-修改配置文件\"><a class=\"anchor\" href=\"#13-修改配置文件\">#</a> 1.3 修改配置文件</h5>\n<p><em><mark>#生产环境中取消注释，导致备份数据报错</mark></em></p>\n<pre><code>#带注释配置文件\n[root@backup ~]# vim /etc/rsyncd.conf\nuid = rsync             #运行服务的用户\ngid = rsync             #运行服务的组\nport = 873              #服务监听端口\nfake super = yes        #服务无需使用root用户身份，即可接收文件的完整属性\nuse chroot = no         #禁锢目录,不允许获取root权限\nmax connections = 200   #最大连接数,最多能有多少个客户端跟服务端的873端口建立连接\ntimeout = 600           #超时时间\nignore errors          #忽略错误\nread only = false      #客户是否只读\nlist = false           #不允许查看模块信息\nauth users = rsync_backup         #定义虚拟用户，用户数据传输\nsecrets file = /etc/rsync.passwd  #定义虚拟用户密码认证文件\nlog file = /var/log/rsyncd.log    #日志文件存放的位置\n[backup_mysql]         #模块名\ncomment = welcome to rsync_backup\npath = /backup/mysql   #数据存放目录\n[backup_file]          #模块名\ncomment = welcome to rsync_backup\npath = /backup/file    #数据存放目录 \n\n#不带注释配置文件\n[root@backup ~]# cat /etc/rsyncd.conf\nuid = rsync        \ngid = rsync         \nport = 873     \nfake super = yes     \nuse chroot = no        \nmax connections = 200  \ntimeout = 600         \nignore errors       \nread only = false    \nlist = false          \nauth users = rsync_backup        \nsecrets file = /etc/rsync.passwd\nlog file = /var/log/rsyncd.log    \n[backup_mysql]       \ncomment = welcome to rsync_backup\npath = /backup/mysql  \n[backup_file]         \ncomment = welcome to rsync_backup\npath = /backup/file \n</code></pre>\n<h5 id=\"4-创建虚拟用户密码文件并设置权限\"><a class=\"anchor\" href=\"#4-创建虚拟用户密码文件并设置权限\">#</a> 4. 创建虚拟用户密码文件并设置权限</h5>\n<pre><code>[root@backup ~]# cat /etc/rsync.passwd\nrsync_backup:your passwd\n[root@backup ~]# chmod 600 /etc/rsync.passwd\n[root@backup ~]# systemctl restart rsyncd &amp;&amp; systemctl status rsyncd\n</code></pre>\n<h5 id=\"5-检查服务端口是否开启\"><a class=\"anchor\" href=\"#5-检查服务端口是否开启\">#</a> 5. 检查服务端口是否开启</h5>\n<pre><code>[root@backup ~]# netstat -lntp | grep &quot;rsync&quot;\ntcp        0      0 0.0.0.0:873             0.0.0.0:*               LISTEN      20357/rsync         \ntcp6       0      0 :::873                  :::*                    LISTEN      20357/rsync \n</code></pre>\n<h4 id=\"2-rsync客户端\"><a class=\"anchor\" href=\"#2-rsync客户端\">#</a> 2. rsync 客户端</h4>\n<h5 id=\"21-安装rsync\"><a class=\"anchor\" href=\"#21-安装rsync\">#</a> 2.1 安装 rsync</h5>\n<pre><code>[root@db01 ~]# yum install nfs-utils -y\n</code></pre>\n<h5 id=\"22-配置传输密码\"><a class=\"anchor\" href=\"#22-配置传输密码\">#</a> 2.2 配置传输密码</h5>\n<p>方法 1：将密码写入文件</p>\n<pre><code>[root@db01 ~]#  echo 'your passwd' &gt; /etc/rsync.pass\n[root@db01 ~]# cat /etc/rsync.pass \nyour passwd\n[root@db01 ~]# chmod 600 /etc/rsync.pass\n--测试收发数据：\n[root@db01 ~]# rsync -avz --password-file=/etc/rsync.pass /root/test rsync_backup@192.168.40.101::backup_file\nsending incremental file list\n\nsent 47 bytes  received 20 bytes  134.00 bytes/sec\ntotal size is 0  speedup is 0.00\n</code></pre>\n<p>方法 2：使用密码环境变量 RSYNC_PASSWORD</p>\n<pre><code>[root@db01 ~]# export RSYNC_PASSWORD='your passwd'\n--测试收发数据：\n[root@db01 ~]# rsync -avz /root/test rsync_backup@192.168.40.101::backup_file\nsending incremental file list\n\nsent 47 bytes  received 20 bytes  134.00 bytes/sec\ntotal size is 0  speedup is 0.00\n</code></pre>\n<h3 id=\"ursync企业级备份案例u\"><a class=\"anchor\" href=\"#ursync企业级备份案例u\">#</a> <u>Rsync 企业级备份案例</u></h3>\n<p><strong>环境准备</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">主机名</th>\n<th style=\"text-align:center\"><strong>IP</strong></th>\n<th><strong>角色</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">server</td>\n<td style=\"text-align:center\">192.168.40.101</td>\n<td>rsync 服务端</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">client</td>\n<td style=\"text-align:center\">192.168.40.102</td>\n<td>rsync 客户</td>\n</tr>\n</tbody>\n</table>\n<p><strong>客户端需求</strong></p>\n<ul>\n<li>客户端每天凌晨 3 点备份 MySQL 至 /backup 下以 &quot;主机名_IP 地址_当前时间命名&quot; 的目录中</li>\n<li>客户端推送 /backup 目录下数据备份目录至 Rsync 备份服务器</li>\n<li>客户端只保留最近七天的备份数据，避免浪费磁盘空间</li>\n</ul>\n<p><strong>服务端需求</strong></p>\n<ul>\n<li>服务端部署 rsync 服务，用于接收用户的备份数据</li>\n<li>服务端每天校验客户端推送过来的数据是否完整，并将结果以邮件的方式发送给管理员</li>\n<li>服务端仅保留 6 个月的备份数据</li>\n</ul>\n<p><strong>注意</strong>：所有服务器的备份目录均为 /backup，所有脚本存放目录均为 /scripts。</p>\n<h4 id=\"1-服务端部署rsync服务\"><a class=\"anchor\" href=\"#1-服务端部署rsync服务\">#</a> <strong>1. 服务端部署 rsync 服务</strong></h4>\n<h5 id=\"11-关闭防火墙-selinux-2\"><a class=\"anchor\" href=\"#11-关闭防火墙-selinux-2\">#</a> 1.1 关闭防火墙、selinux</h5>\n<pre><code>[root@localhost ~]# hostnamectl set-hostname backup\n[root@localhost ~]# bash\n[root@backup ~]# hostnamectl set-hostname aizj_lb01\n[root@backup ~]# systemctl stop firewalld\n[root@backup ~]# systemctl disable firewalld\n[root@backup ~]# sed -i 's/^SELINUX=enforcing/SELINUX=disabled/g' /etc/sysconfig/selinux\n[root@backup ~]# sed -i 's/^SELINUX=enforcing/SELINUX=disabled/g' /etc/selinux/config\n[root@backup ~]# yum install net-tools vim tree lrzsz wget unzip dos2unix bash-completion  lsof ntp ntpdate git -y\n[root@backup ~]# yum update -y --exclude=kernel* &amp;&amp; reboot\n[root@backup ~]# echo 'Asia/Shanghai' &gt;/etc/timezone\n[root@backup ~]# ntpdate time2.aliyun.com\n[root@backup ~]# crontab -e\n*/5 * * * * /usr/sbin/ntpdate time2.aliyun.com &amp;&gt; /dev/nul\n[root@backup ~]# mkdir /soft /data /scripts /backup\n</code></pre>\n<h5 id=\"12-安装rsync-2\"><a class=\"anchor\" href=\"#12-安装rsync-2\">#</a> 1.2 安装 rsync</h5>\n<pre><code>[root@backup ~]# yum install -y rsync\n[root@server ~]# systemctl start rsyncd\n[root@server ~]# systemctl enable rsyncd\n[root@backup ~]# useradd -M -s /sbin/nologin rsync\n[root@backup ~]# mkdir -p /backup/mysql  /backup/file\n[root@backup ~]# chown -R rsync.rsync /backup/mysql /backup/file \n</code></pre>\n<h5 id=\"13-修改配置文件-2\"><a class=\"anchor\" href=\"#13-修改配置文件-2\">#</a> 1.3 修改配置文件</h5>\n<p><em><mark>#生产环境中取消注释，导致备份数据报错</mark></em></p>\n<pre><code>#带注释配置文件\n[root@backup ~]# vim /etc/rsyncd.conf\nuid = rsync             #运行服务的用户\ngid = rsync             #运行服务的组\nport = 873              #服务监听端口\nfake super = yes        #服务无需使用root用户身份，即可接收文件的完整属性\nuse chroot = no         #禁锢目录,不允许获取root权限\nmax connections = 200   #最大连接数,最多能有多少个客户端跟服务端的873端口建立连接\ntimeout = 600           #超时时间\nignore errors          #忽略错误\nread only = false      #客户是否只读\nlist = false           #不允许查看模块信息\nauth users = rsync_backup         #定义虚拟用户，用户数据传输\nsecrets file = /etc/rsync.passwd  #定义虚拟用户密码认证文件\nlog file = /var/log/rsyncd.log    #日志文件存放的位置\n[backup_mysql]         #模块名\ncomment = welcome to rsync_backup\npath = /backup/mysql   #数据存放目录\n[backup_file]          #模块名\ncomment = welcome to rsync_backup\npath = /backup/file    #数据存放目录 \n\n#不带注释配置文件\n[root@backup ~]# cat /etc/rsyncd.conf\nuid = rsync        \ngid = rsync         \nport = 873     \nfake super = yes     \nuse chroot = no        \nmax connections = 200  \ntimeout = 600         \nignore errors       \nread only = false    \nlist = false          \nauth users = rsync_backup        \nsecrets file = /etc/rsync.passwd\nlog file = /var/log/rsyncd.log    \n[backup_mysql]       \ncomment = welcome to rsync_backup\npath = /backup/mysql  \n[backup_file]         \ncomment = welcome to rsync_backup\npath = /backup/file \n</code></pre>\n<h5 id=\"4-创建虚拟用户密码文件并设置权限-2\"><a class=\"anchor\" href=\"#4-创建虚拟用户密码文件并设置权限-2\">#</a> 4. 创建虚拟用户密码文件并设置权限</h5>\n<pre><code>[root@backup ~]# cat /etc/rsync.passwd\nrsync_backup:your passwd\n[root@backup ~]# chmod 600 /etc/rsync.passwd\n[root@backup ~]# systemctl restart rsyncd &amp;&amp; systemctl status rsyncd\n</code></pre>\n<h5 id=\"5-检查服务端口是否开启-2\"><a class=\"anchor\" href=\"#5-检查服务端口是否开启-2\">#</a> 5. 检查服务端口是否开启</h5>\n<pre><code>[root@backup ~]# netstat -lntp | grep &quot;rsync&quot;\ntcp        0      0 0.0.0.0:873             0.0.0.0:*               LISTEN      20357/rsync         \ntcp6       0      0 :::873                  :::*                    LISTEN      20357/rsync \n</code></pre>\n<h4 id=\"2-rsync客户端-2\"><a class=\"anchor\" href=\"#2-rsync客户端-2\">#</a> 2. rsync 客户端</h4>\n<h5 id=\"21-安装rsync-2\"><a class=\"anchor\" href=\"#21-安装rsync-2\">#</a> 2.1 安装 rsync</h5>\n<pre><code>[root@db01 ~]# yum install nfs-utils -y\n</code></pre>\n<h5 id=\"22-测试客户端备份数据并推送至rsync服务器\"><a class=\"anchor\" href=\"#22-测试客户端备份数据并推送至rsync服务器\">#</a> 2.2 测试客户端备份数据并推送至 rsync 服务器</h5>\n<pre><code>[root@db01 ~]# export RSYNC_PASSWORD='your passwd'\n[root@db01 ~]# rsync -avz /root/test rsync_backup@192.168.40.101::backup_file\n</code></pre>\n<h5 id=\"23-客户端备份数据并推送至rsync服务器\"><a class=\"anchor\" href=\"#23-客户端备份数据并推送至rsync服务器\">#</a> <strong>2.3 客户端备份数据并推送至 rsync 服务器</strong></h5>\n<pre><code>[root@db01 ~]# mkdir /scripts\n[root@db01 ~]# cat /scripts/mysql_backup.sh \n#!/bin/bash\nexport PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin\n\n#1、定义变量\nHost=$(hostname)\nIp=$(ifconfig ens192 | awk 'NR==2&#123;print $2&#125;')\nDate=$(date +%F)\nBackupDir=/backup/mysql\nDest=$&#123;BackupDir&#125;/$&#123;Host&#125;_$&#123;Ip&#125;_$&#123;Date&#125;\nFILE_NAME=mysql_backup_`date '+%Y%m%d%H%M%S'`;\nOLDBINLOG=/var/lib/mysql/oldbinlog\n\n#2、创建备份目录\nif [ ! -d $Dest ];then\n  mkdir -p $Dest\nfi\n\n#3、备份目录\n/usr/bin/mysqldump -u'root' -p'your passwd' nf_flms &gt; $Dest/nf-flms_$&#123;FILE_NAME&#125;.sql\ntar -czvf $Dest/$&#123;FILE_NAME&#125;.tar.gz $Dest/nf-flms_$&#123;FILE_NAME&#125;.sql\nrm -rf $Dest/*$&#123;FILE_NAME&#125;.sql\necho &quot;Your database backup successfully&quot;\n\n#4、校验\nmd5sum $Dest/* &gt;$Dest/backup_check_$Date\n\n#5、将备份目录推动到rsync服务端\nRsync_Ip=192.168.1.145\nRsync_user=rsync_backup\nRsync_Module=backup_mysql\nexport RSYNC_PASSWORD=your passwd\nrsync -avz $Dest $Rsync_user@$Rsync_Ip::$Rsync_Module\n\n#6、删除15天备份目录\nfind $Dest -type d -mtime +15 | xargs rm -rf\necho &quot;remove file  successfully&quot;\n\n[root@db01 ~]# chmod +x /scripts/etc_backup.sh\n[root@db01 ~]# crontab -e\n00 03 * * * /bin/bash /scripts/mysql_backup.sh &amp;&gt; /dev/null\n</code></pre>\n<h5 id=\"24-服务端校验数据并将结果以邮件发送给管理员\"><a class=\"anchor\" href=\"#24-服务端校验数据并将结果以邮件发送给管理员\">#</a> <strong>2.4 服务端校验数据并将结果以邮件发送给管理员</strong></h5>\n<h6 id=\"241-配置邮件服务\"><a class=\"anchor\" href=\"#241-配置邮件服务\">#</a> 2.4.1 配置邮件服务</h6>\n<pre><code>[root@backup ~]# yum -y install mailx\n[root@backup ~]# cat /etc/mail.rc      #最后一行插入\nset from=373370405@qq.com\nset smtp=smtps://smtp.qq.com:465\nset smtp-auth-user=373370405@qq.com\nset smtp-auth-password=**********   # 发件邮箱的授权码\nset smtp-auth=login\nset ssl-verify=ignore\nset nss-config-dir=/etc/pki/nssdb\n</code></pre>\n<h6 id=\"242-发送邮件测试\"><a class=\"anchor\" href=\"#242-发送邮件测试\">#</a> 2.4.2 发送邮件测试</h6>\n<pre><code>[root@backup ~]#  echo Hello World | mail -s test 373370405@qq.com &amp;&gt; /dev/null\n</code></pre>\n<h6 id=\"243-配置脚本校验数据并将结果发送给管理员\"><a class=\"anchor\" href=\"#243-配置脚本校验数据并将结果发送给管理员\">#</a> 2.4.3 配置脚本校验数据并将结果发送给管理员</h6>\n<pre><code>[root@backup mysql]# cat /scripts/check_backup.sh \n#!/bin/bash\nexport PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin\n\n#1、定义变量\nPath=/backup/mysql\nDate=$(date +%F)\n\n#2、查看flag文件，并对对文件进行校验,然后将校验的结果保存至result_时间\nfind $Path -type f -name &quot;backup_check_$&#123;Date&#125;*&quot;|xargs md5sum -c &gt;$Path/result_$&#123;Date&#125;\n\n#3、将校验结果发送邮件给管理员\nmail -s &quot;Mysql Backup&quot; 373370405@qq.com &lt;$Path/result_$&#123;Date&#125; &amp;&gt; /dev/null\n\n#4、删除超过7天的校验结果文件，删除超过180天的备份数据文件\nfind $Path -type f -name &quot;result*&quot; -mtime +7 | xargs rm -rf\nfind $Path -type f -mtime +180 | xargs rm -rf\n</code></pre>\n<h6 id=\"244-写计划任务\"><a class=\"anchor\" href=\"#244-写计划任务\">#</a> <strong>2.4.4 写计划任务</strong></h6>\n<pre><code>[root@backup ~]# chmod +x /scripts/check_backup.sh \n[root@db01 ~]# crontab -e\n00 06 * * * /bin/bash /scripts/mysql_backup.sh &amp;&gt; /dev/null\n</code></pre>\n<h3 id=\"rsyncsersync实现数据实时同步\"><a class=\"anchor\" href=\"#rsyncsersync实现数据实时同步\">#</a> Rsync+sersync 实现数据实时同步</h3>\n<p><strong>环境准备</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">主机名</th>\n<th style=\"text-align:center\"><strong>IP</strong></th>\n<th><strong>角色</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">server</td>\n<td style=\"text-align:center\">192.168.40.101</td>\n<td>rsync 服务端</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">client</td>\n<td style=\"text-align:center\">192.168.40.102</td>\n<td>rsync 客户</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"1rsync服务端-2\"><a class=\"anchor\" href=\"#1rsync服务端-2\">#</a> 1.rsync 服务端</h4>\n<h5 id=\"11-关闭防火墙-selinux-3\"><a class=\"anchor\" href=\"#11-关闭防火墙-selinux-3\">#</a> 1.1 关闭防火墙、selinux</h5>\n<pre><code>[root@localhost ~]# hostnamectl set-hostname backup\n[root@localhost ~]# bash\n[root@backup ~]# hostnamectl set-hostname aizj_lb01\n[root@backup ~]# systemctl stop firewalld\n[root@backup ~]# systemctl disable firewalld\n[root@backup ~]# sed -i 's/^SELINUX=enforcing/SELINUX=disabled/g' /etc/sysconfig/selinux\n[root@backup ~]# sed -i 's/^SELINUX=enforcing/SELINUX=disabled/g' /etc/selinux/config\n[root@backup ~]# yum install net-tools vim tree lrzsz wget unzip dos2unix bash-completion  lsof ntp ntpdate git -y\n[root@backup ~]# yum update -y --exclude=kernel* &amp;&amp; reboot\n[root@backup ~]# echo 'Asia/Shanghai' &gt;/etc/timezone\n[root@backup ~]# ntpdate time2.aliyun.com\n[root@backup ~]# crontab -e\n*/5 * * * * /usr/sbin/ntpdate time2.aliyun.com &amp;&gt; /dev/nul\n[root@backup ~]# mkdir /soft /data /scripts /backup\n</code></pre>\n<h5 id=\"12-安装rsync-3\"><a class=\"anchor\" href=\"#12-安装rsync-3\">#</a> 1.2 安装 rsync</h5>\n<pre><code>[root@backup ~]# yum install -y rsync\n[root@server ~]# systemctl start rsyncd\n[root@server ~]# systemctl enable rsyncd\n[root@backup ~]# useradd -M -s /sbin/nologin rsync\n[root@backup ~]# mkdir -p /backup/mysql  /backup/file\n[root@backup ~]# chown -R rsync.rsync /backup/mysql /backup/file \n</code></pre>\n<h5 id=\"13-修改配置文件-3\"><a class=\"anchor\" href=\"#13-修改配置文件-3\">#</a> 1.3 修改配置文件</h5>\n<p><em><mark>#生产环境中取消注释，导致备份数据报错</mark></em></p>\n<pre><code>#带注释配置文件\n[root@backup ~]# vim /etc/rsyncd.conf\nuid = rsync             #运行服务的用户\ngid = rsync             #运行服务的组\nport = 873              #服务监听端口\nfake super = yes        #服务无需使用root用户身份，即可接收文件的完整属性\nuse chroot = no         #禁锢目录,不允许获取root权限\nmax connections = 200   #最大连接数,最多能有多少个客户端跟服务端的873端口建立连接\ntimeout = 600           #超时时间\nignore errors          #忽略错误\nread only = false      #客户是否只读\nlist = false           #不允许查看模块信息\nauth users = rsync_backup         #定义虚拟用户，用户数据传输\nsecrets file = /etc/rsync.passwd  #定义虚拟用户密码认证文件\nlog file = /var/log/rsyncd.log    #日志文件存放的位置\n[backup_mysql]         #模块名\ncomment = welcome to rsync_backup\npath = /backup/mysql   #数据存放目录\n[backup_file]          #模块名\ncomment = welcome to rsync_backup\npath = /backup/file    #数据存放目录 \n\n#不带注释配置文件\n[root@backup ~]# cat /etc/rsyncd.conf\nuid = rsync        \ngid = rsync         \nport = 873     \nfake super = yes     \nuse chroot = no        \nmax connections = 200  \ntimeout = 600         \nignore errors       \nread only = false    \nlist = false          \nauth users = rsync_backup        \nsecrets file = /etc/rsync.passwd\nlog file = /var/log/rsyncd.log    \n[backup_mysql]       \ncomment = welcome to rsync_backup\npath = /backup/mysql  \n[backup_file]         \ncomment = welcome to rsync_backup\npath = /backup/file \n</code></pre>\n<h5 id=\"4-创建虚拟用户密码文件并设置权限-3\"><a class=\"anchor\" href=\"#4-创建虚拟用户密码文件并设置权限-3\">#</a> 4. 创建虚拟用户密码文件并设置权限</h5>\n<pre><code>[root@backup ~]# cat /etc/rsync.passwd\nrsync_backup:your passwd\n[root@backup ~]# chmod 600 /etc/rsync.passwd\n[root@backup ~]# systemctl restart rsyncd &amp;&amp; systemctl status rsyncd\n</code></pre>\n<h5 id=\"5-检查服务端口是否开启-3\"><a class=\"anchor\" href=\"#5-检查服务端口是否开启-3\">#</a> 5. 检查服务端口是否开启</h5>\n<pre><code>[root@backup ~]# netstat -lntp | grep &quot;rsync&quot;\ntcp        0      0 0.0.0.0:873             0.0.0.0:*               LISTEN      20357/rsync         \ntcp6       0      0 :::873                  :::*                    LISTEN      20357/rsync \n</code></pre>\n<h4 id=\"2-客户端安装sersync\"><a class=\"anchor\" href=\"#2-客户端安装sersync\">#</a> 2. 客户端安装 sersync</h4>\n<p><strong>2.1 安装 sercync 依赖</strong></p>\n<pre><code>[root@nfs ~]# yum install -y inotify-tools rsync\n</code></pre>\n<p><strong>2.2 安装 sercync</strong></p>\n<pre><code>[root@nfs ~]# mkdir -p /soft\n[root@nfs ~]# cd /soft/\n[root@nfs ~]# wget https://down.whsir.com/downloads/sersync2.5.4_64bit_binary_stable_final.tar.gz\n[root@nfs soft]# tar -xf sersync2.5.4_64bit_binary_stable_final.tar.gz\n[root@nfs soft]# mv GNU-Linux-x86 /usr/local/sersync\n</code></pre>\n<h5 id=\"23-修改配置文件\"><a class=\"anchor\" href=\"#23-修改配置文件\">#</a> 2.3 <strong>修改配置文件</strong></h5>\n<pre><code>[root@nfs soft]# cd /usr/local/sersync/\n[root@nfs sersync]# cp confxml.xml confxml.xml.bak\n[root@nfs sersync]# vim confxml.xml\n...\n5    &lt;fileSystem xfs=&quot;true&quot;/&gt;    #第5行 false改为true\n13          &lt;delete start=&quot;true&quot;/&gt; #第13-20行 false改为true,#说明：监控以上变化推送\n14        &lt;createFolder start=&quot;true&quot;/&gt;\n15        &lt;createFile start=&quot;false&quot;/&gt;\n16        &lt;closeWrite start=&quot;true&quot;/&gt;\n17        &lt;moveFrom start=&quot;true&quot;/&gt;\n18        &lt;moveTo start=&quot;true&quot;/&gt;\n19        &lt;attrib start=&quot;true&quot;/&gt;\n20        &lt;modify start=&quot;true&quot;/&gt;\n24        &lt;localpath watch=&quot;/data&quot;&gt;      #监控的本地目录\n25             &lt;remote ip=&quot;192.168.1.145&quot; name=&quot;backup_file&quot;/&gt;  #rsync服务端IP和模块名backup_file\n30      &lt;commonParams params=&quot;-avz&quot;/&gt;  #rsync命令选项\n31      &lt;auth start=&quot;true&quot; users=&quot;rsync_backup&quot; passwordfile=&quot;/etc/rsync.passwd&quot;/&gt; #rsync认证信息\n...\n</code></pre>\n<h5 id=\"24-生成密码文件\"><a class=\"anchor\" href=\"#24-生成密码文件\">#</a> 2.4 生成密码文件</h5>\n<pre><code>[root@nfs sersync]# echo 'your passwd' &gt; /etc/rsync.passwd\n[root@nfs sersync]# chmod 600 /etc/rsync.passwd\n</code></pre>\n<h5 id=\"25-启动sersync\"><a class=\"anchor\" href=\"#25-启动sersync\">#</a> 2.5 启动 sersync</h5>\n<pre><code>[root@nfs sersync]# ln -s /usr/local/sersync/sersync2 /usr/bin/\n[root@nfs sersync]# sersync2 -dro /usr/local/sersync/confxml.xml     #针对配置文件confxml.xml启动sersync\n</code></pre>\n<p><strong>2.5 设置 sersync 开机自启</strong></p>\n<pre><code>[root@qzj_nfs sersync]# vim /etc/rc.d/rc.local   \n/usr/local/sersync/sersync2 -d -r -o  /usr/local/sersync/confxml.xml  #在最后添加一行\n[root@qzj_nfs sersync]# chmod +x /etc/rc.d/rc.local\n</code></pre>\n<p><strong>2.6 测试</strong></p>\n<p><em>在客户端 /data 目录增删改目录文件，rsync 服务端数据存放目录变化</em></p>\n<pre><code>[root@backup backup]# watch ls\n</code></pre>\n<p><strong>2.7 添加脚本监控 sersync 是否正常运行</strong></p>\n<pre><code>[root@nfs sersync]# cat /scripts/check_sersync.sh \n#!/bin/sh\nsersync=&quot;/usr/local/sersync/sersync2&quot;\nconfxml=&quot;/usr/local/sersync/confxml.xml&quot;\nstatus=$(ps aux |grep 'sersync2'|grep -v 'grep'|wc -l)\nif [ $status -eq 0 ];\nthen\n$sersync -d -r -o $confxml &amp;\nelse\nexit 0;\nfi\n\n[root@nfs sersync]# chmod +x /scripts/check_sersync.sh\n[root@nfs sersync]# crontab -l\n*/5 * * * * /usr/bin/sh /scripts/check_sersync.sh &amp;&gt; /dev/null\n</code></pre>\n<p><em><strong>补充： 多实例情况</strong></em><br />\n 1、配置多个 confxml.xml 文件（比如：www、bbs、blog.... 等等）<br />\n2、修改端口、同步路径、模块名称<br />\n 3、根据不同的需求同步对应的实例文件<br />\n /usr/local/sersync/sersync2 -dro /usr/local/sersync/www_confxml.xml<br />\n/usr/local/sersync/sersync2 -dro /usr/local/sersync/bbs_confxml.xml</p>\n",
            "tags": [
                "rsync"
            ]
        },
        {
            "id": "http://xuyong.cn/posts/3071070978.html",
            "url": "http://xuyong.cn/posts/3071070978.html",
            "title": "企业级私有仓库Harbor搭建",
            "date_published": "2025-03-30T08:17:00.000Z",
            "content_html": "<h3 id=\"企业级私有仓库harbor\"><a class=\"anchor\" href=\"#企业级私有仓库harbor\">#</a> 企业级私有仓库 Harbor</h3>\n<p>企业部署 Kuberetes 集群环境之后，我们就可以将原来在传统虚拟机上运行的业务，迁移到 kubernetes 上，让 Kubernetes 通过容器的方式来管理。而一旦我们需要将传统业务使用容器的方式运行起来，就需要构建很多镜像，那么这些镜像就需要有一个专门的位置存储起来，为我们提供镜像上传和镜像下载等功能。但我们不能使用阿里云或者 Dockerhub 等仓库，首先拉取速度比较慢，其次镜像的安全性无法保证，所以就需要部署一个私有的镜像仓库来管理这些容器镜像。同时该仓库还需要提供高可用功能，确保随时都能上传和下载可用的容器镜像。</p>\n<h4 id=\"1-关闭防火墙-selinux-环境配置\"><a class=\"anchor\" href=\"#1-关闭防火墙-selinux-环境配置\">#</a> 1、关闭防火墙、Selinux、环境配置</h4>\n<pre><code>[root@harbor ~]# sudo mkdir -p /etc/docker\n[root@harbor ~]# hostnamectl set-hostname harbor\n[root@harbor ~]# systemctl stop firewalld\n[root@harbor ~]# systemctl disable firewalld\n[root@harbor ~]# sed -i 's/^SELINUX=enforcing/SELINUX=disabled/g' /etc/sysconfig/selinux\n[root@harbor ~]# yum install net-tools vim tree lrzsz wget unzip dos2unix bash-completion  lsof ntp ntpdate -y\n[root@harbor ~]# yum update -y\n[root@harbor ~]# mkdir /soft /data /scripts /backup\n</code></pre>\n<h4 id=\"2-docker安装\"><a class=\"anchor\" href=\"#2-docker安装\">#</a> 2、Docker 安装</h4>\n<pre><code>[root@harbor ~]# yum install -y yum-utils device-mapper-persistent-data lvm2\n[root@harbor ~]# curl -o /etc/yum.repos.d/docker-ce.repo  https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\n[root@harbor ~]# yum list docker-ce --showduplicates |sort -r \n[root@harbor ~]# yum install docker-ce docker-compose -y\n</code></pre>\n<h4 id=\"3-配置docker加速\"><a class=\"anchor\" href=\"#3-配置docker加速\">#</a> 3、配置 Docker 加速</h4>\n<pre><code>[root@harbor ~]# sudo mkdir -p /etc/docker\n[root@harbor ~]# sudo tee /etc/docker/daemon.json &lt;&lt;-'EOF'\n&#123;\n  &quot;registry-mirrors&quot;: [\n\t  &quot;https://docker.credclouds.com&quot;,\n\t  &quot;https://k8s.credclouds.com&quot;,\n\t  &quot;https://quay.credclouds.com&quot;,\n\t  &quot;https://gcr.credclouds.com&quot;,\n\t  &quot;https://k8s-gcr.credclouds.com&quot;,\n\t  &quot;https://ghcr.credclouds.com&quot;,\n\t  &quot;https://do.nark.eu.org&quot;,\n\t  &quot;https://docker.m.daocloud.io&quot;,\n\t  &quot;https://docker.nju.edu.cn&quot;,\n\t  &quot;https://docker.mirrors.sjtug.sjtu.edu.cn&quot;,\n\t  &quot;https://docker.1panel.live&quot;,\n\t  &quot;https://docker.rainbond.cc&quot;\n  ], \n  &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;] \n&#125;\nEOF\n[root@harbor ~]# systemctl enable docker --now\n</code></pre>\n<h4 id=\"4-安装harbor\"><a class=\"anchor\" href=\"#4-安装harbor\">#</a> 4、安装 Harbor</h4>\n<pre><code>[root@harbor ~]# cd /soft/\n[root@harbor ~]# wget https://github.com/goharbor/harbor/releases/download/v2.6.1/harbor-offline-installer-v2.6.1.tgz\n[root@harbor soft]# tar xf harbor-offline-installer-v2.6.1.tgz\n[root@harbor soft]# cd harbor\n[root@harbor harbor]# vim harbor.yml\nhostname: 192.168.1.134\n...\n#https:\n#  # https port for harbor, default is 443\n#  port: 443\n#  # The path of cert and key files for nginx\n#  certificate: /your/certificate/path\n#  private_key: /your/private/key/path\n...\nharbor_admin_password: Harbor12345\n[root@harbor harbor]#  ./install.sh\n</code></pre>\n<h4 id=\"5-配置nginx负载均衡调度\"><a class=\"anchor\" href=\"#5-配置nginx负载均衡调度\">#</a> 5、配置 Nginx 负载均衡调度</h4>\n<pre><code>[root@lb ~]# vim s.hmallleasing.com.conf\nserver &#123;\n    listen 443 ssl;\n    server_name harbor.hmallleasing.com;\n    client_max_body_size 1G; \n    ssl_prefer_server_ciphers on;\n    ssl_certificate  /etc/nginx/sslkey/_.hmallleasing.com_chain.crt;\n    ssl_certificate_key  /etc/nginx/sslkey/_.hmallleasing.com_key.key;\n    location / &#123;\n        proxy_pass http://192.168.1.134;\n#      include proxy_params;\n#        proxy_set_header Host $http_host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        \n        proxy_connect_timeout 30;\n        proxy_send_timeout 60;\n        proxy_read_timeout 60;\n        \n        proxy_buffering on;\n        proxy_buffer_size 32k;\n        proxy_buffers 4 128k;\n        proxy_temp_file_write_size 10240k;\t\t\n        proxy_max_temp_file_size 10240k;\n    &#125;\n&#125;\n\nserver &#123;\n    listen 80;\n    server_name s.hmallleasing.com;\n    return 302 https://$server_name$request_uri;\n&#125;\n</code></pre>\n<h4 id=\"6-推送镜像至harbor\"><a class=\"anchor\" href=\"#6-推送镜像至harbor\">#</a> 6、推送镜像至 Harbor</h4>\n<pre><code>[root@harbor harbor]# docker tag beae173ccac6 harbor.hmallleasing.com/ops/busybox.v1\n[root@harbor harbor]# docker push harbor.hmallleasing.com/ops/busybox.v1\n[root@harbor harbor]# docker login harbor.hmallleasing.com\n[root@harbor harbor]# docker push harbor.hmallleasing.com/ops/busybox.v1\n</code></pre>\n<h4 id=\"7-harbor停止与启动\"><a class=\"anchor\" href=\"#7-harbor停止与启动\">#</a> 7、Harbor 停止与启动</h4>\n<pre><code>#停用Harbor\n[root@harbor harbor]# pwd\n/soft/harbor\n[root@harbor harbor]# docker-compose stop\n #启动Harbor\n[root@harbor harbor]# docker-compose up -d\n[root@harbor harbor]# docker-compose start\n</code></pre>\n",
            "tags": [
                "Harbor"
            ]
        }
    ]
}