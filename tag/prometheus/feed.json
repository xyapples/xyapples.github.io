{
    "version": "https://jsonfeed.org/version/1",
    "title": "LinuxSre云原生 • All posts by \"prometheus\" tag",
    "description": "专注于 Linux 运维、云计算、云原⽣等技术",
    "home_page_url": "http://ixuyong.cn",
    "items": [
        {
            "id": "http://ixuyong.cn/posts/2041568856.html",
            "url": "http://ixuyong.cn/posts/2041568856.html",
            "title": "Prometheus监控Kubernetes",
            "date_published": "2025-06-29T02:33:49.000Z",
            "content_html": "<h3 id=\"prometheus监控kubernetes\"><a class=\"anchor\" href=\"#prometheus监控kubernetes\">#</a> Prometheus 监控 Kubernetes</h3>\n",
            "tags": [
                "Prometheus"
            ]
        },
        {
            "id": "http://ixuyong.cn/posts/4081185381.html",
            "url": "http://ixuyong.cn/posts/4081185381.html",
            "title": "Prometheus监控实战（三）",
            "date_published": "2025-06-28T14:17:01.000Z",
            "content_html": "<h3 id=\"prometheus监控实战三\"><a class=\"anchor\" href=\"#prometheus监控实战三\">#</a> Prometheus 监控实战（三）</h3>\n",
            "tags": [
                "Prometheus"
            ]
        },
        {
            "id": "http://ixuyong.cn/posts/3386060324.html",
            "url": "http://ixuyong.cn/posts/3386060324.html",
            "title": "PromQL快速入门（二）",
            "date_published": "2025-06-28T14:16:53.000Z",
            "content_html": "<h3 id=\"promql快速入门二\"><a class=\"anchor\" href=\"#promql快速入门二\">#</a> PromQL 快速入门（二）</h3>\n<h4 id=\"一-promql基础概念\"><a class=\"anchor\" href=\"#一-promql基础概念\">#</a> 一、PromQL 基础概念</h4>\n<h5 id=\"11-什么是promeql\"><a class=\"anchor\" href=\"#11-什么是promeql\">#</a> 1.1 什么是 PromeQL</h5>\n<p>Prometheus 内置了⼀种强⼤的查询语⾔：PromQL，即 PrometheusQuery Language。PromQL 允许⽤户实时查询监控数据，并对这些数据执⾏复杂的聚合和计算操作。</p>\n<p>在 PromQL 中，查询的结果被称为 “向量（vector）”，分为两种类型：</p>\n<p>1、即时向量（Instant vector）：即时向量查询返回的是⼀组时间序列数据，但每个时间序列中只包含单个的最新数据点。例如：查询当前时刻服务器 1 分钟的负载，所得到的结果就是⼀个即时向量。</p>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/M18NeIk.jpeg\" alt=\"1.jpg\" /></p>\n<p>2、范围向量（Range vector）：范围向量查询的结果包含了⼀个时间范围内的所有数据点。例如：查询过去 1 分钟内服务器负载的变化情况，返回的数据集就是⼀个范围向量。</p>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/VlsLPMD.jpeg\" alt=\"2.jpg\" /></p>\n<p>在 PromQL 中，除了有向量类型的数据，还有其他的数据类型，具体有：</p>\n<p>标量（Scalar）：标量仅代表⼀个单⼀的浮点数值。可以将向量的某⼀个值通过 scalar () 函数转为标量，然后进⾏数值运算，但使⽤较少。</p>\n<p>字符串（String）：在 PromQL 查询结果中，每个时间序列都伴随着⼀组标签，这些标签和标签值，就是使⽤字符串类型来定义。这些标签为时间序列提供了元数据信息，例如 {job=&quot;nginx&quot;,instance=&quot;<a href=\"http://prom-node01.oldxu.net\">prom-node01.oldxu.net</a>&quot;, method=&quot;get&quot;, url=&quot;/api&quot;} ，通过标签能很好的对数据进⾏分类和识别。</p>\n<h5 id=\"12-promql应用场景\"><a class=\"anchor\" href=\"#12-promql应用场景\">#</a> 1.2 PromQL 应⽤场景</h5>\n<p>Prometheus 的核⼼就是 PromQL，PromQL 在⽇常的数据可视化，查询、定义告警规则都会是⽤到，因此掌握 PromQL 基本上就掌握了 Prometheus；</p>\n<p>1、临时查询：使⽤ PromQL，你可以实时地查询监控数据，这对于调试和诊断问题⾮常有帮助。通常，我们通过 Prometheus ⾃带的表达式浏览器来执⾏这些查询。</p>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/AJVZFdO.jpeg\" alt=\"3.jpg\" /></p>\n<p>2、数据可视化，PromQL 可以帮助我们创建数据的可视化展示，这些可视化通常是通过集成⼯具如 Grafana 来实现的，可以将我们 PromQL 查询的结果展示得更直观。</p>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/oqN9oVU.jpeg\" alt=\"2.jpg\" /></p>\n<p>3、监控告警：Prometheus 可以直接使⽤ PromQL 对指标的查询结果来设置告警。⼀旦查询结果满⾜指定的条件，就会触发告警，⼀个完整的报警规则如下所示：</p>\n<p>⼀个告警规则包括了告警的名称、条件、持续时间等信息。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>groups:</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>- name: 告警组</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  rules:</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  - alert: 节点宕机   <span class=\"token comment\"># 告警名称</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    expr: up <span class=\"token operator\">==</span> <span class=\"token number\">0</span>   <span class=\"token comment\"># 告警条件</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    for: 1m         <span class=\"token comment\"># 持续时间</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    labels:</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      severity: critical</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    annotations: <span class=\"token comment\"># 定义邮件中收到的告警详细内容</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      summary: <span class=\"token string\">\"节点宕机警告 - 实例：\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      description: <span class=\"token string\">\"作业  的节点⽆法访问，已经持续超过1分钟。\"</span></pre></td></tr></table></figure><h4 id=\"二-promql基础使用\"><a class=\"anchor\" href=\"#二-promql基础使用\">#</a> 二、PromQL 基础使⽤</h4>\n<h5 id=\"21-指标查询\"><a class=\"anchor\" href=\"#21-指标查询\">#</a> 2.1 指标查询</h5>\n<p>1、查询指标的最直接⽅式是输⼊ “指标的名称”。⽐如，你想知道系统的⼀分钟负载（node_load1）情况：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 查询表达式</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>node_load1<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 查询结果（结果展示了所有被监控节点的⼀分钟负载。）</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>node_load1<span class=\"token punctuation\">&#123;</span>instance<span class=\"token operator\">=</span><span class=\"token string\">\"prom-node01.oldxu.net:9100\"</span>, <span class=\"token assign-left variable\">job</span><span class=\"token operator\">=</span><span class=\"token string\">\"node_exporter\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>node_load1<span class=\"token punctuation\">&#123;</span>instance<span class=\"token operator\">=</span><span class=\"token string\">\"prom-node02.oldxu.net:9100\"</span>, <span class=\"token assign-left variable\">job</span><span class=\"token operator\">=</span><span class=\"token string\">\"node_exporter\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">0.02</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>node_load1<span class=\"token punctuation\">&#123;</span>instance<span class=\"token operator\">=</span><span class=\"token string\">\"prom-node03.oldxu.net:9100\"</span>, <span class=\"token assign-left variable\">job</span><span class=\"token operator\">=</span><span class=\"token string\">\"node_exporter\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">0.13</span></pre></td></tr></table></figure><p>2、但是，在实际监控时，我们通常只需要关注 “特定节点” 的指标数据。例如，如果我只想查看 <a href=\"http://prom-node01.oldxu.net\">prom-node01.oldxu.net</a> 这个节点的⼀分钟负载情况，那么就可需要是⽤ “标签匹配器” 来筛选出所需的指标。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 查询表达式</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>node_load1<span class=\"token punctuation\">&#123;</span>instance<span class=\"token operator\">=</span><span class=\"token string\">\"prom-node01.oldxu.net:9100\"</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 查询结果（由于指定了过滤条件，因此只会展示 node01 节点的 1 分钟负载）</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>node_load1<span class=\"token punctuation\">&#123;</span>instance<span class=\"token operator\">=</span><span class=\"token string\">\"prom-node01.oldxu.net:9100\"</span>, <span class=\"token assign-left variable\">job</span><span class=\"token operator\">=</span><span class=\"token string\">\"node_exporter\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">0.35</span></pre></td></tr></table></figure><p>3、因此，标签匹配器就是通过标签和标签值，来筛选出我们所需要的指标数据。使⽤标签匹配器时，可以按照以下语法构造查询表达式：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>metric_name<span class=\"token operator\">></span><span class=\"token punctuation\">&#123;</span><span class=\"token operator\">&lt;</span>label_name<span class=\"token operator\">>=</span><span class=\"token operator\">&lt;</span>label_value<span class=\"token operator\">></span>, <span class=\"token operator\">&lt;</span>label_name<span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span><span class=\"token operator\">=~</span><span class=\"token operator\">&lt;</span>regex<span class=\"token operator\">></span>, <span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>其中各个部分的含义如下：</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># = 表示⼀个标签必须严格等于⼀个给定的值。</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># != 表示排除等于特定值的标签。</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># =~ 表示标签的值必须匹配⼀个正则表达式。</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># !~ 表示标签的值不应匹配⼀个正则表达式。</span></pre></td></tr></table></figure><p>实例 1：查询所有实例，CPU 的第 0 个核⼼，中的 user ⽤户空间所占⽤ CPU 的时间，指标名称：node_cpu_seconds_total</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>node_cpu_seconds_total<span class=\"token punctuation\">&#123;</span>cpu<span class=\"token operator\">=</span><span class=\"token string\">\"0\"</span>,mode<span class=\"token operator\">=</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>实例 2：查询所有实例，eth0 ⽹卡发送总⼤⼩，指标名称：node_network_transmit_bytes_total</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>node_network_transmit_bytes_total<span class=\"token punctuation\">&#123;</span>device<span class=\"token operator\">=</span><span class=\"token string\">\"eth0\"</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 转为 GB</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>node_network_transmit_bytes_total<span class=\"token punctuation\">&#123;</span>device<span class=\"token operator\">=</span><span class=\"token string\">\"eth0\"</span><span class=\"token punctuation\">&#125;</span> / <span class=\"token number\">1024</span> /1024 /1024</pre></td></tr></table></figure><p>实例 3：查询所有实例的⽹卡接收字节数，排除 lo 接⼝，指标名称：node_network_receive_bytes_total</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>node_network_receive_bytes_total<span class=\"token punctuation\">&#123;</span>device<span class=\"token operator\">!=</span><span class=\"token string\">\"lo\"</span>,device<span class=\"token operator\">!=</span><span class=\"token string\">\"docker0\"</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>node_network_receive_bytes_total<span class=\"token punctuation\">&#123;</span>device<span class=\"token operator\">!</span>~<span class=\"token string\">\"lo|docker0\"</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 转为 GB</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>node_network_receive_bytes_total<span class=\"token punctuation\">&#123;</span>device<span class=\"token operator\">!=</span><span class=\"token string\">\"lo\"</span>,device<span class=\"token operator\">!=</span><span class=\"token string\">\"docker0\"</span><span class=\"token punctuation\">&#125;</span> /1024 /102</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">4</span> /1024</pre></td></tr></table></figure><p>实例 4：查询：挂载点以 /run 开头的⽂件系统可⽤字节数，指标名称 node_filesystem_avail_bytes</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>node_filesystem_avail_bytes<span class=\"token punctuation\">&#123;</span>mountpoint<span class=\"token operator\">=~</span><span class=\"token string\">\"^/run.*\"</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 字节转 MB</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>node_filesystem_avail_bytes<span class=\"token punctuation\">&#123;</span>mountpoint<span class=\"token operator\">=~</span><span class=\"token string\">\"^/run.*\"</span><span class=\"token punctuation\">&#125;</span> /1024/1024</pre></td></tr></table></figure><p>实例 5：块设备名字不包含 vda 和 sr0 的读字节数，指标名称 node_disk_read_bytes_total</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>node_disk_read_bytes_total<span class=\"token punctuation\">&#123;</span>device<span class=\"token operator\">!</span>~<span class=\"token string\">\".*sr0.*\"</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"22-时间范围查询\"><a class=\"anchor\" href=\"#22-时间范围查询\">#</a> 2.2 时间范围查询</h5>\n<p>在 Prometheus 中，范围向量选择器使我们能够提取时间序列中⼀段时间范围内的数据点。要定义⼀个范围向量选择器，你只需要在指标名称后⾯加上⽅括号 []，并在其中指定⼀个时间⻓度。时间⻓度有：s 秒，m 分钟，h ⼩时，d 天，w 周，y 年。使⽤范围向量选择器，你可以灵活查询从最近⼏分钟到⼏年的数据，便于分析和监控指标随时间的变化。</p>\n<p>1、例如，我们想查询 prom-node01.oldxu.net 这个实例，在过去 2 分钟，负载所有数据点。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>node_load1<span class=\"token punctuation\">&#123;</span>instance<span class=\"token operator\">=</span><span class=\"token string\">\"prom-node01.oldxu.net:9100\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">[</span>2m<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>node_load1<span class=\"token punctuation\">&#123;</span>instance<span class=\"token operator\">=</span><span class=\"token string\">\"prom-node01.oldxu.net:9100\"</span>, <span class=\"token assign-left variable\">job</span><span class=\"token operator\">=</span><span class=\"token string\">\"node_exporter\"</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">0</span> @1751165619.66</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">0</span> @1751165634.66</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">0</span> @1751165649.66</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">0</span> @1751165664.66</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token number\">0</span> @1751165679.66</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token number\">0</span> @1751165694.66</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token number\">0</span> @1751165709.66</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token number\">0</span> @1751165724.66</pre></td></tr></table></figure><p>2、在 Prometheus 中，通常使⽤相对时间（如过去⼏分钟、⼩时或天）来查询数据。但是，如果你需要查询⼀个绝对时间点的数据，您可以直接使⽤ UNIX 时间戳来指定查询的具体时间。（在 Prometheus 中通常是以毫秒为单位的）</p>\n<p>例如，查询 2025 年 6 ⽉ 29 ⽇上午 10:58:10 的 <a href=\"http://prom-node01.oldxu.net\">prom-node01.oldxu.net</a> 实例的负载状态。需要先将时间转为 UNIX 时间戳，然后执⾏如下查询语句。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#指定时间查询表达式</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>node_load1<span class=\"token punctuation\">&#123;</span>instance<span class=\"token operator\">=</span><span class=\"token string\">\"prom-node01.oldxu.net:9100\"</span><span class=\"token punctuation\">&#125;</span> @ <span class=\"token number\">1751165890</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 查询结果</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>node_load1<span class=\"token punctuation\">&#123;</span>instance<span class=\"token operator\">=</span><span class=\"token string\">\"prom-node01.oldxu.net:9100\"</span>, <span class=\"token assign-left variable\">job</span><span class=\"token operator\">=</span><span class=\"token string\">\"node_exporter\"</span><span class=\"token punctuation\">&#125;</span>  <span class=\"token number\">0.27</span></pre></td></tr></table></figure><h5 id=\"23-时间偏移查询\"><a class=\"anchor\" href=\"#23-时间偏移查询\">#</a> 2.3 时间偏移查询</h5>\n<p>除了能够查询过去⼏分钟或⼏⼩时的数据，以及查询指定时间点的数据，同时 Prometheus 也允许您通过 offset 修饰符来指定查询从当前时间往回推某个具体的时间段。这种⽅式常⽤于⽐较，例如：今天 QPS 是 10000，昨天这个时间是 5000，我们就可以计算它们的增⻓率之类的。</p>\n<p>1、如果您想要查看昨天整天的数据，可以使⽤以下查询表达式：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 假设是⽤如下表达式查询的结果是 2023-12-26 17:20</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>node_load1</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 那么如下表达式查询的数据将返回：(2023-12-24 17:20 - 2023-12-25 17:20)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>node_load1<span class=\"token punctuation\">[</span>1d<span class=\"token punctuation\">]</span> offset 1d</pre></td></tr></table></figure><p>2、如果想要查看⼀周前的 “时间范围内” 的数据，可以使⽤如下查询：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 查询表达式</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>node_load1<span class=\"token punctuation\">[</span>5m<span class=\"token punctuation\">]</span> offset 1w</pre></td></tr></table></figure><p>这个查询会返回当前时间往回推⼀周，并从那个时间点开始，持续 5 分钟的数据范围内的 node_load1 指标。例如，如果现在是 12 ⽉ 26 ⽇星期⼀下午 17:30，那么该查询将返回 12 ⽉ 19 ⽇星期⼀下午 17:25 到 17:30 这 5 分钟范围内的所有数据点。</p>\n<p>3、对⽐分析实战：对⽐ “当前时间点接收的⽹络流量” 与 “1 ⼩时前的流量” 进⾏⽐对分析，以判断流量是增⻓还是减少。</p>\n<ul>\n<li>计算同环⽐的增⻓率或减少率的公式：同环⽐率 =(当前流量−过去 1 ⼩时的流量) / 过去 1 ⼩时的流量 ×100</li>\n<li>例如，如果当前总接收流量是 6000MB，⽽ 1 ⼩时前接收的总流量是 5000MB，</li>\n<li>那么计算公式为： （6000 - 5000） / 5000 * 100 = 20% （意味着相⽐ 1 ⼩时前，当前流量增⻓了 20%）</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 表达式</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span>node_network_receive_bytes_total<span class=\"token punctuation\">&#123;</span>device<span class=\"token operator\">=</span><span class=\"token string\">\"eth0\"</span><span class=\"token punctuation\">&#125;</span> - node_network_receive_bytes_total<span class=\"token punctuation\">&#123;</span>device<span class=\"token operator\">=</span><span class=\"token string\">\"eth0\"</span><span class=\"token punctuation\">&#125;</span> offset 1h<span class=\"token punctuation\">)</span> / node_network_receive_bytes_total<span class=\"token punctuation\">&#123;</span>device<span class=\"token operator\">=</span><span class=\"token string\">\"eth0\"</span><span class=\"token punctuation\">&#125;</span> offset 1h * <span class=\"token number\">100</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 结果</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span>device<span class=\"token operator\">=</span><span class=\"token string\">\"eth0\"</span>, <span class=\"token assign-left variable\">instance</span><span class=\"token operator\">=</span><span class=\"token string\">\"prom-node01.oldxu.net:9100\"</span>, <span class=\"token assign-left variable\">job</span><span class=\"token operator\">=</span><span class=\"token string\">\"node_exporter\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token parameter variable\">-87.68874820331817</span> <span class=\"token comment\"># 负增⻓ 80%</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span>device<span class=\"token operator\">=</span><span class=\"token string\">\"eth0\"</span>, <span class=\"token assign-left variable\">instance</span><span class=\"token operator\">=</span><span class=\"token string\">\"prom-node02.oldxu.net:9100\"</span>, <span class=\"token assign-left variable\">job</span><span class=\"token operator\">=</span><span class=\"token string\">\"node_exporter\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">4231.893284128109</span>  <span class=\"token comment\"># 增⻓ 4231%</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span>device<span class=\"token operator\">=</span><span class=\"token string\">\"eth0\"</span>, <span class=\"token assign-left variable\">instance</span><span class=\"token operator\">=</span><span class=\"token string\">\"prom-node03.oldxu.net:9100\"</span>, <span class=\"token assign-left variable\">job</span><span class=\"token operator\">=</span><span class=\"token string\">\"node_exporter\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">24.658781604740295</span> <span class=\"token comment\"># 增⻓ 24%</span></pre></td></tr></table></figure><h4 id=\"三-promql常用函数\"><a class=\"anchor\" href=\"#三-promql常用函数\">#</a> 三、PromQL 常⽤函数</h4>\n<h5 id=\"31-count类型常用函数\"><a class=\"anchor\" href=\"#31-count类型常用函数\">#</a> 3.1 Count 类型常⽤函数</h5>\n<p>前⾯我们讲过，Counter 类型的监控指标只增不减，因此其样本值应该是不断增⼤的。因此单纯的 Counter 总数并没有直接作⽤，⽽是需要借助于 rate、irate、increase 和等函数来计算样本数据的变化状况（增⻓率）；</p>\n<p>1、rate ⽤于计算平均增⻓速率：计算公式：通过指定时间范围内的样本，使⽤最后⼀个样本的值减去第⼀个样本的值，⽽后除以这两个样本之间的间隔时⻓。</p>\n<p>例如： rate (nginx_http_requests_total [1m]) ，表示要获取 1 分钟内，该指标上的 http 总请求数的平均增⻓速率；</p>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/luPGWpV.jpeg\" alt=\"1.jpg\" /></p>\n<p>2、irate ⽤于计算瞬时的增⻓速率（灵敏度较⾼）：计算公式：通过指定时间范围内的样本最后⼀个样本的值减去前⼀个样本的值，⽽后除以这两个样本之间的间隔时⻓。</p>\n<p>例如： irate (nginx_http_requests_total [1m]) ，表示要获取 1 分钟内，该指标上的 http 总请求数的瞬时增⻓速率；</p>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/yCfZc4S.jpeg\" alt=\"4.jpg\" /></p>\n<p>3、increase ⽤于计算指定时间范围内样本值的增加量：计算公式：通过指定时间范围内的样本最后⼀个样本的值减去第⼀个样本的值。注意：increase 可能会引⽤时间范围边界之前的样本值，以便于计算能覆盖到指定的整个时间范围。</p>\n<p>例如： increase (nginx_http_requests_total [1m]) ，表示要获取 1 分钟内，http 请求的增量；</p>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/lwmN3vP.jpeg\" alt=\"2.jpg\" /></p>\n<h5 id=\"32-gauge类型常用函数\"><a class=\"anchor\" href=\"#32-gauge类型常用函数\">#</a> 3.2 Gauge 类型常⽤函数</h5>\n<p>Gauge 类型的指标，存储的值是随着时间会变发⽣变化的，它常⽤求和、取平均值、最⼩值、最⼤值等；也会结合 PromQL 的 predict_linear 和 delta 函数使⽤；</p>\n<p>1、predict_linear (v range-vector, t, scalar)：预测时间序列 v 在 t 秒后的值，它通过线性回归的⽅式来预测样本数据的变化趋势；</p>\n<p>例如： predict_linear (node_filesystem_avail_bytes [4h], 60*60*24*30) ，使⽤过去 4 ⼩时的数据来预测接下来 30 天（60*60*24*30）</p>\n<p>的磁盘空间趋势。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>predict_linear<span class=\"token punctuation\">(</span>node_filesystem_avail_bytes<span class=\"token punctuation\">&#123;</span>mountpoint<span class=\"token operator\">=</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">[</span>4h<span class=\"token punctuation\">]</span>, <span class=\"token number\">60</span>*60*24*30<span class=\"token punctuation\">)</span> /1024 /1024 /1024</pre></td></tr></table></figure><p>2、delta (v range-vector)：计算范围向量中每个时间序列上的第⼀个样本值与最后⼀个样本值之差；其计算结果与 increase 函数相同；但 delta 更适⽤于没有重置的场景，或者⽤来监控那些可能上升或下降的指标，例如温度、磁盘空间等。</p>\n<p>例如： delta (cpu_temp_celsius {host=&quot;<a href=\"http://prom01.oldxu.net\">prom01.oldxu.net</a>&quot;}[2h]) ，返回该服务器上的 CPU 温度与 2 ⼩时之前的差异；</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>delta<span class=\"token punctuation\">(</span>cpu_temp_celsius<span class=\"token punctuation\">&#123;</span>host<span class=\"token operator\">=</span><span class=\"token string\">\"prom01.oldxu.net\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">[</span>2h<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>例如： delta (node_filesystem_avail_bytes [10m]) /1024 /1024 ，返回服务器上磁盘可⽤空间与 10 分钟之前的差异；</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>delta<span class=\"token punctuation\">(</span>node_filesystem_avail_bytes<span class=\"token punctuation\">[</span>10m<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> /1024 /1024</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#创建大文件</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">[</span>root@prom-node01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># dd if=/dev/zero of=/bigdata count=1 bs=200M</span></pre></td></tr></table></figure><p>3、changes () ：计算监控时间范围内某个时间序列的数据变化的次数。它只关⼼变化的次数，⽽不关⼼具体变化的值是什么。</p>\n<p>例如： changes (nginx_up [10m]) 监控 Nginx 服务在给定时间内变化的次数，如果停⽌了变化次数 + 1，启动了变化次数 + 1。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>changes<span class=\"token punctuation\">(</span>up<span class=\"token punctuation\">[</span>10m<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#模式测试</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">[</span>root@prom-node02 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># systemctl stop node_exporter</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">[</span>root@prom-node02 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># systemctl start node_exporter</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span>instance<span class=\"token operator\">=</span><span class=\"token string\">\"prom-node01.oldxu.net:3000\"</span>, <span class=\"token assign-left variable\">job</span><span class=\"token operator\">=</span><span class=\"token string\">\"grafana\"</span><span class=\"token punctuation\">&#125;</span>         <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span>instance<span class=\"token operator\">=</span><span class=\"token string\">\"prom-node01.oldxu.net:9090\"</span>, <span class=\"token assign-left variable\">job</span><span class=\"token operator\">=</span><span class=\"token string\">\"prometheus\"</span><span class=\"token punctuation\">&#125;</span>      <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span>instance<span class=\"token operator\">=</span><span class=\"token string\">\"prom-node01.oldxu.net:9100\"</span>, <span class=\"token assign-left variable\">job</span><span class=\"token operator\">=</span><span class=\"token string\">\"node_exporter\"</span><span class=\"token punctuation\">&#125;</span>   <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span>instance<span class=\"token operator\">=</span><span class=\"token string\">\"prom-node02.oldxu.net:9100\"</span>, <span class=\"token assign-left variable\">job</span><span class=\"token operator\">=</span><span class=\"token string\">\"node_exporter\"</span><span class=\"token punctuation\">&#125;</span>   <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span>instance<span class=\"token operator\">=</span><span class=\"token string\">\"prom-node03.oldxu.net:9100\"</span>, <span class=\"token assign-left variable\">job</span><span class=\"token operator\">=</span><span class=\"token string\">\"node_exporter\"</span><span class=\"token punctuation\">&#125;</span>   <span class=\"token number\">0</span></pre></td></tr></table></figure><h4 id=\"四-promql二元运算符\"><a class=\"anchor\" href=\"#四-promql二元运算符\">#</a> 四、PromQL ⼆元运算符</h4>\n<p>PromQL 提供了⼀系列⼆元运算符，包括算术运算 (+ - * /)、⽐较运算 ( == &lt;= &gt;=)、以及集合运算 ( and or unless)。在 PromQL 中，⽤户可以执⾏以下类型的运算：</p>\n<ul>\n<li>\n<p>1、标量与标量之间的运算</p>\n</li>\n<li>\n<p>2、即时向量与标量之间的运算</p>\n</li>\n<li>\n<p>3、两个即时向量之间的运算。（当涉及到两个即时向量的运算时标签必须一致，PromQL 遵循向量匹配机制（Vector Matching），定义其运算逻辑）</p>\n</li>\n</ul>\n<h5 id=\"41-算术运算符介绍\"><a class=\"anchor\" href=\"#41-算术运算符介绍\">#</a> 4.1 算术运算符介绍</h5>\n<p>在 PromQL 中算术运算符，是⽤来对指标数据执⾏基本的数学运算。⽀持的运算符有：+（加）、-（减）、*（乘）、/（除）、%（取模）和 ^（幂运算）</p>\n<p>1、标量与标量之间进⾏数学运算，其最终得到的也是标量（使⽤较少）</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 标量与标量算数运算表达式</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">5</span> + <span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 结果</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>scalar <span class=\"token number\">10</span></pre></td></tr></table></figure><p>2、即时向量与标量进⾏运算，例如将 node_memory_MemTotal_bytes （节点内存总⼤⼩）的默认 bytes 单位转为 MB</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 即时向量与标量算数运算表达式</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>node_memory_MemTotal_bytes / <span class=\"token number\">1024</span> /1024</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 结果</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span>instance<span class=\"token operator\">=</span><span class=\"token string\">\"prom-node01.oldxu.net:9100\"</span>, <span class=\"token assign-left variable\">job</span><span class=\"token operator\">=</span><span class=\"token string\">\"node_exporter\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">1970.05859375</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span>instance<span class=\"token operator\">=</span><span class=\"token string\">\"prom-node02.oldxu.net:9100\"</span>, <span class=\"token assign-left variable\">job</span><span class=\"token operator\">=</span><span class=\"token string\">\"node_exporter\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">1970.05859375</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span>instance<span class=\"token operator\">=</span><span class=\"token string\">\"prom-node03.oldxu.net:9100\"</span>, <span class=\"token assign-left variable\">job</span><span class=\"token operator\">=</span><span class=\"token string\">\"node_exporter\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">1970.05859375</span></pre></td></tr></table></figure><p>3、即时向量与即时向量进⾏运算，它们需要遵循向量的匹配逻辑，也就是向量与向量的标签必须完全匹配⼀致才可以进⾏运算，如果它们的标签不⼀致，则不会执⾏这个运算。例如：我们想计算内存的可⽤百分⽐，计算公式为 “（内存可⽤空间 / 内存总空间 * 100）= 内存可⽤百分⽐” 这两个向量的标签是完全⼀致的，因此可以直接进⾏运算，否则⽆法正常进⾏运算，除⾮进⾏向量匹配特殊的处理。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 即时向量与即时向量算数运算表达式</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>node_memory_MemAvailable_bytes / node_memory_MemTotal_bytes * <span class=\"token number\">100</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 结果</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span>instance<span class=\"token operator\">=</span><span class=\"token string\">\"prom-node01.oldxu.net:9100\"</span>, <span class=\"token assign-left variable\">job</span><span class=\"token operator\">=</span><span class=\"token string\">\"node_exporter\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">52.0608325815</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">18234</span> <span class=\"token comment\"># 可⽤内存还有 52%</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span>instance<span class=\"token operator\">=</span><span class=\"token string\">\"prom-node02.oldxu.net:9100\"</span>, <span class=\"token assign-left variable\">job</span><span class=\"token operator\">=</span><span class=\"token string\">\"node_exporter\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">70.7339367682</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token number\">1954</span> <span class=\"token comment\"># 可⽤内存还有 70%</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span>instance<span class=\"token operator\">=</span><span class=\"token string\">\"prom-node03.oldxu.net:9100\"</span>, <span class=\"token assign-left variable\">job</span><span class=\"token operator\">=</span><span class=\"token string\">\"node_exporter\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">41.0098446469</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token number\">1128</span> <span class=\"token comment\"># 可⽤内存还有 41%</span></pre></td></tr></table></figure><h5 id=\"42-算术运算符实践\"><a class=\"anchor\" href=\"#42-算术运算符实践\">#</a> 4.2 算术运算符实践</h5>\n<p>实例 1：计算所有实例节点的 eth0 ⽹卡，接收的总流量和发送的总流量之和（以 GB 显示）</p>\n<ul>\n<li>node_network_receive_bytes_total ：节点⽹络接收的总⼤⼩（以字节为单位）</li>\n<li>node_network_transmit_bytes_total ：节点⽹络发送的总⼤⼩（以字节为单位）</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 表达式（ 计算公式：(eth0 接收的总流量 + eth0 发送的总流量) /1024 / 1024 /1024 ）</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span>node_network_receive_bytes_total<span class=\"token punctuation\">&#123;</span>device<span class=\"token operator\">=</span><span class=\"token string\">\"eth0\"</span><span class=\"token punctuation\">&#125;</span> + node_network_transmit_bytes_total<span class=\"token punctuation\">&#123;</span>device<span class=\"token operator\">=</span><span class=\"token string\">\"eth0\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> /1024 /1024 /1024</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 结果</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span>device<span class=\"token operator\">=</span><span class=\"token string\">\"eth0\"</span>, <span class=\"token assign-left variable\">instance</span><span class=\"token operator\">=</span><span class=\"token string\">\"prom-node01.oldxu.net:9100\"</span>, <span class=\"token assign-left variable\">job</span><span class=\"token operator\">=</span><span class=\"token string\">\"node_exporter\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">65.10437232814729</span> <span class=\"token comment\"># 65GB</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span>device<span class=\"token operator\">=</span><span class=\"token string\">\"eth0\"</span>, <span class=\"token assign-left variable\">instance</span><span class=\"token operator\">=</span><span class=\"token string\">\"prom-node02.oldxu.net:9100\"</span>, <span class=\"token assign-left variable\">job</span><span class=\"token operator\">=</span><span class=\"token string\">\"node_exporter\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">19.22064190544188</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span>device<span class=\"token operator\">=</span><span class=\"token string\">\"eth0\"</span>, <span class=\"token assign-left variable\">instance</span><span class=\"token operator\">=</span><span class=\"token string\">\"prom-node03.oldxu.net:9100\"</span>, <span class=\"token assign-left variable\">job</span><span class=\"token operator\">=</span><span class=\"token string\">\"node_exporter\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">35.516745982691646</span></pre></td></tr></table></figure><p>实例 2：计算所有实例节点的 / 分区 已经使⽤了，多少空间（以 GB 显示）</p>\n<ul>\n<li>node_filesystem_size_bytes ：⽂件系统总⼤⼩（以字节为单位）</li>\n<li>node_filesystem_avail_bytes ：⽂件系统可⽤空间（以字节为单位）</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 表达式（ 计算公式：(总空间 - 剩余空间) /1024 / 1024 /1024 ）</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span>node_filesystem_size_bytes<span class=\"token punctuation\">&#123;</span>mountpoint<span class=\"token operator\">=</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">&#125;</span> - node_filesystem_avail_bytes<span class=\"token punctuation\">&#123;</span>mountpoint<span class=\"token operator\">=</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> /1024 /1024 /1024</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 结果</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span>device<span class=\"token operator\">=</span><span class=\"token string\">\"/dev/mapper/rl-root\"</span>, <span class=\"token assign-left variable\">fstype</span><span class=\"token operator\">=</span><span class=\"token string\">\"xfs\"</span>, <span class=\"token assign-left variable\">instance</span><span class=\"token operator\">=</span><span class=\"token string\">\"prom-node01.oldxu.net:9100\"</span>, <span class=\"token assign-left variable\">job</span><span class=\"token operator\">=</span><span class=\"token string\">\"node_exporter\"</span>, <span class=\"token assign-left variable\">mountpoint</span><span class=\"token operator\">=</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">7.806545257568359</span>  <span class=\"token comment\"># 已使⽤ 7.8G</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span>device<span class=\"token operator\">=</span><span class=\"token string\">\"/dev/mapper/rl-root\"</span>, <span class=\"token assign-left variable\">fstype</span><span class=\"token operator\">=</span><span class=\"token string\">\"xfs\"</span>, <span class=\"token assign-left variable\">instance</span><span class=\"token operator\">=</span><span class=\"token string\">\"prom-node02.oldxu.net:9100\"</span>, <span class=\"token assign-left variable\">job</span><span class=\"token operator\">=</span><span class=\"token string\">\"node_exporter\"</span>, <span class=\"token assign-left variable\">mountpoint</span><span class=\"token operator\">=</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">3.9103240966796875</span> <span class=\"token comment\"># 已使⽤ 3.9G</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span>device<span class=\"token operator\">=</span><span class=\"token string\">\"/dev/mapper/rl-root\"</span>, <span class=\"token assign-left variable\">fstype</span><span class=\"token operator\">=</span><span class=\"token string\">\"xfs\"</span>, <span class=\"token assign-left variable\">instance</span><span class=\"token operator\">=</span><span class=\"token string\">\"prom-node03.oldxu.net:9100\"</span>, <span class=\"token assign-left variable\">job</span><span class=\"token operator\">=</span><span class=\"token string\">\"node_exporter\"</span>, <span class=\"token assign-left variable\">mountpoint</span><span class=\"token operator\">=</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">5.496803283691406</span>  <span class=\"token comment\"># 已使⽤ 5.4G</span></pre></td></tr></table></figure><p>实例 3：计算所有实例节点的 / 分区 &quot;已⽤空间百分⽐&quot;</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 表达式（ 计算公式：(总空间 - 可⽤的空间) / 总空间 * 100 ）</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span>node_filesystem_size_bytes<span class=\"token punctuation\">&#123;</span>mountpoint<span class=\"token operator\">=</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">&#125;</span> - node_filesystem_avail_bytes<span class=\"token punctuation\">&#123;</span>mountpoint<span class=\"token operator\">=</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> / node_filesystem_size_bytes<span class=\"token punctuation\">&#123;</span>mountpoint<span class=\"token operator\">=</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">&#125;</span> * <span class=\"token number\">100</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 结果</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span>device<span class=\"token operator\">=</span><span class=\"token string\">\"/dev/mapper/rl-root\"</span>, <span class=\"token assign-left variable\">fstype</span><span class=\"token operator\">=</span><span class=\"token string\">\"xfs\"</span>, <span class=\"token assign-left variable\">instance</span><span class=\"token operator\">=</span><span class=\"token string\">\"prom-node01.oldxu.net:9100\"</span>, <span class=\"token assign-left variable\">job</span><span class=\"token operator\">=</span><span class=\"token string\">\"node_exporter\"</span>, <span class=\"token assign-left variable\">mountpoint</span><span class=\"token operator\">=</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">3.965885742336228</span>  <span class=\"token comment\"># 已⽤空间占⽐百分之 3.96G</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span>device<span class=\"token operator\">=</span><span class=\"token string\">\"/dev/mapper/rl-root\"</span>, <span class=\"token assign-left variable\">fstype</span><span class=\"token operator\">=</span><span class=\"token string\">\"xfs\"</span>, <span class=\"token assign-left variable\">instance</span><span class=\"token operator\">=</span><span class=\"token string\">\"prom-node02.oldxu.net:9100\"</span>, <span class=\"token assign-left variable\">job</span><span class=\"token operator\">=</span><span class=\"token string\">\"node_exporter\"</span>, <span class=\"token assign-left variable\">mountpoint</span><span class=\"token operator\">=</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">1.9864746546908878</span> <span class=\"token comment\"># 已⽤空间占⽐百分之 1.98G</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span>device<span class=\"token operator\">=</span><span class=\"token string\">\"/dev/mapper/rl-root\"</span>, <span class=\"token assign-left variable\">fstype</span><span class=\"token operator\">=</span><span class=\"token string\">\"xfs\"</span>, <span class=\"token assign-left variable\">instance</span><span class=\"token operator\">=</span><span class=\"token string\">\"prom-node03.oldxu.net:9100\"</span>, <span class=\"token assign-left variable\">job</span><span class=\"token operator\">=</span><span class=\"token string\">\"node_exporter\"</span>, <span class=\"token assign-left variable\">mountpoint</span><span class=\"token operator\">=</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">2.792465443218097</span>  <span class=\"token comment\"># 已⽤空间占⽐百分之 2.79G</span></pre></td></tr></table></figure><p>实例 4：计算所有节点内存的 “已⽤百分⽐”</p>\n<ul>\n<li>node_memory_MemTotal_bytes ：总内存⼤⼩（单位字节）</li>\n<li>node_memory_MemAvailable_bytes ：内存可⽤⼤⼩（单位字节）</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 表达式（ 计算公式：(总内存 - 可⽤内存) / 总内存 * 100 ）</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span>node_memory_MemTotal_bytes - node_memory_MemAvailable_bytes<span class=\"token punctuation\">)</span> / node_memory_MemTotal_bytes * <span class=\"token number\">100</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 结果</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span>instance<span class=\"token operator\">=</span><span class=\"token string\">\"prom-node01.oldxu.net:9100\"</span>, <span class=\"token assign-left variable\">job</span><span class=\"token operator\">=</span><span class=\"token string\">\"node_exporter\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">48.12356865972023</span>  <span class=\"token comment\"># 已⽤ 48% 内存</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span>instance<span class=\"token operator\">=</span><span class=\"token string\">\"prom-node02.oldxu.net:9100\"</span>, <span class=\"token assign-left variable\">job</span><span class=\"token operator\">=</span><span class=\"token string\">\"node_exporter\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">29.767713920310907</span> <span class=\"token comment\"># 已⽤ 29% 内存</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span>instance<span class=\"token operator\">=</span><span class=\"token string\">\"prom-node03.oldxu.net:9100\"</span>, <span class=\"token assign-left variable\">job</span><span class=\"token operator\">=</span><span class=\"token string\">\"node_exporter\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">58.8624624505537</span>   <span class=\"token comment\"># 已⽤ 58% 内存</span></pre></td></tr></table></figure><h5 id=\"43-比较运算符介绍\"><a class=\"anchor\" href=\"#43-比较运算符介绍\">#</a> 4.3 ⽐较运算符介绍</h5>\n<p>在 PromQL 中⽐较运算符，是⽤来对指标的数据进⾏条件判断，⼀般在告警规则中定义何时应该触发告警。PromQL ⽀持的⽐较运算符有如下⼏个：</p>\n<ul>\n<li>== ：等于，当两边的数值相等时为真。</li>\n<li>!= ：不等于，当两边的数值不相等时为真。</li>\n<li>&gt; ：⼤于，当左边的数值⼤于右边时为真。</li>\n<li>&lt; ：⼩于，当左边的数值⼩于右边时为真。</li>\n<li>&gt;= ：⼤于等于，当左边的数值⼤于或等于右边时为真。</li>\n<li>&lt;= ：⼩于等于，当左边的数值⼩于或等于右边时为真。</li>\n</ul>\n<p><em>在 PromQL 中，使⽤⽐较运算符时，默认情况下，如果⽐较结果为假（即条件不满⾜），则相关的时间序列不会出现在结果中。但是，如果在测试时，想要明确地看到哪些时间序列满⾜条件（为真）和哪些不满⾜（为假），可以使⽤ bool 修饰符，这个修饰符会将所有的时间序列都显示在结果中，满⾜条件的序列会有⼀个值为 1（true），不满⾜的序列会有⼀个值为 0（false）。</em></p>\n<p>1、标量与标量之间进⾏⽐较运算</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 标量与标量⽐较表达式</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">5</span> <span class=\"token operator\">==</span> bool <span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 结果</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>scalar <span class=\"token number\">1</span> <span class=\"token comment\"># 说明条件成⽴</span></pre></td></tr></table></figure><p>2、即时向量与标量进⾏⽐较运算，例如判断服务器 1 分钟的负载，是否有⼤于 0 以上的节点</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 即时向量与标量进⾏⽐较表达式</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>node_load1 <span class=\"token operator\">></span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 结果</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>node_load1<span class=\"token punctuation\">&#123;</span>instance<span class=\"token operator\">=</span><span class=\"token string\">\"prom-node01.oldxu.net:9100\"</span>, <span class=\"token assign-left variable\">job</span><span class=\"token operator\">=</span><span class=\"token string\">\"node_exporter\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">0.01</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>node_load1<span class=\"token punctuation\">&#123;</span>instance<span class=\"token operator\">=</span><span class=\"token string\">\"prom-node02.oldxu.net:9100\"</span>, <span class=\"token assign-left variable\">job</span><span class=\"token operator\">=</span><span class=\"token string\">\"node_exporter\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">0.01</span></pre></td></tr></table></figure><p>3、即时向量与即时向量进⾏⽐较运算，它们需要遵循向量的匹配逻辑，也就是向量与向量的标签必须完全匹配⼀致才可以进⾏运算，如果它们的标签不⼀致，则不会执⾏这个运算。例如：我们可以⽐较 “可⽤内存” 是否⼤于 “空闲内存”，如果满⾜该条件，那么会显示左侧的指标名称和指标当前的值。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 即时向量与即时向量⽐较表达式</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>node_memory_MemAvailable_bytes <span class=\"token operator\">></span> node_memory_MemFree_bytes</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 结果</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>node_memory_MemAvailable_bytes<span class=\"token punctuation\">&#123;</span>instance<span class=\"token operator\">=</span><span class=\"token string\">\"prom-node01.oldxu.net:9100\"</span>, <span class=\"token assign-left variable\">job</span><span class=\"token operator\">=</span><span class=\"token string\">\"node_exporter\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">1092820992</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>node_memory_MemAvailable_bytes<span class=\"token punctuation\">&#123;</span>instance<span class=\"token operator\">=</span><span class=\"token string\">\"prom-node02.oldxu.net:9100\"</span>, <span class=\"token assign-left variable\">job</span><span class=\"token operator\">=</span><span class=\"token string\">\"node_exporter\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">1456451584</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>node_memory_MemAvailable_bytes<span class=\"token punctuation\">&#123;</span>instance<span class=\"token operator\">=</span><span class=\"token string\">\"prom-node03.oldxu.net:9100\"</span>, <span class=\"token assign-left variable\">job</span><span class=\"token operator\">=</span><span class=\"token string\">\"node_exporter\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">867491840</span></pre></td></tr></table></figure><h5 id=\"44-比较运算符实践\"><a class=\"anchor\" href=\"#44-比较运算符实践\">#</a> 4.4 ⽐较运算符实践</h5>\n<p>实例 1：查询 node_exporter 这个 job 中，⽬前不存活实例有哪些（1 为存活、0 为不存活）。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 表达式</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>up<span class=\"token punctuation\">&#123;</span>job<span class=\"token operator\">=</span><span class=\"token string\">\"node_exporter\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">!=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 结果</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>up<span class=\"token punctuation\">&#123;</span>instance<span class=\"token operator\">=</span><span class=\"token string\">\"prom-node03.oldxu.net:9100\"</span>, <span class=\"token assign-left variable\">job</span><span class=\"token operator\">=</span><span class=\"token string\">\"node_exporter\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">0</span> <span class=\"token comment\"># 0 表</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>示该节点⽬前不存活</pre></td></tr></table></figure><p>实例 2：查询所有实例 “已使⽤内存” 超过 30%</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 表达式：（计算公式：（总内存 - 可⽤内存）/ 总内存 * 100 ⼤于 30 ）</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span>node_memory_MemTotal_bytes - node_memory_MemAvailable_bytes<span class=\"token punctuation\">)</span> / node_memory_MemTotal_bytes * <span class=\"token number\">100</span> <span class=\"token operator\">></span> <span class=\"token number\">30</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 结果</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span>instance<span class=\"token operator\">=</span><span class=\"token string\">\"prom-node01.oldxu.net:9100\"</span>, <span class=\"token assign-left variable\">job</span><span class=\"token operator\">=</span><span class=\"token string\">\"node_exporter\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">48.04405801699267</span> <span class=\"token comment\"># 该节点已使⽤内存达到 48%</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span>instance<span class=\"token operator\">=</span><span class=\"token string\">\"prom-node03.oldxu.net:9100\"</span>, <span class=\"token assign-left variable\">job</span><span class=\"token operator\">=</span><span class=\"token string\">\"node_exporter\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">58.090753170015965</span> <span class=\"token comment\"># 该节点已使⽤内存达到 58%</span></pre></td></tr></table></figure><p>实例 3：查询所有的实例 “磁盘可⽤空间” 不⾜ 30% 的实例</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 表达式：（计算公式：（可⽤空间 / 总磁盘空间） * 100 ⼩于 30 ）</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>node_filesystem_avail_bytes / node_filesystem_size_bytes * <span class=\"token number\">100</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">30</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 结果</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span>device<span class=\"token operator\">=</span><span class=\"token string\">\"/dev/mapper/rl-root\"</span>, <span class=\"token assign-left variable\">fstype</span><span class=\"token operator\">=</span><span class=\"token string\">\"xfs\"</span>, <span class=\"token assign-left variable\">instance</span><span class=\"token operator\">=</span><span class=\"token string\">\"prom-node01.oldxu.net:9100\"</span>, <span class=\"token assign-left variable\">job</span><span class=\"token operator\">=</span><span class=\"token string\">\"node_exporter\"</span>, <span class=\"token assign-left variable\">mountpoint</span><span class=\"token operator\">=</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">26.02939746145283</span> <span class=\"token comment\"># 剩余空间仅剩 26%，意味着磁盘空间快⽤完了</span></pre></td></tr></table></figure><p>实例 4：查询所有实例中 eth0 设备的⽹络带宽，每秒发送速率超过 200Mb/s 兆 的实例</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 1、在两个测试的节点上安装：yum install iperf -y</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 2、服务端运⾏并指定端⼝：iperf -s -p 9999</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 3、客户端模拟带宽发送命令，-b 指定发送⼤⼩，-t 指定发送持续时⻓：iperf -c &lt;ip> -p 9999 -b 300M -t 60</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 表达式（计算公式：rate (总的传输 [1m]) * 8 /1024/1024) > 200） ⽹络速度或带宽通常以位每秒（如 Mbps, Gbps）为单位。因此需要将字节乘以 8，能够将字节转换为位，这样可以更准确地描述传输速率</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>rate<span class=\"token punctuation\">(</span>node_network_transmit_bytes_total<span class=\"token punctuation\">&#123;</span>device<span class=\"token operator\">=</span><span class=\"token string\">\"eth0\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">[</span>1m<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> * <span class=\"token number\">8</span> /1024 /1024 <span class=\"token operator\">></span> <span class=\"token number\">200</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 结果</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span>device<span class=\"token operator\">=</span><span class=\"token string\">\"eth0\"</span>, <span class=\"token assign-left variable\">instance</span><span class=\"token operator\">=</span><span class=\"token string\">\"prom-node03.oldxu.net:9100\"</span>, <span class=\"token assign-left variable\">job</span><span class=\"token operator\">=</span><span class=\"token string\">\"node_exporter\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">286.0319371541341</span> <span class=\"token comment\"># 该节点每秒达到了 286Mb/s 的带宽（如果不乘以 8 则单位是 MB/s）</span></pre></td></tr></table></figure><p>实例 5：查询所有 https 的域名，检查域名证书的过期时间，将还剩不到 90 天的域名列出来（需要借助后⾯的 blackbox ⿊盒监控，才能获取到对应的指标）</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 表达式，计算公式（ (过期时间 - 当前时间) / 天 (24*60*60) ）</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span>probe_ssl_earliest_cert_expiry - time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> / <span class=\"token number\">86400</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">90</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 结果</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span>instance<span class=\"token operator\">=</span><span class=\"token string\">\"http://hmallleasing.com\"</span>, <span class=\"token assign-left variable\">job</span><span class=\"token operator\">=</span><span class=\"token string\">\"blackbox_http\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">43.74673421296256</span>       <span class=\"token comment\"># 还剩 43 天过期</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span>instance<span class=\"token operator\">=</span><span class=\"token string\">\"https://ixuyong.cn\"</span>, <span class=\"token assign-left variable\">job</span><span class=\"token operator\">=</span><span class=\"token string\">\"blackbox_http\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">87.74673421296256</span>            <span class=\"token comment\"># 还剩 87 天过期</span></pre></td></tr></table></figure><h5 id=\"45-集合运算符介绍\"><a class=\"anchor\" href=\"#45-集合运算符介绍\">#</a> 4.5 集合运算符介绍</h5>\n<p>在 Prometheus 的查询语⾔中，集合运算符主要⽤到的运算符包括 and（并且）、or（或者）和 unless（排除）</p>\n<p>例如：我们有两个关键指标：backup_duration_seconds ⽤于记录每次备份操作的持续时间，⽽ backup_success 则指示备份操作是否成功（1 表示成功，0 表示失败）</p>\n<p><strong>场景 1：备份成功但时间超过 9s</strong></p>\n<p>当备份操作成功完成（backup_success == 1），并且执⾏时间超过 9 秒（backup_duration_seconds &gt; 9）时，我们需要发出告警通知 “备份成功但备份时间过⻓”。这就需要使⽤ and 运算符来确保只有当这两个条件都满⾜时，才触发告警。对应的表达式为：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>backup_duration_seconds <span class=\"token operator\">></span> <span class=\"token number\">9</span> and backup_success <span class=\"token operator\">==</span> <span class=\"token number\">1</span></pre></td></tr></table></figure><p><strong>场景 2：备份失败或时间超过 9s</strong></p>\n<p>如果备份时⻓超过了 9 秒（backup_duration_seconds &gt; 9），或者备份操作失败（backup_success == 0），则同样需要发出告警通知 “备份失败或时间过⻓”。在这种情况下，是⽤ or 运算符可以帮助我们在任⼀条件满⾜时触发告警。对应的表达式为：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>backup_duration_seconds <span class=\"token operator\">></span> <span class=\"token number\">9</span> or backup_success <span class=\"token operator\">==</span> <span class=\"token number\">0</span></pre></td></tr></table></figure><p><strong>场景 3：查询成功的备份，但排除耗时超过 9s</strong></p>\n<p>查询所有成功的备份任务，同时排除那些执⾏时间超过 9 秒的任务，这样我们就可以只关注于那些成功备份的任务，并且备份效率较⾼的。我们可以利⽤ unless 运算符来实现，对应的表达式为：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>backup_success <span class=\"token operator\">==</span> <span class=\"token number\">1</span> unless backup_duration_seconds <span class=\"token operator\">></span> <span class=\"token number\">9</span></pre></td></tr></table></figure><p>1、and 运算符示例，查询当前实例 “1 分钟负载⼤于 2，并且 5 分钟负载⼩于</p>\n<p>2、如果满⾜条件说明当前发了了突增的负载压⼒。注意：and 运算需要遵循向量的匹配逻辑，也就是向量与向量的标签必须完全匹配⼀致才可以进⾏匹配，如果它们的标签不⼀致，则不会执⾏匹配逻辑，除⾮使⽤ ignore 忽略不⼀致的标签来进⾏匹配。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 模拟负载⾼命令 stress --cpu 8 --timeout 60</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 表达式</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>node_load1 <span class=\"token operator\">></span> <span class=\"token number\">2</span> and</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>node_load5 <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># 结果</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>node_load1<span class=\"token punctuation\">&#123;</span>instance<span class=\"token operator\">=</span><span class=\"token string\">\"prom-node03.oldxu.net:9100\"</span>, <span class=\"token assign-left variable\">job</span><span class=\"token operator\">=</span><span class=\"token string\">\"node_exporter\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">4.19</span> <span class=\"token comment\"># 说明当前 node03 节点 1 分钟负载⽐较⾼，⽽ 5 分钟负载并不⾼</span></pre></td></tr></table></figure><p>2、or 示例，查询 <a href=\"http://prom-node01.oldxu.net:9100\">prom-node01.oldxu.net:9100</a> 上 CPU 编号为 0 的 idle 时间或 user 时间</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 表达式</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>node_cpu_seconds_total<span class=\"token punctuation\">&#123;</span>instance<span class=\"token operator\">=</span><span class=\"token string\">\"prom-node01.oldxu.net:9100\"</span>,mode<span class=\"token operator\">=</span><span class=\"token string\">\"idle\"</span>,cpu<span class=\"token operator\">=</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">&#125;</span> or</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>node_cpu_seconds_total<span class=\"token punctuation\">&#123;</span>instance<span class=\"token operator\">=</span><span class=\"token string\">\"prom-node01.oldxu.net:9100\"</span>,mode<span class=\"token operator\">=</span><span class=\"token string\">\"user\"</span>,cpu<span class=\"token operator\">=</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 结果</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>node_cpu_seconds_total<span class=\"token punctuation\">&#123;</span>cpu<span class=\"token operator\">=</span><span class=\"token string\">\"0\"</span>, <span class=\"token assign-left variable\">instance</span><span class=\"token operator\">=</span><span class=\"token string\">\"prom-node01.oldxu.net:9100\"</span>, <span class=\"token assign-left variable\">job</span><span class=\"token operator\">=</span><span class=\"token string\">\"node_exporter\"</span>, <span class=\"token assign-left variable\">mode</span><span class=\"token operator\">=</span><span class=\"token string\">\"idle\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">6429449.35</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>node_cpu_seconds_total<span class=\"token punctuation\">&#123;</span>cpu<span class=\"token operator\">=</span><span class=\"token string\">\"0\"</span>, <span class=\"token assign-left variable\">instance</span><span class=\"token operator\">=</span><span class=\"token string\">\"prom-node01.oldxu.net:9100\"</span>, <span class=\"token assign-left variable\">job</span><span class=\"token operator\">=</span><span class=\"token string\">\"node_exporter\"</span>, <span class=\"token assign-left variable\">mode</span><span class=\"token operator\">=</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">26207.44</span></pre></td></tr></table></figure><p>3、unless 示例，查询 node_cpu_seconds_total 指标上 CPU 编号为 0 的，但要排除 node02 和 node03 节点，同时还要排除模式为 idle|user|system|steal|nice</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 表达式</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>node_cpu_seconds_total<span class=\"token punctuation\">&#123;</span>cpu<span class=\"token operator\">=</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">&#125;</span> unless</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>node_cpu_seconds_total<span class=\"token punctuation\">&#123;</span>instance<span class=\"token operator\">=</span><span class=\"token string\">\"prom-node02.oldxu.net:9100\"</span><span class=\"token punctuation\">&#125;</span> unless</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>node_cpu_seconds_total<span class=\"token punctuation\">&#123;</span>instance<span class=\"token operator\">=</span><span class=\"token string\">\"prom-node03.oldxu.net:9100\"</span><span class=\"token punctuation\">&#125;</span> unless</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>node_cpu_seconds_total<span class=\"token punctuation\">&#123;</span>mode<span class=\"token operator\">=~</span><span class=\"token string\">\"idle|user|system|steal|nice\"</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 结果</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>node_cpu_seconds_total<span class=\"token punctuation\">&#123;</span>cpu<span class=\"token operator\">=</span><span class=\"token string\">\"0\"</span>, <span class=\"token assign-left variable\">instance</span><span class=\"token operator\">=</span><span class=\"token string\">\"prom-node01.oldxu.net:9100\"</span>, <span class=\"token assign-left variable\">job</span><span class=\"token operator\">=</span><span class=\"token string\">\"node_exporter\"</span>, <span class=\"token assign-left variable\">mode</span><span class=\"token operator\">=</span><span class=\"token string\">\"iowait\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">3243.97</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>node_cpu_seconds_total<span class=\"token punctuation\">&#123;</span>cpu<span class=\"token operator\">=</span><span class=\"token string\">\"0\"</span>, <span class=\"token assign-left variable\">instance</span><span class=\"token operator\">=</span><span class=\"token string\">\"prom-node01.oldxu.net:9100\"</span>, <span class=\"token assign-left variable\">job</span><span class=\"token operator\">=</span><span class=\"token string\">\"node_exporter\"</span>, <span class=\"token assign-left variable\">mode</span><span class=\"token operator\">=</span><span class=\"token string\">\"irq\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">7236.66</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>node_cpu_seconds_total<span class=\"token punctuation\">&#123;</span>cpu<span class=\"token operator\">=</span><span class=\"token string\">\"0\"</span>, <span class=\"token assign-left variable\">instance</span><span class=\"token operator\">=</span><span class=\"token string\">\"prom-node01.oldxu.net:9100\"</span>, <span class=\"token assign-left variable\">job</span><span class=\"token operator\">=</span><span class=\"token string\">\"node_exporter\"</span>, <span class=\"token assign-left variable\">mode</span><span class=\"token operator\">=</span><span class=\"token string\">\"softirq\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">4117.61</span></pre></td></tr></table></figure><h5 id=\"46-集合运算符实践\"><a class=\"anchor\" href=\"#46-集合运算符实践\">#</a> 4.6 集合运算符实践</h5>\n<p>实例 1：查询实例的⽹络接收流量 “并且” ⽹络发送流量，每秒传输超过 200Mb/s</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#模拟接收和发送流量⽐较⾼：\"需要在同⼀节点\" 模拟服务端和客户端，执⾏如下命令</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 1、模拟服务端：iperf -s -p 9999</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 2、模拟客户端：iperf -c prom-node01.oldxu.net -p 9999 -b 300M -t 60</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 表达式</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>rate<span class=\"token punctuation\">(</span>node_network_receive_bytes_total<span class=\"token punctuation\">[</span>1m<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> *8 /1024 /1024 <span class=\"token operator\">></span><span class=\"token number\">200</span> and</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>rate<span class=\"token punctuation\">(</span>node_network_transmit_bytes_total<span class=\"token punctuation\">[</span>1m<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> *8 /1024 /1024 <span class=\"token operator\">></span><span class=\"token number\">200</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># 结果</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span>device<span class=\"token operator\">=</span><span class=\"token string\">\"lo\"</span>, <span class=\"token assign-left variable\">instance</span><span class=\"token operator\">=</span><span class=\"token string\">\"prom-node01.oldxu.net:9100\"</span>, <span class=\"token assign-left variable\">job</span><span class=\"token operator\">=</span><span class=\"token string\">\"node_exporter\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">300.4421537611219</span> <span class=\"token comment\"># 这个实例发送和接收同时达到了 300Mb/s</span></pre></td></tr></table></figure><p>实例 2：查询当前磁盘，可⽤空间不⾜ 20GB “或者” 当前磁盘可⽤空间不⾜ 30%</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 表达式，计算公式： 可⽤空间 / 1024/1024/1024 &lt;= 20 OR （可⽤空间 / 总磁盘空间） *100 &lt; 30 </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>node_filesystem_avail_bytes /1024 /1024 /1024 <span class=\"token operator\">&lt;=</span><span class=\"token number\">20</span> or </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">(</span> node_filesystem_avail_bytes / node_filesystem_size_bytes<span class=\"token punctuation\">)</span> * <span class=\"token number\">100</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">30</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 结果</span></pre></td></tr></table></figure><p>实例 3：通过 probe_http_status_code 指标获取当前监控的⽹站返回的状态码，并从中筛选出⼩于 200 的状态码 “或者” ⼤于 400 的状态码</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 表达式</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>probe_http_status_code <span class=\"token operator\">&lt;=</span> <span class=\"token number\">199</span> or</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>probe_http_status_code <span class=\"token operator\">>=</span> <span class=\"token number\">400</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 结果</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>probe_http_status_code<span class=\"token punctuation\">&#123;</span>instance<span class=\"token operator\">=</span><span class=\"token string\">\"https://httpstat.us/102\"</span>, <span class=\"token assign-left variable\">job</span><span class=\"token operator\">=</span><span class=\"token string\">\"blackbox_http\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>probe_http_status_code<span class=\"token punctuation\">&#123;</span>instance<span class=\"token operator\">=</span><span class=\"token string\">\"http://httpbin.org/status/400\"</span>, <span class=\"token assign-left variable\">job</span><span class=\"token operator\">=</span><span class=\"token string\">\"blackbox_http\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">400</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>probe_http_status_code<span class=\"token punctuation\">&#123;</span>instance<span class=\"token operator\">=</span><span class=\"token string\">\"https://httpstat.us/421\"</span>, <span class=\"token assign-left variable\">job</span><span class=\"token operator\">=</span><span class=\"token string\">\"blackbox_http\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">421</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>probe_http_status_code<span class=\"token punctuation\">&#123;</span>instance<span class=\"token operator\">=</span><span class=\"token string\">\"https://httpstat.us/500\"</span>, <span class=\"token assign-left variable\">job</span><span class=\"token operator\">=</span><span class=\"token string\">\"blackbox_http\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">500</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>probe_http_status_code<span class=\"token punctuation\">&#123;</span>instance<span class=\"token operator\">=</span><span class=\"token string\">\"https://httpstat.us/502\"</span>, <span class=\"token assign-left variable\">job</span><span class=\"token operator\">=</span><span class=\"token string\">\"blackbox_http\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">502</span></pre></td></tr></table></figure><h4 id=\"五-promql聚合操作\"><a class=\"anchor\" href=\"#五-promql聚合操作\">#</a> 五、PromQL 聚合操作</h4>\n<h5 id=\"51-promql聚合介绍\"><a class=\"anchor\" href=\"#51-promql聚合介绍\">#</a> 5.1 PromQL 聚合介绍</h5>\n<p>聚合运算，是数据处理中的⽐较常⻅操作，例如统计公司所有⼈员的年龄，求公司整体的平均年龄，最⼤年龄，或最⼩年龄等。因此聚合操作它是从⼀组数据值中，计算出⼀个单⼀的值。</p>\n<p>Prometheus 的聚合操作与此前刚才所描述的常规聚合在本质上是相似的，只不过它⽀持多种聚合运算函数，包括:</p>\n<ul>\n<li>\n<p>max ：计算⼀组时间序列中的最⼤值。</p>\n</li>\n<li>\n<p>min ：计算⼀组时间序列中的最⼩值。</p>\n</li>\n<li>\n<p>avg ：计算时间序列的平均值。</p>\n</li>\n<li>\n<p>sum ：计算时间序列值的总和。</p>\n</li>\n<li>\n<p>count ：它不考虑时间序列的具体值，仅⽤来统计时间序列的数量。例如统计不同 OS 的数量，或者统计有多少个正在运⾏的 Pod 等等。</p>\n</li>\n<li>\n<p>count_vaules ：对每个样本的值进⾏数量统计，例如：http 请求的状</p>\n</li>\n<li>\n<p>态码，200 出现了多少次，404 出现了多少次，500 出现了多少次；</p>\n</li>\n<li>\n<p>topk ：</p>\n</li>\n<li>\n<p>bottomk ：</p>\n</li>\n</ul>\n<p>除了这些基本聚合功能外，Prometheus 也提供了分组聚合的功能，它是基于时间序列的标签进⾏分组聚合：</p>\n<ul>\n<li>by ：通过 by 关键字，明确指定保留哪些标签进⾏聚合，其他的标签将被忽略。</li>\n<li>without ：与 by 相反， without 关键字⽤于指定要排除的标签，⽽剩下的标签则⽤于聚合和分组。</li>\n</ul>\n<h5 id=\"52-promql聚合示例\"><a class=\"anchor\" href=\"#52-promql聚合示例\">#</a> 5.2 PromQL 聚合示例</h5>\n<p>为了加深 PromQL 聚合操作的理解，我们使⽤前⾯提到的城市天⽓温度数据，并通过聚合操作来展示如何获取整体的最⾼温度、最低温度以及按城市维度进⾏分组求取平均温度等。</p>\n<p>1、下载并运⾏程序，提供天⽓温度相关的指标数据</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@prom-node01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># wget http://file.oldxu.net/prometheus/exporter/weather_exporter_oldxu</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span>root@prom-node01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># mv weather_exporter_oldxu /usr/local/bin/</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">[</span>root@prom-node01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># chmod +x /usr/local/bin/weather_exporter_oldxu</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 启动脚本</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">[</span>root@prom-node01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># vim /usr/lib/systemd/system/weather_exporter.service</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">[</span>Unit<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token assign-left variable\">Description</span><span class=\"token operator\">=</span>weather_exporter</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token assign-left variable\">Documentation</span><span class=\"token operator\">=</span>https://prometheus.io/</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token assign-left variable\">After</span><span class=\"token operator\">=</span>network.target</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">[</span>Service<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token assign-left variable\">ExecStart</span><span class=\"token operator\">=</span>/usr/local/bin/weather_exporter_oldxu <span class=\"token parameter variable\">--port</span> <span class=\"token number\">7001</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token assign-left variable\">ExecReload</span><span class=\"token operator\">=</span>/bin/kill <span class=\"token parameter variable\">-HUP</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token assign-left variable\">TimeoutStopSec</span><span class=\"token operator\">=</span>20s</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token assign-left variable\">Restart</span><span class=\"token operator\">=</span>always</pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">[</span>Install<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token assign-left variable\">WantedBy</span><span class=\"token operator\">=</span>multi-user.target</pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">[</span>root@prom-node01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># systemctl daemon-reload</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">[</span>root@prom-node01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># systemctl start weather_exporter.service</span></pre></td></tr></table></figure><p>2、编辑 Prometheus 配置⽂件，抓取对应的指标数据</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@prom-node01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># vim /etc/prometheus/prometheus.yml</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  - job_name: <span class=\"token string\">\"weather-exporter\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    scrape_interval: 1m <span class=\"token comment\"># 抓取指标频率</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    static_configs:</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    - targets: <span class=\"token punctuation\">[</span><span class=\"token string\">\"prom-node01.oldxu.net:7001\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 重新加载 prometheus</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">[</span>root@prom-node01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># curl -X POST http://localhost:9090/-/reload</span></pre></td></tr></table></figure><p>示例 1：获取所有城市的整体温度总和</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 表达式</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>sum<span class=\"token punctuation\">(</span>weather_oldxu<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 结果</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">210</span></pre></td></tr></table></figure><p>示例 2：分别展示不同城市的最⼤温度</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 表达式</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>max<span class=\"token punctuation\">(</span>weather_oldxu<span class=\"token punctuation\">)</span> by <span class=\"token punctuation\">(</span>city<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 结果</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span>city<span class=\"token operator\">=</span><span class=\"token string\">\"上海\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">30</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span>city<span class=\"token operator\">=</span><span class=\"token string\">\"北京\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">25</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span>city<span class=\"token operator\">=</span><span class=\"token string\">\"⼴州\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">29</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span>city<span class=\"token operator\">=</span><span class=\"token string\">\"武汉\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">2</span></pre></td></tr></table></figure><p>示例 3：分别展示不同城市的最⼩温度</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 表达式</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>min<span class=\"token punctuation\">(</span>weather_oldxu<span class=\"token punctuation\">)</span> by <span class=\"token punctuation\">(</span>city<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 结果</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span>city<span class=\"token operator\">=</span><span class=\"token string\">\"上海\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">12</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span>city<span class=\"token operator\">=</span><span class=\"token string\">\"北京\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span>city<span class=\"token operator\">=</span><span class=\"token string\">\"⼴州\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">11</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span>city<span class=\"token operator\">=</span><span class=\"token string\">\"武汉\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token parameter variable\">-3</span></pre></td></tr></table></figure><p>示例 4：仅展示 “武汉” 城市的平均温度</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 表达式</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>avg<span class=\"token punctuation\">(</span>weather_oldxu<span class=\"token punctuation\">&#123;</span>city<span class=\"token operator\">=</span><span class=\"token string\">\"武汉\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 结果</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">22.666666666666664</span></pre></td></tr></table></figure><p>示例 5：是⽤ topk 获取前三个的⾼温城市。topk 的结果按温度值从⾼到低排序</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 表达式</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>topk<span class=\"token punctuation\">(</span><span class=\"token number\">3</span>,weather_oldxu<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 结果</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>weather_oldxu<span class=\"token punctuation\">&#123;</span>city<span class=\"token operator\">=</span><span class=\"token string\">\"上海\"</span>, <span class=\"token assign-left variable\">dist</span><span class=\"token operator\">=</span><span class=\"token string\">\"浦东新区\"</span>, <span class=\"token assign-left variable\">instance</span><span class=\"token operator\">=</span><span class=\"token string\">\"prom-node01.oldxu.net:7001\"</span>, <span class=\"token assign-left variable\">job</span><span class=\"token operator\">=</span><span class=\"token string\">\"weather-exporter\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">27</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>weather_oldxu<span class=\"token punctuation\">&#123;</span>city<span class=\"token operator\">=</span><span class=\"token string\">\"⼴州\"</span>, <span class=\"token assign-left variable\">dist</span><span class=\"token operator\">=</span><span class=\"token string\">\"越秀区\"</span>, <span class=\"token assign-left variable\">instance</span><span class=\"token operator\">=</span><span class=\"token string\">\"prom-node01.oldxu.net:7001\"</span>, <span class=\"token assign-left variable\">job</span><span class=\"token operator\">=</span><span class=\"token string\">\"weather-exporter\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">15</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>weather_oldxu<span class=\"token punctuation\">&#123;</span>city<span class=\"token operator\">=</span><span class=\"token string\">\"⼴州\"</span>, <span class=\"token assign-left variable\">dist</span><span class=\"token operator\">=</span><span class=\"token string\">\"天河区\"</span>, <span class=\"token assign-left variable\">instance</span><span class=\"token operator\">=</span><span class=\"token string\">\"prom-node01.oldxu.net:7001\"</span>, <span class=\"token assign-left variable\">job</span><span class=\"token operator\">=</span><span class=\"token string\">\"weather-exporter\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">14</span></pre></td></tr></table></figure><p>示例 6：使⽤ bottomk 获取排名靠前三的低温城市。bottomk 的结果按温度值从低到⾼排列</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 表达式</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>bottomk<span class=\"token punctuation\">(</span><span class=\"token number\">3</span>,weather_oldxu<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 结果</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>weather_oldxu<span class=\"token punctuation\">&#123;</span>city<span class=\"token operator\">=</span><span class=\"token string\">\"武汉\"</span>, <span class=\"token assign-left variable\">dist</span><span class=\"token operator\">=</span><span class=\"token string\">\"武昌区\"</span>, <span class=\"token assign-left variable\">instance</span><span class=\"token operator\">=</span><span class=\"token string\">\"prom-node01.oldxu.net:7001\"</span>, <span class=\"token assign-left variable\">job</span><span class=\"token operator\">=</span><span class=\"token string\">\"weather-exporter\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token parameter variable\">-6</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>weather_oldxu<span class=\"token punctuation\">&#123;</span>city<span class=\"token operator\">=</span><span class=\"token string\">\"武汉\"</span>, <span class=\"token assign-left variable\">dist</span><span class=\"token operator\">=</span><span class=\"token string\">\"汉⼝区\"</span>, <span class=\"token assign-left variable\">instance</span><span class=\"token operator\">=</span><span class=\"token string\">\"prom-node01.oldxu.net:7001\"</span>, <span class=\"token assign-left variable\">job</span><span class=\"token operator\">=</span><span class=\"token string\">\"weather-exporter\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token parameter variable\">-5</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>weather_oldxu<span class=\"token punctuation\">&#123;</span>city<span class=\"token operator\">=</span><span class=\"token string\">\"北京\"</span>, <span class=\"token assign-left variable\">dist</span><span class=\"token operator\">=</span><span class=\"token string\">\"海淀区\"</span>, <span class=\"token assign-left variable\">instance</span><span class=\"token operator\">=</span><span class=\"token string\">\"prom-node01.oldxu.net:7001\"</span>, <span class=\"token assign-left variable\">job</span><span class=\"token operator\">=</span><span class=\"token string\">\"weather-exporter\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">2</span></pre></td></tr></table></figure><p>示例 7：统计天⽓温度的数量，按城市进⾏区分</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 表达式</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>count<span class=\"token punctuation\">(</span>weather_oldxu<span class=\"token punctuation\">)</span> by <span class=\"token punctuation\">(</span>city<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 结果</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span>city<span class=\"token operator\">=</span><span class=\"token string\">\"上海\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span>city<span class=\"token operator\">=</span><span class=\"token string\">\"北京\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span>city<span class=\"token operator\">=</span><span class=\"token string\">\"⼴州\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span>city<span class=\"token operator\">=</span><span class=\"token string\">\"武汉\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">3</span></pre></td></tr></table></figure><p>示例 8：统计各温度值出现的频次，按城市进⾏区分</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 表达式 count_values (\"value_count\", &lt;metrics_name>) by (&lt;label>)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>count_values<span class=\"token punctuation\">(</span><span class=\"token string\">\"status\"</span>,weather_oldxu<span class=\"token punctuation\">)</span> by <span class=\"token punctuation\">(</span>city<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 结果</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span>city<span class=\"token operator\">=</span><span class=\"token string\">\"上海\"</span>, <span class=\"token assign-left variable\">status</span><span class=\"token operator\">=</span><span class=\"token string\">\"12\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span>city<span class=\"token operator\">=</span><span class=\"token string\">\"上海\"</span>, <span class=\"token assign-left variable\">status</span><span class=\"token operator\">=</span><span class=\"token string\">\"13\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span>city<span class=\"token operator\">=</span><span class=\"token string\">\"上海\"</span>, <span class=\"token assign-left variable\">status</span><span class=\"token operator\">=</span><span class=\"token string\">\"14\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span>city<span class=\"token operator\">=</span><span class=\"token string\">\"北京\"</span>, <span class=\"token assign-left variable\">status</span><span class=\"token operator\">=</span><span class=\"token string\">\"-3\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span>city<span class=\"token operator\">=</span><span class=\"token string\">\"北京\"</span>, <span class=\"token assign-left variable\">status</span><span class=\"token operator\">=</span><span class=\"token string\">\"6\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span>city<span class=\"token operator\">=</span><span class=\"token string\">\"北京\"</span>, <span class=\"token assign-left variable\">status</span><span class=\"token operator\">=</span><span class=\"token string\">\"-10\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span>city<span class=\"token operator\">=</span><span class=\"token string\">\"⼴州\"</span>, <span class=\"token assign-left variable\">status</span><span class=\"token operator\">=</span><span class=\"token string\">\"20\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#123;</span>city<span class=\"token operator\">=</span><span class=\"token string\">\"⼴州\"</span>, <span class=\"token assign-left variable\">status</span><span class=\"token operator\">=</span><span class=\"token string\">\"24\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span>city<span class=\"token operator\">=</span><span class=\"token string\">\"⼴州\"</span>, <span class=\"token assign-left variable\">status</span><span class=\"token operator\">=</span><span class=\"token string\">\"17\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#123;</span>city<span class=\"token operator\">=</span><span class=\"token string\">\"武汉\"</span>, <span class=\"token assign-left variable\">status</span><span class=\"token operator\">=</span><span class=\"token string\">\"15\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#123;</span>city<span class=\"token operator\">=</span><span class=\"token string\">\"武汉\"</span>, <span class=\"token assign-left variable\">status</span><span class=\"token operator\">=</span><span class=\"token string\">\"17\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">2</span> <span class=\"token comment\"># 17 度出现了 2 次，这意味着武汉城市有 2 个不同地域报告了 17 度的温度。</span></pre></td></tr></table></figure><h5 id=\"53-promql聚合实践\"><a class=\"anchor\" href=\"#53-promql聚合实践\">#</a> 5.3 PromQL 聚合实践</h5>\n<p>实例 1：查询所有节点，最近 1 分钟的负载，是否⾼于 cpu 核⼼的 2 倍</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 模拟 cpu 使⽤率⾼于核⼼数：stress --cpu 6</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 获取每个节点的负载表达式</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>sum<span class=\"token punctuation\">(</span>node_load1<span class=\"token punctuation\">)</span> by <span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># CPU 核⼼的 2 倍表达式 [核⼼数 * 2]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>count<span class=\"token punctuation\">(</span>node_cpu_seconds_total<span class=\"token punctuation\">&#123;</span>mode<span class=\"token operator\">=</span><span class=\"token string\">\"idle\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> by <span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">)</span> * <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># 整体表达式</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>sum<span class=\"token punctuation\">(</span>node_load1<span class=\"token punctuation\">)</span> by <span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> count<span class=\"token punctuation\">(</span>node_cpu_seconds_total<span class=\"token punctuation\">&#123;</span>mode<span class=\"token operator\">=</span><span class=\"token string\">\"idle\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> by <span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">)</span> * <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\"># 结果</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span>instance<span class=\"token operator\">=</span><span class=\"token string\">\"prom-node02.oldxu.net:9100\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">4.06</span> <span class=\"token comment\"># 该节点的使⽤率超过核⼼数的 2 倍了</span></pre></td></tr></table></figure><p>实例 2：查询每个节点的 CPU 的使⽤率，指标名称： node_cpu_seconds_total</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 模拟 cpu 使⽤率达到 50%：stress --cpu 1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 表达式: (1 - CPU 整体空闲使⽤率) * 100 = CPU 使⽤率</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> - avg<span class=\"token punctuation\">(</span>rate<span class=\"token punctuation\">(</span>node_cpu_seconds_total<span class=\"token punctuation\">&#123;</span>mode<span class=\"token operator\">=</span><span class=\"token string\">\"idle\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">[</span>1m<span class=\"token punctuation\">]</span><span class=\"token punctuation\">))</span> by <span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">))</span> *100</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 结果</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span>instance<span class=\"token operator\">=</span><span class=\"token string\">\"prom-node01.oldxu.net:9100\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">1.1555555555484487</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span>instance<span class=\"token operator\">=</span><span class=\"token string\">\"prom-node02.oldxu.net:9100\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">51.144444444459324</span> <span class=\"token comment\"># 使⽤率在 50% 左右</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span>instance<span class=\"token operator\">=</span><span class=\"token string\">\"prom-node03.oldxu.net:9100\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">2.3333333333236395</span></pre></td></tr></table></figure><p>实例 3：查询所有节点，最近 1 分钟磁盘的最⼤写⼊速率，以 MB/s 为单位，指标名称： node_disk_written_bytes_total</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 模拟数据写⼊，复制 2G 的数据，控制每秒 20M 左右的速度写</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># yum install pv -y</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># dd if=/dev/zero bs=1M count=2000 | pv -L 20M > /tmp/bigdata</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 表达式： 获取每分钟的磁盘速率，然后提取最⼤的值，最后 / 1024/1024 得到 MB/s</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>max<span class=\"token punctuation\">(</span>rate<span class=\"token punctuation\">(</span>node_disk_written_bytes_total<span class=\"token punctuation\">[</span>1m<span class=\"token punctuation\">]</span><span class=\"token punctuation\">))</span> by <span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">)</span> /1024 /1024</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># 结果</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span>instance<span class=\"token operator\">=</span><span class=\"token string\">\"prom-node01.oldxu.net:9100\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">0.007052951388888888</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span>instance<span class=\"token operator\">=</span><span class=\"token string\">\"prom-node02.oldxu.net:9100\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">19.724283854166664</span> <span class=\"token comment\">#每秒写⼊速度在 19MB/s</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span>instance<span class=\"token operator\">=</span><span class=\"token string\">\"prom-node03.oldxu.net:9100\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">0.011946614583333333</span></pre></td></tr></table></figure><p>实例 4：查询所有节点，最近 1 分钟磁盘的读取写⼊速率，以 MB/s 为单位，指标名称： node_disk_read_bytes_total</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 模拟数据读取，读取 /tmp/bigdata ⽂件，然后以每秒 15MB 的速度读取</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># yum install pv -y</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># pv -L 15M /tmp/bigdata > /dev/null</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 表达式</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>max<span class=\"token punctuation\">(</span>rate<span class=\"token punctuation\">(</span>node_disk_read_bytes_total<span class=\"token punctuation\">[</span>1m<span class=\"token punctuation\">]</span><span class=\"token punctuation\">))</span> by <span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">)</span> /1024 /1024</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># 结果</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span>instance<span class=\"token operator\">=</span><span class=\"token string\">\"prom-node01.oldxu.net:9100\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span>instance<span class=\"token operator\">=</span><span class=\"token string\">\"prom-node02.oldxu.net:9100\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">15.006076388888888</span> <span class=\"token comment\">#每秒读取速度在 15MB/s</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span>instance<span class=\"token operator\">=</span><span class=\"token string\">\"prom-node03.oldxu.net:9100\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">0</span></pre></td></tr></table></figure><p>实例 5：计算 Prometheus 服务器的 HTTP 请求成功率，指标名称： prometheus_http_requests_total</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 计算公式： 请求成功的 (2xx|3xx) / 总的请求 * 100 = 请求成功率</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 表达式</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">sum</span> <span class=\"token punctuation\">(</span>prometheus_http_requests_total<span class=\"token punctuation\">&#123;</span>code<span class=\"token operator\">=~</span><span class=\"token string\">\"2.*|3.*\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> / sum<span class=\"token punctuation\">(</span>prometheus_http_requests_total<span class=\"token punctuation\">)</span> * <span class=\"token number\">100</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 结果</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">99.59027974003956</span> <span class=\"token comment\"># ⽹站整体请求成功率在 99.5%</span></pre></td></tr></table></figure><p>实例 6：查询请求排名前三的 URL，指标名称： prometheus_http_requests_total</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 表达式</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">sum</span> <span class=\"token punctuation\">(</span>topk<span class=\"token punctuation\">(</span><span class=\"token number\">3</span>,prometheus_http_requests_total<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> by <span class=\"token punctuation\">(</span>instance,handler<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 结果</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span>handler<span class=\"token operator\">=</span><span class=\"token string\">\"/metrics\"</span>, <span class=\"token assign-left variable\">instance</span><span class=\"token operator\">=</span><span class=\"token string\">\"prom-node01.oldxu.net:9090\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">5483</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span>handler<span class=\"token operator\">=</span><span class=\"token string\">\"/api/v1/query\"</span>, <span class=\"token assign-left variable\">instance</span><span class=\"token operator\">=</span><span class=\"token string\">\"prom-node01.oldxu.net:9090\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">1576</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span>handler<span class=\"token operator\">=</span><span class=\"token string\">\"/api/v1/metadata\"</span>, <span class=\"token assign-left variable\">instance</span><span class=\"token operator\">=</span><span class=\"token string\">\"prom-node01.oldxu.net:9090\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">113</span></pre></td></tr></table></figure><h4 id=\"六-promql时间聚合操作\"><a class=\"anchor\" href=\"#六-promql时间聚合操作\">#</a> 六、PromQL 时间聚合操作</h4>\n<h5 id=\"61-promql时间聚合介绍\"><a class=\"anchor\" href=\"#61-promql时间聚合介绍\">#</a> 6.1 PromQL 时间聚合介绍</h5>\n<p>在 Prometheus 中，除了可以 “纵向的聚合” 以外，还可以基于时间聚合也就是 “横向聚合”。</p>\n<p>时间聚合不是在不同的序列上进⾏聚合操作，⽽是在 “单个序列” 的不同时间点之间进⾏聚合，这意味着，对于单个序列，我们可以计算过去⼀段时间内的最⼤值，最⼩值，以及平均值等。</p>\n<ul>\n<li>avg_over_time (range-vector) ：区间向量内每个指标的平均值。</li>\n<li>min_over_time (range-vector) ：区间向量内每个指标的最⼩值。</li>\n<li>max_over_time (range-vector) ：区间向量内每个指标的最⼤值。</li>\n<li>sum_over_time (range-vector) ：区间向量内每个指标的求和。</li>\n<li>count_over_time (range-vector) ：区间向量内指标样本的总个数。</li>\n</ul>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/qAuRqKU.jpeg\" alt=\"3.jpg\" /></p>\n<h5 id=\"62-promql时间聚合示例\"><a class=\"anchor\" href=\"#62-promql时间聚合示例\">#</a> 6.2 PromQL 时间聚合示例</h5>\n<p>1、获取武汉城市中武昌区，最近 5 分钟的温度数据</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 表达式</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>weather_oldxu<span class=\"token punctuation\">&#123;</span>city<span class=\"token operator\">=</span><span class=\"token string\">\"武汉\"</span>,dist<span class=\"token operator\">=</span><span class=\"token string\">\"武昌区\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">[</span>5m<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 结果</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>weather_oldxu<span class=\"token punctuation\">&#123;</span>city<span class=\"token operator\">=</span><span class=\"token string\">\"武汉\"</span>, <span class=\"token assign-left variable\">dist</span><span class=\"token operator\">=</span><span class=\"token string\">\"武昌区\"</span>, <span class=\"token assign-left variable\">instance</span><span class=\"token operator\">=</span><span class=\"token string\">\"prom-node01.oldxu.net:5000\"</span>, <span class=\"token assign-left variable\">job</span><span class=\"token operator\">=</span><span class=\"token string\">\"weather-exporter\"</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">12</span> @1704269783.3</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">22</span> @1704269843.3</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token number\">17</span> @1704269903.3</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token number\">17</span> @1704269963.3</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token number\">5</span>  @1704270023.3</pre></td></tr></table></figure><p>2、获取武汉城市中武昌区，最近 5 分钟温度的最⼤值</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 表达式</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>max_over_time<span class=\"token punctuation\">(</span>weather_oldxu<span class=\"token punctuation\">&#123;</span>city<span class=\"token operator\">=</span><span class=\"token string\">\"武汉\"</span>,dist<span class=\"token operator\">=</span><span class=\"token string\">\"武昌区\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">[</span>5m<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 结果</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span>city<span class=\"token operator\">=</span><span class=\"token string\">\"武汉\"</span>, <span class=\"token assign-left variable\">dist</span><span class=\"token operator\">=</span><span class=\"token string\">\"武昌区\"</span>, <span class=\"token assign-left variable\">instance</span><span class=\"token operator\">=</span><span class=\"token string\">\"prom-node01.oldxu.net:5000\"</span>, <span class=\"token assign-left variable\">job</span><span class=\"token operator\">=</span><span class=\"token string\">\"weather-exporter\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">22</span></pre></td></tr></table></figure><p>3、获取武汉城市中武昌区，最近 5 分钟温度的最⼩值</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 表达式</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>min_over_time<span class=\"token punctuation\">(</span>weather_oldxu<span class=\"token punctuation\">&#123;</span>city<span class=\"token operator\">=</span><span class=\"token string\">\"武汉\"</span>,dist<span class=\"token operator\">=</span><span class=\"token string\">\"武昌区\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">[</span>5m<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 结果</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span>city<span class=\"token operator\">=</span><span class=\"token string\">\"武汉\"</span>, <span class=\"token assign-left variable\">dist</span><span class=\"token operator\">=</span><span class=\"token string\">\"武昌区\"</span>, <span class=\"token assign-left variable\">instance</span><span class=\"token operator\">=</span><span class=\"token string\">\"prom-node01.oldxu.net:5000\"</span>, <span class=\"token assign-left variable\">job</span><span class=\"token operator\">=</span><span class=\"token string\">\"weather-exporter\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">5</span></pre></td></tr></table></figure><p>4、获取武汉城市中武昌区，最近 5 分钟温度的平均值</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 表达式</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>min_over_time<span class=\"token punctuation\">(</span>weather_oldxu<span class=\"token punctuation\">&#123;</span>city<span class=\"token operator\">=</span><span class=\"token string\">\"武汉\"</span>,dist<span class=\"token operator\">=</span><span class=\"token string\">\"武昌区\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">[</span>5m<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 结果</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span>city<span class=\"token operator\">=</span><span class=\"token string\">\"武汉\"</span>, <span class=\"token assign-left variable\">dist</span><span class=\"token operator\">=</span><span class=\"token string\">\"武昌区\"</span>, <span class=\"token assign-left variable\">instance</span><span class=\"token operator\">=</span><span class=\"token string\">\"prom-node01.oldxu.net:5000\"</span>, <span class=\"token assign-left variable\">job</span><span class=\"token operator\">=</span><span class=\"token string\">\"weather-exporter\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">14.6</span></pre></td></tr></table></figure><p>5、获取武汉城市中武昌区，当前数据总共来⾃多少个样本</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 表达式</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>count_over_time<span class=\"token punctuation\">(</span>weather_oldxu<span class=\"token punctuation\">&#123;</span>city<span class=\"token operator\">=</span><span class=\"token string\">\"武汉\"</span>,dist<span class=\"token operator\">=</span><span class=\"token string\">\"武昌区\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">[</span>5m<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 结果</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span>city<span class=\"token operator\">=</span><span class=\"token string\">\"武汉\"</span>, <span class=\"token assign-left variable\">dist</span><span class=\"token operator\">=</span><span class=\"token string\">\"武昌区\"</span>, <span class=\"token assign-left variable\">instance</span><span class=\"token operator\">=</span><span class=\"token string\">\"prom-node01.oldxu.net:5000\"</span>, <span class=\"token assign-left variable\">job</span><span class=\"token operator\">=</span><span class=\"token string\">\"weather-exporter\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">5</span> <span class=\"token comment\"># 说明 5 分钟的样本数有 5 个</span></pre></td></tr></table></figure><h5 id=\"63-promql时间聚合实践\"><a class=\"anchor\" href=\"#63-promql时间聚合实践\">#</a> 6.3 PromQL 时间聚合实践</h5>\n<p state=\"time_wait\">实例 1：查询最近 1 分钟内 tcp_timewait 连接数的最⼤值，并检查是否超过 1000 个，指标名称： node_tcp_connection_states</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 模拟⼤量 tcp_timewait：ab -n 1000 -c 2 http://localhost:9090/</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 表达式</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>max_over_time<span class=\"token punctuation\">(</span>node_tcp_connection_states<span class=\"token punctuation\">&#123;</span>state<span class=\"token operator\">=</span><span class=\"token string\">\"time_wait\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">[</span>1m<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span><span class=\"token number\">1000</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 结果</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span>instance<span class=\"token operator\">=</span><span class=\"token string\">\"prom-node01.oldxu.net:9100\"</span>, <span class=\"token assign-left variable\">job</span><span class=\"token operator\">=</span><span class=\"token string\">\"node_exporter\"</span>, <span class=\"token assign-left variable\">state</span><span class=\"token operator\">=</span><span class=\"token string\">\"time_wait\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">1769</span> <span class=\"token comment\"># 最近 1 分钟最⼤的值是 1769</span></pre></td></tr></table></figure><p state=\"established\">实例 2：查询最近 1 分钟内 tcp_established 连接数的最⼤值，并检查是否超过 100 个，指标名称： node_tcp_connection_states</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 模拟 established：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 服务端（node01）：nc -lk 2345</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 客户端（node02）：for i in &#123;1..1000&#125;; do nc prom-node01.oldxu.net 2345 >/dev/null 2>&amp;1 &amp; done</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 表达式</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>max_over_time<span class=\"token punctuation\">(</span>node_tcp_connection_states<span class=\"token punctuation\">&#123;</span>state<span class=\"token operator\">=</span><span class=\"token string\">\"established\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">[</span>1m<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">100</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># 结果</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span>instance<span class=\"token operator\">=</span><span class=\"token string\">\"prom-node01.oldxu.net:9100\"</span>, <span class=\"token assign-left variable\">job</span><span class=\"token operator\">=</span><span class=\"token string\">\"node_exporter\"</span>, <span class=\"token assign-left variable\">state</span><span class=\"token operator\">=</span><span class=\"token string\">\"established\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">133</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span>instance<span class=\"token operator\">=</span><span class=\"token string\">\"prom-node02.oldxu.net:9100\"</span>, <span class=\"token assign-left variable\">job</span><span class=\"token operator\">=</span><span class=\"token string\">\"node_exporter\"</span>, <span class=\"token assign-left variable\">state</span><span class=\"token operator\">=</span><span class=\"token string\">\"established\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">106</span></pre></td></tr></table></figure><p>实例 3：查询⽹站平均请求延迟 1 分钟⼤于 3s 的站点，指标名称： probe_duration_seconds（需要 blackbox)</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 表达式</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>avg_over_time<span class=\"token punctuation\">(</span>probe_duration_seconds<span class=\"token punctuation\">[</span>1m<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 结果</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span>instance<span class=\"token operator\">=</span><span class=\"token string\">\"https://httpstat.us/102\"</span>, <span class=\"token assign-left variable\">job</span><span class=\"token operator\">=</span><span class=\"token string\">\"blackbox_http\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">14.501046884666668</span></pre></td></tr></table></figure><p>实例 4：查询 MySQL 服务器在最近 1 分钟内平均运⾏线程数超过 50 的。指标名称： mysql_global_status_threads_running</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 模拟 MySQL 线程数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">i</span> <span class=\"token keyword\">in</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">..</span><span class=\"token number\">120</span><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   mysql <span class=\"token parameter variable\">-e</span> <span class=\"token string\">\"SELECT SLEEP(60);\"</span> <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">done</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># 表达式</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>avg_over_time<span class=\"token punctuation\">(</span>mysql_global_status_threads_running<span class=\"token punctuation\">[</span>1m<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">50</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># 结果</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span>instance<span class=\"token operator\">=</span><span class=\"token string\">\"prom-node03.oldxu.net:9104\"</span>, <span class=\"token assign-left variable\">job</span><span class=\"token operator\">=</span><span class=\"token string\">\"mysqld_exporter\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">62</span> <span class=\"token comment\"># 平均线程数在 62，超过阈值定义的 50</span></pre></td></tr></table></figure><p>实例 5：查询以监控 MySQL 服务器过去 1 分钟内的线程当前打开的最⼤连接数。如果这个数值超过了服务器配置的最⼤连接数的 80% 则触发告警。指标名称</p>\n<ul>\n<li>mysql_global_status_threads_connected （表示当前打开的连接数）</li>\n<li>mysql_global_variables_max_connections （表示配置允许的最⼤连接数）</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 模拟 MySQL 连接数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">i</span> <span class=\"token keyword\">in</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">..</span><span class=\"token number\">120</span><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    mysql <span class=\"token parameter variable\">-e</span> <span class=\"token string\">\"SELECT SLEEP(60);\"</span> <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">done</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># 表达式</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>max_over_time<span class=\"token punctuation\">(</span>mysql_global_status_threads_connected<span class=\"token punctuation\">[</span>1m<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> / mysql_global_variables_max_connections * <span class=\"token number\">100</span> <span class=\"token operator\">></span> <span class=\"token number\">80</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># 结果</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span>instance<span class=\"token operator\">=</span><span class=\"token string\">\"prom-node03.oldxu.net:9104\"</span>, <span class=\"token assign-left variable\">job</span><span class=\"token operator\">=</span><span class=\"token string\">\"mysqld_exporter\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">80.79470198675497</span> <span class=\"token comment\"># 当前最⼤连接数已经超过了 80%</span></pre></td></tr></table></figure><h4 id=\"七-promql向量匹配\"><a class=\"anchor\" href=\"#七-promql向量匹配\">#</a> 七、PromQL 向量匹配</h4>\n<h5 id=\"71-promql向量匹配介绍\"><a class=\"anchor\" href=\"#71-promql向量匹配介绍\">#</a> 7.1 PromQL 向量匹配介绍</h5>\n<p>在 Prometheus 中，执⾏ “向量与向量之间的运算” 时，需要遵循向量匹配的规则。这意味着两个向量必须具有 “相同的标签”，且对应的 “标签值也必须完全相同”，这才能进⾏运算。如果有任何⼀个标签或标签值不匹配，那么此次的运算将不会执⾏。这种匹配规则也被称为 “向量的⼀对⼀匹配”。例如，下⾯两个时间序列可以成功进⾏⼀对⼀匹配，⽽后可以正常执⾏各种运算：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>http_requests_total<span class=\"token punctuation\">&#123;</span>job<span class=\"token operator\">=</span><span class=\"token string\">\"webserver\"</span>, <span class=\"token assign-left variable\">instance</span><span class=\"token operator\">=</span><span class=\"token string\">\"prom\u0002node01.oldxu.net:9100\"</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>http_requests_duration_seconds<span class=\"token punctuation\">&#123;</span>job<span class=\"token operator\">=</span><span class=\"token string\">\"webserver\"</span>,instance<span class=\"token operator\">=</span><span class=\"token string\">\"prom-node01.oldxu.net:9100\"</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>因为它们的标签以及标签值完全⼀致，所以它们可以直接进⾏运算操作。</p>\n<h5 id=\"72-promql一对一向量匹配\"><a class=\"anchor\" href=\"#72-promql一对一向量匹配\">#</a> 7.2 PromQL ⼀对⼀向量匹配</h5>\n<p>但是在实际监控场景中，我们会经常遇到 “标签不完全相同” 的两个向量，但它们任然需要进⾏运算。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>oldxu_requests_total<span class=\"token punctuation\">&#123;</span>job<span class=\"token operator\">=</span><span class=\"token string\">\"webserver\"</span>, <span class=\"token assign-left variable\">instance</span><span class=\"token operator\">=</span><span class=\"token string\">\"prom-node01.oldxu.net:9100\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">3200</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#表示该实例的 HTTP 请求总数。</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>oldxu_requests_status_total<span class=\"token punctuation\">&#123;</span>job<span class=\"token operator\">=</span><span class=\"token string\">\"webserver\"</span>, <span class=\"token assign-left variable\">instance</span><span class=\"token operator\">=</span><span class=\"token string\">\"prom-node01.oldxu.net:9100\"</span>, <span class=\"token assign-left variable\">method</span><span class=\"token operator\">=</span><span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">500</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">#表示该实例中使⽤ GET ⽅法的 HTTP 请求总数。</span></pre></td></tr></table></figure><p>假设我们想要计算使⽤ GET ⽅法的请求总数，占总请求数的⽐例是多少。理想的计算公式是： GET ⽅法的请求总数 / 总的请求数 * 100 = GET 请求所占的⽐例。 但由于两个向量的标签不完全相同（⼀个有 method 标签，⼀个没有），因此⽆法进⾏直接进⾏计算。</p>\n<p>为了解决这个问题，我们可以借助 PromQL 的向量匹配选项：</p>\n<ul>\n<li>基于标签的匹配（on）：指定基于哪些标签进⾏匹配。只有当指定的 ” 标签及其值 “ 在两个向量中都相同，向量之间才能进⾏运算。</li>\n<li>忽略标签的匹配（ignoring）：指定忽略某些标签，也就是在运算时不考虑这些标签，只要其他标签以及标签的值相同，向量之间就可以进⾏运算。</li>\n</ul>\n<p>⽅式 1：使⽤ on 关键字匹配特定标签，明明确指定仅基于 job 和 instance 标签进⾏匹配</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 表达式</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>oldxu_requests_status_total<span class=\"token punctuation\">&#123;</span>method<span class=\"token operator\">=</span><span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">&#125;</span> / on <span class=\"token punctuation\">(</span>job, instance<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>oldxu_requests_total * <span class=\"token number\">100</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 结果</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span>instance<span class=\"token operator\">=</span><span class=\"token string\">\"prom-node01.oldxu.net:9100\"</span>, <span class=\"token assign-left variable\">job</span><span class=\"token operator\">=</span><span class=\"token string\">\"webserver\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">15.625</span> <span class=\"token comment\"># GET ⽅法占⽐总请求 15%</span></pre></td></tr></table></figure><p>⽅式 2：使⽤ ignoring 关键字忽略特定标签，忽略不希望参与匹配的 method 标签</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 表达式</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>oldxu_requests_status_total<span class=\"token punctuation\">&#123;</span>method<span class=\"token operator\">=</span><span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">&#125;</span> / ignoring <span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>oldxu_requests_total * <span class=\"token number\">100</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 结果</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span>instance<span class=\"token operator\">=</span><span class=\"token string\">\"prom-node01.oldxu.net:9100\"</span>, <span class=\"token assign-left variable\">job</span><span class=\"token operator\">=</span><span class=\"token string\">\"webserver\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">15.625</span> <span class=\"token comment\"># GET ⽅法占⽐总请求 15%</span></pre></td></tr></table></figure><h5 id=\"73-promql一对多向量匹配\"><a class=\"anchor\" href=\"#73-promql一对多向量匹配\">#</a> 7.3 PromQL ⼀对多向量匹配</h5>\n<p>在实际监控中，我们还会遇到需要进⾏ “⼀对多向量匹配” 的情况，即 “⼀个时间序列中的数据点” 需要与 “另⼀个时间序列中的多个数据点” 进⾏匹配运算。</p>\n<p>举个例⼦：假设我们有如下两个指标：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 第⼀个时间序列：记录了不同 HTTP ⽅法和状态码的错误请求总数。</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>oldxu_requests_error_total<span class=\"token punctuation\">&#123;</span>job<span class=\"token operator\">=</span><span class=\"token string\">\"webserver\"</span>, <span class=\"token assign-left variable\">method</span><span class=\"token operator\">=</span><span class=\"token string\">\"GET\"</span>,code<span class=\"token operator\">=</span><span class=\"token string\">\"500\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">220</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>oldxu_requests_error_total<span class=\"token punctuation\">&#123;</span>job<span class=\"token operator\">=</span><span class=\"token string\">\"webserver\"</span>, <span class=\"token assign-left variable\">method</span><span class=\"token operator\">=</span><span class=\"token string\">\"GET\"</span>,code<span class=\"token operator\">=</span><span class=\"token string\">\"404\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">130</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>oldxu_requests_error_total<span class=\"token punctuation\">&#123;</span>job<span class=\"token operator\">=</span><span class=\"token string\">\"webserver\"</span>, <span class=\"token assign-left variable\">method</span><span class=\"token operator\">=</span><span class=\"token string\">\"PUT\"</span>,code<span class=\"token operator\">=</span><span class=\"token string\">\"501\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>oldxu_requests_error_total<span class=\"token punctuation\">&#123;</span>job<span class=\"token operator\">=</span><span class=\"token string\">\"webserver\"</span>, <span class=\"token assign-left variable\">method</span><span class=\"token operator\">=</span><span class=\"token string\">\"POST\"</span>,code<span class=\"token operator\">=</span><span class=\"token string\">\"500\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">34</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>oldxu_requests_error_total<span class=\"token punctuation\">&#123;</span>job<span class=\"token operator\">=</span><span class=\"token string\">\"webserver\"</span>, <span class=\"token assign-left variable\">method</span><span class=\"token operator\">=</span><span class=\"token string\">\"POST\"</span>,code<span class=\"token operator\">=</span><span class=\"token string\">\"502\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">48</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># 第⼆个时间序列：记录了每种 HTTP ⽅法的请求总数。</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>oldxu_requests_instance_total<span class=\"token punctuation\">&#123;</span>job<span class=\"token operator\">=</span><span class=\"token string\">\"webserver\"</span>,method<span class=\"token operator\">=</span><span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">600</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>oldxu_requests_instance_total<span class=\"token punctuation\">&#123;</span>job<span class=\"token operator\">=</span><span class=\"token string\">\"webserver\"</span>,<span class=\"token string\">\"method\"</span><span class=\"token operator\">=</span><span class=\"token string\">\"POST\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">120</span></pre></td></tr></table></figure><p>我们的⽬标是计算每种 HTTP ⽅法（GET 和 POST）对应不同状态码（404 和 500）的请求占该⽅法总请求的⽐例。⼤体计算公式如下：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 1、GET ⽅法为 500 的请求总数 / GET 的总请求数 * 100 = GET 500 错误⽐例。 (220 /600 * 100 = 21.666666666666668)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 2、GET ⽅法为 404 的请求总数 / GET 的总请求数 * 100 = GET 404 错误⽐例。 (130 /600 * 100 = 36.666666666666664)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 3、POST ⽅法为 500 的请求总数 / POST 的总请求数 * 100 = POST 500 错误⽐例。 (34 / 120 * 100 = 28.333333333333332)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 4、POST ⽅法为 502 的请求总数 / POST 的总请求数 * 100 = POST 502 错误⽐例。 (48 / 120 * 100 = 40)</span></pre></td></tr></table></figure><p>为了实现这⼀⽬标，我们有两个问题需要解决：</p>\n<p>1、标签不⼀致：</p>\n<ul>\n<li>具体问题：两个时间序列的标签集合不完全⼀致， oldxu_requests_error_total 包含 code 标签，⽽ oldxu_requests_instance_total 不包含。</li>\n<li>解决⽅法：使⽤ ignoring (code) 来忽略 code 标签，从⽽使得两个时间序列在没有 code 标签的情况下可以匹配。</li>\n</ul>\n<p>2、⼀对多匹配：</p>\n<ul>\n<li>具体问题： oldxu_requests_error_total 中的每个数据点，都需要与 oldxu_requests_instance_total 中的总请求数相除。</li>\n<li>解决办法：必须明确左侧还是右侧为多的⼀边，因此我们可以使⽤ group_left 或 group_right 来指明哪个是 “多”，然后进⾏匹配。</li>\n</ul>\n<p>因此完整的 PromQL 查询如下：</p>\n<ul>\n<li>1、使⽤ ignoring (code) 忽略左侧查询（ oldxu_requests_error_total ）中的 code 标签。</li>\n<li>2、使⽤ group_left 修饰符来确保它能够与标签较少的右侧进⾏匹配。</li>\n<li>3、将匹配后的结果相除，并乘以 100 得到百分⽐。</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 表达式</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>oldxu_requests_error_total</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> / ignoring <span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   group_left</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>oldxu_requests_instance_total * <span class=\"token number\">100</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 结果</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span>code<span class=\"token operator\">=</span><span class=\"token string\">\"404\"</span>, <span class=\"token assign-left variable\">instance</span><span class=\"token operator\">=</span><span class=\"token string\">\"prom-node01.oldxu.net:7002\"</span>, <span class=\"token assign-left variable\">job</span><span class=\"token operator\">=</span><span class=\"token string\">\"webserver\"</span>, <span class=\"token assign-left variable\">method</span><span class=\"token operator\">=</span><span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">21.666666666666668</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span>code<span class=\"token operator\">=</span><span class=\"token string\">\"500\"</span>, <span class=\"token assign-left variable\">instance</span><span class=\"token operator\">=</span><span class=\"token string\">\"prom-node01.oldxu.net:7002\"</span>, <span class=\"token assign-left variable\">job</span><span class=\"token operator\">=</span><span class=\"token string\">\"webserver\"</span>, <span class=\"token assign-left variable\">method</span><span class=\"token operator\">=</span><span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">36.666666666666664</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span>code<span class=\"token operator\">=</span><span class=\"token string\">\"500\"</span>, <span class=\"token assign-left variable\">instance</span><span class=\"token operator\">=</span><span class=\"token string\">\"prom-node01.oldxu.net:7002\"</span>, <span class=\"token assign-left variable\">job</span><span class=\"token operator\">=</span><span class=\"token string\">\"webserver\"</span>, <span class=\"token assign-left variable\">method</span><span class=\"token operator\">=</span><span class=\"token string\">\"POST\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">28.333333333333332</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span>code<span class=\"token operator\">=</span><span class=\"token string\">\"502\"</span>, <span class=\"token assign-left variable\">instance</span><span class=\"token operator\">=</span><span class=\"token string\">\"prom-node01.oldxu.net:7002\"</span>, <span class=\"token assign-left variable\">job</span><span class=\"token operator\">=</span><span class=\"token string\">\"webserver\"</span>, <span class=\"token assign-left variable\">method</span><span class=\"token operator\">=</span><span class=\"token string\">\"POST\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">40</span></pre></td></tr></table></figure><h5 id=\"74-promql向量匹配示例\"><a class=\"anchor\" href=\"#74-promql向量匹配示例\">#</a> 7.4 PromQL 向量匹配示例</h5>\n<p>1、下载并运⾏程序，该程序⽤于模拟 “向量匹配相关的” 指标数据；</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@prom-node01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># wget http://file.oldxu.net/prometheus/exporter/vectormatch_exporter_oldxu</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span>root@prom-node01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># mv vectormatch_exporter_oldxu /usr/local/bin</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">[</span>root@prom-node01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># chmod +x /usr/local/bin/vectormatch_exporter_oldxu</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 启动脚本</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">[</span>root@prom-node01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># vim /usr/lib/systemd/system/vectormatch_exporter.service</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">[</span>Unit<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token assign-left variable\">Description</span><span class=\"token operator\">=</span>vectormatch_exporter</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token assign-left variable\">Documentation</span><span class=\"token operator\">=</span>https://prometheus.io/</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token assign-left variable\">After</span><span class=\"token operator\">=</span>network.target</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">[</span>Service<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token assign-left variable\">ExecStart</span><span class=\"token operator\">=</span>/usr/local/bin/vectormatch_exporter_oldxu <span class=\"token parameter variable\">--port</span> <span class=\"token number\">7002</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token assign-left variable\">ExecReload</span><span class=\"token operator\">=</span>/bin/kill <span class=\"token parameter variable\">-HUP</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token assign-left variable\">TimeoutStopSec</span><span class=\"token operator\">=</span>20s</pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token assign-left variable\">Restart</span><span class=\"token operator\">=</span>always</pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">[</span>Install<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token assign-left variable\">WantedBy</span><span class=\"token operator\">=</span>multi-user.target</pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">[</span>root@prom-node01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># systemctl daemon-reload</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">[</span>root@prom-node01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># systemctl start vectormatch_exporter.service</span></pre></td></tr></table></figure><p>2、编辑 Prometheus 配置⽂件，抓取对应的指标数据</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@prom-node01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># vim /etc/prometheus/prometheus.yml</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  - job_name: <span class=\"token string\">\"webserver\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    static_configs:</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    - targets: <span class=\"token punctuation\">[</span><span class=\"token string\">\"prom-node01.oldxu.net:7002\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># 重新加载 prometheus</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">[</span>root@prom-node01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># curl -X POST http://localhost:9090/-/reload</span></pre></td></tr></table></figure><p>示例 1：⼀对⼀向量匹配</p>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/kxSPXou.jpeg\" alt=\"1.jpg\" /></p>\n<p>示例 2：⼀对多向量匹配</p>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/sEj96xP.jpeg\" alt=\"2.jpg\" /></p>\n<h5 id=\"75-promql向量匹配实践\"><a class=\"anchor\" href=\"#75-promql向量匹配实践\">#</a> 7.5 PromQL 向量匹配实践</h5>\n<p>实例 1：查询每个实例 CPU 的各个模式使⽤的时间占 “总 CPU 的时间” ⽐例是多少，也是就占多少百分⽐。</p>\n<ul>\n<li>1、获取每个实例各个模式占⽤ CPU 的时间，按照（instance、mode）进⾏分组并求和；</li>\n<li>2、获取每个实例总占⽤ CPU 时间，按照（instance）进⾏分组求和；</li>\n<li>3、将每种模式所使⽤的 CPU 时间 / CPU 总的时间 * 100 = 每种模式占总 CPU 时间的百分⽐；</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 表达式</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">sum</span> <span class=\"token punctuation\">(</span>node_cpu_seconds_total<span class=\"token punctuation\">)</span> by <span class=\"token punctuation\">(</span>instance,job,mode<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>/ ignoring <span class=\"token punctuation\">(</span>mode<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  group_left</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">sum</span> <span class=\"token punctuation\">(</span>node_cpu_seconds_total<span class=\"token punctuation\">)</span> by <span class=\"token punctuation\">(</span>instance,job<span class=\"token punctuation\">)</span> * <span class=\"token number\">100</span></pre></td></tr></table></figure><p>实例 2：查询 “每个 CPU 核⼼” 上不同模式的时间，占总 CPU 时间的⽐率是多少，也就是占多少百分⽐。</p>\n<ul>\n<li>1、计算 “每个 CPU 核⼼” 在 “各个模式下” 的累计 CPU 使⽤时间，按照（instance、cpu、mode）进⾏分组并求和；</li>\n<li>2、计算 “每个 CPU 核⼼的总 CPU 时间” 不区分模式。按照（instance、cpu）进⾏分组并求和；</li>\n<li>3、每个 CPU 核⼼的各个模式 / CPU 核⼼的总时间 * 100 = 每个 CPU 核⼼的各个模式时间占⽤百分⽐</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 表达式</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">sum</span> <span class=\"token punctuation\">(</span>node_cpu_seconds_total<span class=\"token punctuation\">)</span> by <span class=\"token punctuation\">(</span>instance,cpu,mode<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> / on <span class=\"token punctuation\">(</span>instance,cpu<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   group_left</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">sum</span> <span class=\"token punctuation\">(</span>node_cpu_seconds_total<span class=\"token punctuation\">)</span> by <span class=\"token punctuation\">(</span>instance,cpu<span class=\"token punctuation\">)</span></pre></td></tr></table></figure>",
            "tags": [
                "Prometheus"
            ]
        },
        {
            "id": "http://ixuyong.cn/posts/1595025559.html",
            "url": "http://ixuyong.cn/posts/1595025559.html",
            "title": "Prometheus监控实战（一）",
            "date_published": "2025-06-26T02:33:41.000Z",
            "content_html": "<h3 id=\"prometheus监控实战一\"><a class=\"anchor\" href=\"#prometheus监控实战一\">#</a> Prometheus 监控实战（一）</h3>\n<h4 id=\"一-prometheus介绍\"><a class=\"anchor\" href=\"#一-prometheus介绍\">#</a> 一、Prometheus 介绍</h4>\n<h5 id=\"11-prometheus是什么\"><a class=\"anchor\" href=\"#11-prometheus是什么\">#</a> 1.1 Prometheus 是什么</h5>\n<p>Prometheus 是由 SoundCloud 使⽤ Go 语⾔开发的时序数据库（简称 TSDB）但它的功能并⾮局限于 TSDB，因为它还⽀持对⽬标（如服务器、应⽤程序等）进⾏监控；</p>\n<p>因此，我们也可以理解 Prometheus 是⼀款开源的 “监控系统”，但仅仅依托 Prometheus 不⾜以⽀撑整个监控系统，它需要结合⽣态内其他的组件来构建⼀个完整的 IT 监控系统。例如： AleartManager、Grafana、PushGateway 等等。</p>\n<h5 id=\"12-什么是时序数据\"><a class=\"anchor\" href=\"#12-什么是时序数据\">#</a> 1.2 什么是时序数据</h5>\n<p>所谓时序数据，指的是，按照固定时间周期对 “某个或某些指标” 进⾏ “反复测量” 从⽽得到测量的 “数据集合”。这些数据随着时间的推移，会形成⼀个连续的序列，因此被称为时序数据。如果我们将这些数据绘制在图形上，通常会有⼀个 数据轴（Y 轴） 表示数据值，⼀个 时间轴（X 轴） 表示测量的时间点。</p>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/ciCCOaR.jpeg\" alt=\"3.jpg\" /></p>\n<h5 id=\"13-prometheus时序数据\"><a class=\"anchor\" href=\"#13-prometheus时序数据\">#</a> 1.3 Prometheus 时序数据</h5>\n<p>在 Prometheus 中，时序数据主要包括三个部分：指标名称、标签集、时序数据（时间戳、数据）。</p>\n<p>1、指标名称</p>\n<p>例如，监控服务器的 CPU 使⽤率，对应的指标名称可以是 cpu_usage、memory_MemTotal 等指标名称是被监控端提供的。</p>\n<p>2、标签集</p>\n<p>标签集⽤于区分不同的数据源或实例。</p>\n<p>假设我们有两台服务器，⼀台是 Web 服务器，另⼀台是 db 数据库服务器。为了区分这两台服务器的 CPU 使⽤率数据，我们可以为它们添加不同的标签，例如： cpu_usage {type=&quot;web&quot;} 和 cpu_usage {type=&quot;db&quot;} 。</p>\n<p>3、时序数据</p>\n<p>指按照按固定时间间隔，采集对应指标名称，从⽽获取到对应指标的数据。例如，每分钟采集⼀次 CPU 使⽤率（ cpu_usage ）。每个数据点包括采集 CPU 使⽤率的时间戳（ 2023.03.30 10:00:01 ），以及该时间点采集到的样本值（ 50% ）。</p>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/SRYErXu.jpeg\" alt=\"4.jpg\" /></p>\n<p>PS：每⼀个 “指标名称和标签组合” 都会形成⼀条独⽴的时间序列。这就表示，即使我们只探测了⼀个指标 cpu_usage ，但是它具有不同的标签值，就会产⽣两条分别代表不同实例的时间序列。在这些时间序列中，每⼀个特定的数据点被称为⼀个 ' 样本 '。每个样本都包含指标名称、标签、时间戳以及对应的指标值。</p>\n<h5 id=\"14-prometheus数据采集三种方式\"><a class=\"anchor\" href=\"#14-prometheus数据采集三种方式\">#</a> 1.4 Prometheus 数据采集三种方式</h5>\n<p>在传统的 Zabbix 监控系统中，通常是需要在被监控的节点上安装 Agent 代理程序。由 Agent 代理程序定期收集指标数据，并将其发送到监控服务器，完成数据采集。</p>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/GrKq3KY.jpeg\" alt=\"1.jpg\" /></p>\n<p>在 Prometheus 中，被监控端⽆需安装专⻔的 Agent。它只需要 “被监控端通过 HTTP 协议开放出符合 Prometheus 规范的指标数据”，Prometheus 就能够顺利完成数据抓取。</p>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/8qTrLX7.jpeg\" alt=\"5.jpg\" /></p>\n<p>但，并不是所有的应⽤或服务都能直接⽀持 HTTP 协议并提供符合 Prometheus 所兼容的指标格式。因此，Prometheus 设计了三种主要的数据抓取机制，即 Instrumentation、Exporter 和 PushGateway。</p>\n<ol>\n<li>Instrumentation ：被监控端通过 HTTP 暴露出 Prometheus 格式的数据，Prometheus 就可以直接采集，这就是所谓的 Instrumentation。像 Kubernetes、Haproxy、Zookeeper、RabbitMQ、Etcd 等应⽤程序原⽣就⽀持暴露指标，可以直接被 Prometheus 所监控。对于 Python、Java、Go 这些开发语⾔编写的业务应⽤，开发⼈员可以直接引⽤ Prometheus 客户端库来编写代码，让应⽤程序原⽣就能⽀持暴露需要监控的指标数据，这些指标数据可以直接被 Prometheus 采集。这就相当于应⽤程序本身具备了与 Prometheus 通信的能⼒，⽆需额外的中间件来转换数据。</li>\n<li>Exporter（导出器） ：有些应⽤程序并不原⽣⽀持通过 HTTP 协议暴露指标数据。对于这类应⽤，我们可以使⽤ Exporter 来代为采集指标。Exporter 是⼀个独⽴的运⾏程序，负责从⽬标应⽤中采集原始格式的数据，并将其转换为 Prometheus 可以理解的格式，然后通过 HTTP 协议暴露出来，供 Prometheus 抓取指标。简单来说，Exporter 就像⼀个翻译官，将⽬标应⽤程序的数据翻译成 Prometheus 可以读懂的语⾔。</li>\n<li>PushGateway（推送⽹关） ：对于那些⽣命周期较短或者不⽅便被 Prometheus 主动拉取数据的应⽤程序（如短暂运⾏的脚本任务）可以使⽤ PushGateway。让这些短暂运⾏的脚本程序，将对应的指标数据主动推送到 PushGateway，然后 Prometheus 从 PushGateway 中抓取这些数据。PushGateway 就像⼀个中间站，存储这些短暂任务产⽣的指标数据，等待 Prometheus 来抓取。</li>\n</ol>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/vCHt9SX.jpeg\" alt=\"6.jpg\" /></p>\n<h5 id=\"15-prometheus作业与实例\"><a class=\"anchor\" href=\"#15-prometheus作业与实例\">#</a> 1.5 Prometheus 作业与实例</h5>\n<p>在 Prometheus 中，被监控的每⼀个对象都称为实例（Instance） 实例代表着⼀个独⽴的监控⽬标，它由 IP 地址加端⼝号组合⽽成，</p>\n<p>如 localhost:9090 。在 Prometheus 的配置中，这些实例也可以被称为” ⽬标（Target）“或者 “端点（Endpoint）”。</p>\n<p>为了⽅便管理这些⽬标实例，我们通常会将功能相似或者类型相同的（实例 Instance）归纳到⼀个 “作业（Job）” 中。</p>\n<ul>\n<li>实例（Instances）：实例指的是⼀个被监控的端点。它通常是指向⼀个运⾏的服务或应⽤程序的进程，每个实例都以 host:port 进⾏标识。例如，⼀个 MySQL 数据库服务运⾏在 10.0.0.51:3306 上，那么它就是⼀个实例。</li>\n<li>作业（Jobs）：作业是⼀组具有相同类型的实例集合。例如，多个分布在不同服务器上 MySQL 应⽤，你可以将这些实例归类为同⼀个 mysql 的 Job 作业，⽽后按照 Job 分组后的维度进⾏分析。</li>\n</ul>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/cFCOs3e.jpeg\" alt=\"2.jpg\" /></p>\n<p>在 Prometheus 的数据模型中，job 和 instance 是两个核⼼的标签，它们会⾃动附加到所有收集的时间序列数据上。如下所示：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 查询</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cpu_usage</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 结果</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>cpu_usage<span class=\"token punctuation\">&#123;</span>job<span class=\"token operator\">=</span><span class=\"token string\">\"node-exporter\"</span>,instance<span class=\"token operator\">=</span><span class=\"token string\">\"10.0.0.7\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">14.04</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>cpu_usage<span class=\"token punctuation\">&#123;</span>job<span class=\"token operator\">=</span><span class=\"token string\">\"node-exporter\"</span>,instance<span class=\"token operator\">=</span><span class=\"token string\">\"10.0.0.8\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">12.04</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>cpu_usage<span class=\"token punctuation\">&#123;</span>job<span class=\"token operator\">=</span><span class=\"token string\">\"node-exporter\"</span>,instance<span class=\"token operator\">=</span><span class=\"token string\">\"10.0.0.9\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">16.04</span></pre></td></tr></table></figure><h5 id=\"16-prometheus架构\"><a class=\"anchor\" href=\"#16-prometheus架构\">#</a> 1.6 Prometheus 架构</h5>\n<p>Prometheus 最为核⼼的功能就是 “数据采集” 和 “数据存储”。但是，仅有这两项功能并不能构成⼀个完整的监控系统。因此，Prometheus 需要与其他的组件进⾏结合，从⽽实现数据的分析、展示和告警，因此⼀个完整意义上的监控系统⼤体需要如下 5 个组成部分：</p>\n<ul>\n<li>1、数据采集：Prometheus 采⽤ Pull 模式主动向被监控端抓取指标数据。被监控端可以是直接暴露出的应⽤程序指标数据，也可以是通过安装 Exporter 来抓取和暴露应⽤程序的数据。只要是以 Prometheus 格式提供的指标数据，都可以被 Prometheus 抓取。</li>\n<li>2、数据存储：Prometheus 会将抓取到的数据，存储在本地的时间序列数据库中，以防⽌数据丢失。</li>\n<li>3、数据查询和分析：Prometheus 内置了强⼤的查询语⾔ PromQL，⽤户可以通过 PromQL 查询存储在 Prometheus 上的时序数据，进⾏实时查询和分析。同时 PromQL ⽀持多种聚合操作和数学运算，可以对数据进⾏深⼊分析。</li>\n<li>4、告警系统：Prometheus 的告警分为了两个部分组成，告警规则和 Alertmanager。告警规则定义在 Prometheus 服务器中，根据⽤户指定的条件触发告警。当告警触发时，Prometheus 服务器会将告警信息发送给 Alertmanager。Alertmanager 会对告警信息进⾏去重、分组，然后将告警消息通过媒介发送给接收者（如邮件、钉钉等）。</li>\n<li>5、数据可视化：Prometheus 内置了⼀个简单的图形界⾯，⽤户可以在 Web 浏览器中使⽤ PromQL 查询时序数据，并将查询结果以图形的形式展示出来。此外，Prometheus 还可以与第三⽅可视化⼯具（如 Grafana）集成，提供更丰富的可视化功能。</li>\n</ul>\n<p>了解 Prometheus ⽣态中的各个组件后，我们可以概括其⼯作流程：⽬标发现、数据抓取、存储、分析、告警和展示。这些步骤共同构成了 Prometheus 强⼤的监控和告警系统。</p>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/cZ48728.jpeg\" alt=\"4.jpg\" /></p>\n<ul>\n<li>1、⽬标发现：在开始监控之前，Prometheus 需要确定监控⽬标。它可以通过静态的配置⽂件指定，或者利⽤服务发现机制动态地发现需要监控的服务。例如，在 Kubernetes 环境中，Prometheus 能够⾃动识别并监控集群中的服务，确保随着集群的变化，监控⽬标始终是最新的。</li>\n<li>2、数据抓取：有了明确的监控⽬标后，Prometheus 通过 HTTP 协议定期从这些⽬标的 /metrics 端点抓取指标数据。这些端点暴露了各种监控指标。</li>\n<li>3、数据存储：数据抓取后会存储在本地的时间序列数据库中。</li>\n<li>4、数据分析：数据⼀旦被存储，就可以⽤ PromQL 查询语⾔，对其进⾏分析。⽆论是实时监控还是历史数据分析，PromQL 都能提供丰富的数据聚合功能，以洞察系统的状况。</li>\n<li>5、告警：Prometheus 根据预定义的规则进⾏评估。当监控的指标达到告警阈值时，Prometheus 会将告警信息发送给 Alertmanager，由 Alertmanager 进⾏告警处理并通知。</li>\n<li>6、数据可视化：Prometheus ⾃带了简单的 UI。但对于更⾼级的数据可视化需求，通常会整合 Grafana 这样的⼯具来为⽤户提供直观的数据展现⽅式。</li>\n</ul>\n<h5 id=\"17-prometheus数据模型\"><a class=\"anchor\" href=\"#17-prometheus数据模型\">#</a> 1.7 Prometheus 数据模型</h5>\n<p>Prometheus 中最为重要的是，对指标进⾏抓取和存储，这些存储下来的数据可以帮助我们分析趋势，或预测未来。为了更有⾼效的存储和查询这些数据，Prometheus 使⽤了⼀种叫 &quot;时间序列&quot; 的数据格式进⾏存储，所谓时间序列就是按照时间顺序记录所采集到的指标以及指标数据。⽽每个时间序列都是由 “⼀个指标名称加⼀堆标签” 所组成的⼀条唯⼀序列标识，其格式 &quot;&lt;metric_name&gt;{&lt;label_name&gt;=&lt;label_value&gt;, &lt;label_name&gt;=&lt;label_value&gt;, ...} @<timestamp> <value>&quot;</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 查询 node01 节点的各 CPU 核⼼使⽤率</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cpu_usage<span class=\"token punctuation\">&#123;</span>instance<span class=\"token operator\">=</span><span class=\"token string\">\"node01.oldxu.net\"</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 结果</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>cpu_usage<span class=\"token punctuation\">&#123;</span>instance<span class=\"token operator\">=</span><span class=\"token string\">\"node01.oldxu.net\"</span>,core<span class=\"token operator\">=</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">7.535</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>cpu_usage<span class=\"token punctuation\">&#123;</span>instance<span class=\"token operator\">=</span><span class=\"token string\">\"node01.oldxu.net\"</span>,core<span class=\"token operator\">=</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">7.535</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 查询 node02 节点，核⼼为 0 的 CPU 使⽤率</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>cpu_usage<span class=\"token punctuation\">&#123;</span>instance<span class=\"token operator\">=</span><span class=\"token string\">\"node02.oldxu.net\"</span>,core<span class=\"token operator\">=</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># 结果</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>cpu_usage<span class=\"token punctuation\">&#123;</span>instance<span class=\"token operator\">=</span><span class=\"token string\">\"node01.oldxu.net\"</span>,core<span class=\"token operator\">=</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">8.025</span></pre></td></tr></table></figure><h4 id=\"二-prometheus安装\"><a class=\"anchor\" href=\"#二-prometheus安装\">#</a> 二、Prometheus 安装</h4>\n<p>Prometheus 支持多种安装方式，为了便于理解，我们先使用二进制方式进行部署，后期在使用 Kubernetes 方式进行部署。</p>\n<h5 id=\"21-环境准备\"><a class=\"anchor\" href=\"#21-环境准备\">#</a> 2.1 环境准备</h5>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">IP 地址</th>\n<th style=\"text-align:center\">主机名名称</th>\n<th style=\"text-align:center\">系统版本</th>\n<th style=\"text-align:center\">内核版本</th>\n<th style=\"text-align:center\">CPU</th>\n<th style=\"text-align:center\">内存</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">192.168.40.221</td>\n<td style=\"text-align:center\"><a href=\"http://prom-node01.oldxu.net\">prom-node01.oldxu.net</a></td>\n<td style=\"text-align:center\">Centos7.9</td>\n<td style=\"text-align:center\">3.10.0-957.el7.x86_64</td>\n<td style=\"text-align:center\">2Core</td>\n<td style=\"text-align:center\">2G</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">192.168.40.222</td>\n<td style=\"text-align:center\"><a href=\"http://prom-node02.oldxu.net\">prom-node02.oldxu.net</a></td>\n<td style=\"text-align:center\">Centos7.9</td>\n<td style=\"text-align:center\">3.10.0-957.el7.x86_64</td>\n<td style=\"text-align:center\">2Core</td>\n<td style=\"text-align:center\">2G</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">192.168.40.223</td>\n<td style=\"text-align:center\"><a href=\"http://prom-node03.oldxu.net\">prom-node03.oldxu.net</a></td>\n<td style=\"text-align:center\">Centos7.9</td>\n<td style=\"text-align:center\">3.10.0-957.el7.x86_64</td>\n<td style=\"text-align:center\">2Core</td>\n<td style=\"text-align:center\">2G</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">192.168.40.224</td>\n<td style=\"text-align:center\"><a href=\"http://prom-node04.oldxu.net\">prom-node04.oldxu.net</a></td>\n<td style=\"text-align:center\">Centos7.9</td>\n<td style=\"text-align:center\">3.10.0-957.el7.x86_64</td>\n<td style=\"text-align:center\">2Core</td>\n<td style=\"text-align:center\">2G</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">192.168.40.225</td>\n<td style=\"text-align:center\"><a href=\"http://prom-node05.oldxu.net\">prom-node05.oldxu.net</a></td>\n<td style=\"text-align:center\">Centos7.9</td>\n<td style=\"text-align:center\">3.10.0-957.el7.x86_64</td>\n<td style=\"text-align:center\">2Core</td>\n<td style=\"text-align:center\">2G</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"22-配置host解析\"><a class=\"anchor\" href=\"#22-配置host解析\">#</a> 2.2 配置 Host 解析</h5>\n<p>1、配置 hosts 解析</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"192.168.40.221 prom-node01.oldxu.net\"</span> <span class=\"token operator\">>></span> /etc/hosts</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"192.168.40.222 prom-node02.oldxu.net\"</span> <span class=\"token operator\">>></span> /etc/hosts</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"192.168.40.223 prom-node03.oldxu.net\"</span> <span class=\"token operator\">>></span> /etc/hosts</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"192.168.40.224 prom-node04.oldxu.net\"</span> <span class=\"token operator\">>></span> /etc/hosts</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"192.168.40.225 prom-node05.oldxu.net\"</span> <span class=\"token operator\">>></span> /etc/hosts</pre></td></tr></table></figure><p>2、推送 hosts 解析文件，确保每个节点都能正常通过主机名进行访问</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">i</span> <span class=\"token keyword\">in</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">222</span><span class=\"token punctuation\">..</span><span class=\"token number\">225</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token function\">scp</span> /etc/hosts root@192.168.40.<span class=\"token variable\">$i</span>:/etc/hosts</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">done</span></pre></td></tr></table></figure><h5 id=\"23-下载prometheus\"><a class=\"anchor\" href=\"#23-下载prometheus\">#</a> 2.3 下载 Prometheus</h5>\n<p>1、访问 Prometheus 官网 ﻿https://prometheus.io/download/﻿下载 Prometheus</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@prom-node01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># wget https://github.com/prometheus/prometheus/releases/download/v2.49.1/prometheus-2.49.1.linux-amd64.tar.gz</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 加速地址</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">[</span>root@prom-node01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># wget https://mirror.ghproxy.com/https://github.com/prometheus/prometheus/releases/download/v2.49.1/prometheus-2.49.1.linux-amd64.tar.gz</span></pre></td></tr></table></figure><p>2、解压 Prometheus 至指定目录</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@prom-node01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># tar xf prometheus-2.49.1.linux-amd64.tar.gz -C /etc</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span>root@prom-node01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># ln -s /etc/prometheus-2.49.1.linux-amd64/ /etc/prometheus</span></pre></td></tr></table></figure><p>3、执行 ﻿prometheus --version﻿ 查看命令是否正常</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@prom-node01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># /etc/prometheus/prometheus --version</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>prometheus, version <span class=\"token number\">2.49</span>.1 <span class=\"token punctuation\">(</span>branch: HEAD, revision: 43e14844a33b65e2a396e3944272af8b3a494071<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  build user:       root@6d5f4c649d25</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  build date:       <span class=\"token number\">20240115</span>-16:58:43</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  go version:       go1.21.6</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  platform:         linux/amd64</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  tags:             netgo,builtinassets,stringlabels</pre></td></tr></table></figure><h5 id=\"24-配置prometheus\"><a class=\"anchor\" href=\"#24-配置prometheus\">#</a> 2.4 配置 Prometheus</h5>\n<p>1、在启动 Prometheus 之前，我们需要准备一个 Prometheus 的配置文件，监控目标服务。由于 Prometheus 服务本身对外暴露了 Metrics 指标接口，所以我们可以配置 Prometheus 监控自身，保存一个名为 prometheus.yml 的文件，替换掉默认的配置文件</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@prom-node01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># cp /etc/prometheus/prometheus.yml /etc/prometheus/prometheus.yml_bak</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span>root@prom-node01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># cat /etc/prometheus/prometheus.yml</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 全局段定义</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>global:</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  scrape_interval: 15s <span class=\"token comment\"># 设置 Prometheus 抓取指标数据的间隔，默认为 15 秒。</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># 抓取指定的目标</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>scrape_configs:</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  - job_name: <span class=\"token string\">\"prometheus\"</span> <span class=\"token comment\"># 定义一个抓取任务，名为 'prometheus'。</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    metrics_path: <span class=\"token string\">\"/metrics\"</span> <span class=\"token comment\"># 指定 Prometheus 从监控目标暴露的 HTTP 端点路径抓取指标，默认为 '/metrics'。</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    static_configs: <span class=\"token comment\"># 配置静态目标地址，Prometheus 将定期从如下这些地址抓取指标。</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    - targets: <span class=\"token punctuation\">[</span><span class=\"token string\">\"prom-node01.oldxu.net:9090\"</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>2、启动可以直接通过命令启动，但直接这么启动不是很方便，因此我们可以准备一个专属的启动文件</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@prom-node01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># /etc/prometheus/prometheus --config.file=/etc/prometheus/prometheus.yml</span></pre></td></tr></table></figure><h5 id=\"25-启动prometheus\"><a class=\"anchor\" href=\"#25-启动prometheus\">#</a> 2.5 启动 Prometheus</h5>\n<p>1、配置 system 管理 Prometheus 启动和停止</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@prom-node01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># cat /usr/lib/systemd/system/prometheus.service</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span>Unit<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token assign-left variable\">Description</span><span class=\"token operator\">=</span>Prometheus server</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token assign-left variable\">Documentation</span><span class=\"token operator\">=</span>https://prometheus.io/</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">[</span>Service<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token assign-left variable\">User</span><span class=\"token operator\">=</span>root</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token assign-left variable\">Restart</span><span class=\"token operator\">=</span>always</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token assign-left variable\">ExecStart</span><span class=\"token operator\">=</span>/etc/prometheus/prometheus <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token parameter variable\">--config.file</span><span class=\"token operator\">=</span>/etc/prometheus/prometheus.yml <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token parameter variable\">--storage.tsdb.path</span><span class=\"token operator\">=</span>/etc/prometheus/data <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token parameter variable\">--storage.tsdb.retention.time</span><span class=\"token operator\">=</span>60d <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>--web.enable-lifecycle</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token assign-left variable\">ExecReload</span><span class=\"token operator\">=</span>/bin/kill <span class=\"token parameter variable\">-HUP</span> <span class=\"token variable\">$MAINPID</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token assign-left variable\">Restart</span><span class=\"token operator\">=</span>on-failure</pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token assign-left variable\">RestartSec</span><span class=\"token operator\">=</span><span class=\"token number\">20</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token assign-left variable\">TimeoutStopSec</span><span class=\"token operator\">=</span><span class=\"token number\">20</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token assign-left variable\">SendSIGKILL</span><span class=\"token operator\">=</span>no</pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token assign-left variable\">LimitNOFILE</span><span class=\"token operator\">=</span><span class=\"token number\">8192</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">[</span>Install<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token assign-left variable\">WantedBy</span><span class=\"token operator\">=</span>multi-user.target</pre></td></tr></table></figure><p>2、在启动 Prometheus 服务时通过参数传递了一些配置选项，它们定义了 Prometheus 服务的一些关键行为。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token parameter variable\">--config.file</span><span class=\"token operator\">=</span>/etc/prometheus/prometheus.yml <span class=\"token comment\"># 指定 Prometheus 的配置文件路径。</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token parameter variable\">--storage.tsdb.path</span><span class=\"token operator\">=</span>/etc/prometheus/data <span class=\"token comment\"># 设置 Prometheus 存储时间序列数据库（TSDB）的路径。用于存放 Prometheus 抓取到的指标数据。</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token parameter variable\">--storage.tsdb.retention.time</span><span class=\"token operator\">=</span>60d <span class=\"token comment\"># 配置 Prometheus 的数据保留期限。超过这个时间范围的旧数据将被删除。这个可以根据存储资源和监控需求进行调整。</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>--web.enable-lifecycle <span class=\"token comment\"># 允许通过 HTTP 请求的方式来更新 Prometheus 的配置。</span></pre></td></tr></table></figure><p>3、启动 Prometheus 服务</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@prom-node01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># systemctl daemon-reload</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span>root@prom-node01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># systemctl start prometheus</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">[</span>root@prom-node01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># netstat -lntp |grep 9090</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>tcp6       <span class=\"token number\">0</span>      <span class=\"token number\">0</span> :::9090                 :::*                    LISTEN      <span class=\"token number\">2057</span>/prometheus</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#通过 HTTP 请求的方式来热更新 Prometheus 的配置文件</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">[</span>root@prom-node01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># curl -X POST http://localhost:9090/-/reload</span></pre></td></tr></table></figure><h5 id=\"26-访问prometheus\"><a class=\"anchor\" href=\"#26-访问prometheus\">#</a> 2.6 访问 Prometheus</h5>\n<p>1、通过访问对应服务的 IP:9090 端口，访问 Prometheus 的 UI 界面</p>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/V68yeDl.jpeg\" alt=\"1.jpg\" /></p>\n<h5 id=\"27-prometheus的webui\"><a class=\"anchor\" href=\"#27-prometheus的webui\">#</a> 2.7 Prometheus 的 WebUI</h5>\n<p>Prometheus 的 Web UI 提供了多个页面，以便用户可以查询指标、查看配置和状态，以及管理告警等。以下是 Prometheus Web UI 中常见的几个页面及其描述：</p>\n<ul>\n<li>\n<p>Graph: 允许用户通过 Prometheus 的查询语言 PromQL 来查询数据，并将结果以图形的形式展示。</p>\n</li>\n<li>\n<p>Alerts：允许用户查看当前配置的告警规则以及每个告警的状态。</p>\n</li>\n<li>\n<p>Status：页面包含了几个子页面，它们提供了关于 Prometheus 服务器本身的各种信息：</p>\n<ul>\n<li>\n<p>Command-Line Flags: 显示了 Prometheus 启动时使用的命令行参数。这有助于了解 Prometheus 的配置和运行状态。</p>\n</li>\n<li>\n<p>Configuration: 展示了 Prometheus 当前加载的配置文件内容，可以用来确认 Prometheus 正在使用的配置，有助于调试问题。</p>\n</li>\n<li>\n<p>Targets: 显示了 Prometheus 监控的采集目标列表，包括每个目标的健康状态。如果某个目标无法抓取，这里也会显示相关的错误信息。</p>\n</li>\n<li>\n<p>Rules: 显示所有配置的告警和记录规则。</p>\n</li>\n<li>\n<p>Service Discovery: 展示了 Prometheus 的服务发现状态，这包括了 Prometheus 如何发现抓取目标，以及它们的当前状态和元数据信息。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"三-安装grafana图形展示\"><a class=\"anchor\" href=\"#三-安装grafana图形展示\">#</a> 三、安装 Grafana 图形展示</h4>\n<h5 id=\"31-grafana介绍\"><a class=\"anchor\" href=\"#31-grafana介绍\">#</a> 3.1 Grafana 介绍</h5>\n<p>Grafana 是一款开源的数据分析和可视化工具，从 2.5.0 版本开始，Grafana 已经内置了对 Prometheus 的支持，可以直接将 Prometheus 作为数据源进行查询和展示。</p>\n<h5 id=\"32-grafana安装\"><a class=\"anchor\" href=\"#32-grafana安装\">#</a> 3.2 Grafana 安装</h5>\n<p>1、访问 Grafana 官网 ﻿https://grafana.com/grafana/download﻿，下载 Grafana</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@prom-node01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># wget https://dl.grafana.com/enterprise/release/grafana-enterprise-10.3.1-1.x86_64.rpm</span></pre></td></tr></table></figure><p>2、安装并启动 Grafana</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@prom-node01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># yum localinstall grafana-enterprise-10.3.1-1.x86_64.rpm -y</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span>root@prom-node01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># systemctl start grafana-server &amp;&amp; systemctl enable grafana-server</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">[</span>root@prom-node01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># netstat -lntp |grep 3000</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>tcp6       <span class=\"token number\">0</span>      <span class=\"token number\">0</span> :::3000                 :::*                    LISTEN      <span class=\"token number\">1787</span>/grafana</pre></td></tr></table></figure><p>3、访问 Grafana，通过﻿http://IP:3000﻿，默认 Grafana 用户名为﻿admin﻿，密码为﻿admin</p>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/kBj2SIo.jpeg\" alt=\"2.jpg\" /></p>\n<p>4、点击左边菜单选择﻿Administration--&gt;Default Preferences﻿（偏好设置）在﻿Language﻿选项中选择﻿简体中文﻿然后﻿Save﻿.</p>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/Xccw96a.png\" alt=\"1.png\" /></p>\n<h5 id=\"33-配置grafana数据源\"><a class=\"anchor\" href=\"#33-配置grafana数据源\">#</a> 3.3 配置 Grafana 数据源</h5>\n<p>1、配置 Grafana 数据源为 Prometheus，点击菜单，选择﻿Connections--&gt;Data sources--&gt; 选择 Prometheus</p>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/0CLhNrE.jpeg\" alt=\"5.jpg\" /></p>\n<p>2、导入 Grafana 默认监控 Prometheus 的 Dashboards，该 Dashboard 主要用于监控 Prometheus 服务器本身的性能和状态指标。</p>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/ZsFdwXb.jpeg\" alt=\"4.jpg\" /></p>\n<p>3、通过图形界面展示 Prometheus 的数据指标；</p>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/ZsFdwXb.jpeg\" alt=\"4.jpg\" /></p>\n<h5 id=\"34-配置prometheus监控grafana\"><a class=\"anchor\" href=\"#34-配置prometheus监控grafana\">#</a> 3.4 配置 Prometheus 监控 Grafana</h5>\n<p>Grafana 作为一个广泛使用的可视化工具，其实也需要被监控。幸运的是 Grafana 本身提供了一个内置的指标端点。通过访问 ﻿http://&lt;grafana-ip:3000/metrics﻿，你可以获取到 Grafana 的性能指标。这些指标包括了 HTTP 请求统计、内存使用情况、图形的数量，活跃用户数等指标，它们对于监控 Grafana 的健康状况非常有帮助。</p>\n<p>1、访问 Grafana 对外暴露指标的 Metrics 接口，如果没有问题，会看到一系列的指标数据</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@prom-node01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># curl -s http://prom-node01.oldxu.net:3000/metrics| tail -10</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># TYPE prometheus_template_text_expansions_total counter</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>prometheus_template_text_expansions_total <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># HELP promhttp_metric_handler_requests_in_flight Current number of scrapes being served.</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># TYPE promhttp_metric_handler_requests_in_flight gauge</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>promhttp_metric_handler_requests_in_flight <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># HELP promhttp_metric_handler_requests_total Total number of scrapes by HTTP status code.</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># TYPE promhttp_metric_handler_requests_total counter</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>promhttp_metric_handler_requests_total<span class=\"token punctuation\">&#123;</span>code<span class=\"token operator\">=</span><span class=\"token string\">\"200\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>promhttp_metric_handler_requests_total<span class=\"token punctuation\">&#123;</span>code<span class=\"token operator\">=</span><span class=\"token string\">\"500\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>promhttp_metric_handler_requests_total<span class=\"token punctuation\">&#123;</span>code<span class=\"token operator\">=</span><span class=\"token string\">\"503\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">0</span></pre></td></tr></table></figure><p>2、配置 Prometheus，将 Grafana 作为一个监控目标（target）添加到配置中。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@prom-node01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># cat /etc/prometheus/prometheus.yml</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 全局段定义</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>global:</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  scrape_interval: 15s <span class=\"token comment\"># 设置 Prometheus 抓取指标数据的间隔，默认为 15 秒。</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 抓取指定的目标</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>scrape_configs:</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  - job_name: <span class=\"token string\">\"prometheus\"</span> <span class=\"token comment\"># 定义一个抓取任务，名为 'prometheus'。</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    metrics_path: <span class=\"token string\">\"/metrics\"</span> <span class=\"token comment\"># 指定 Prometheus 从监控目标暴露的 HTTP 端点路径抓取指标，默认为 '/metrics'。</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    static_configs: <span class=\"token comment\"># 配置静态目标地址，Prometheus 将定期从如下这些地址抓取指标。</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    - targets: <span class=\"token punctuation\">[</span><span class=\"token string\">\"prom-node01.oldxu.net:9090\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  - job_name: <span class=\"token string\">\"grafana\"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    metrics_path: <span class=\"token string\">\"/metrics\"</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    static_configs:</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    - targets: <span class=\"token punctuation\">[</span><span class=\"token string\">\"prom-node01.oldxu.net:3000\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">[</span>root@prom-node01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># /etc/prometheus/promtool check config /etc/prometheus/prometheus.yml</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>Checking /etc/prometheus/prometheus.yml</pre></td></tr><tr><td data-num=\"18\"></td><td><pre> SUCCESS: /etc/prometheus/prometheus.yml is valid prometheus config <span class=\"token function\">file</span> syntax</pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">[</span>root@prom-node01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># curl -X POST http://localhost:9090/-/reload</span></pre></td></tr></table></figure><p>3、访问 Prometheus，在 Status 中的 Targets 页面，能看到新添加的 grafana 目标；如果 State 显示 UP，说明 Prometheus 正在从 Grafana 抓取指标。</p>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/Wh5m6k9.jpeg\" alt=\"8.jpg\" /></p>\n<p>4、接下来可以在 Grafana 中创建一个（Dashboard），也可以使用之前配置 Prometheus 导入的 Grafana 模板，这样就可以直观地展示被监控的 Grafana 服务状态；</p>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/9IFFRtb.jpeg\" alt=\"7.jpg\" /></p>\n<h4 id=\"四-配置prometheus监控node节点\"><a class=\"anchor\" href=\"#四-配置prometheus监控node节点\">#</a> 四、配置 Prometheus 监控 Node 节点</h4>\n<h5 id=\"41-如何监控node节点\"><a class=\"anchor\" href=\"#41-如何监控node节点\">#</a> 4.1 如何监控 Node 节点</h5>\n<p>监控节点（如服务器或者虚拟机）通常涉及收集硬件和操作系统层面的指标，比如 CPU 使用率、内存占用、磁盘 I/O、网络流量等。但是这些指标并不能直接被 Prometheus 抓取，因此我们需要借助 Node exporter 将对应的指标转为 Prometheus 能够兼容的指标格式，并对外提供 HTTP 接口暴露给 Prometheus 进行指标抓取。</p>\n<p><strong>监控地址规划：</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">IP 地址</th>\n<th style=\"text-align:center\">主机名名称</th>\n<th style=\"text-align:center\">系统版本</th>\n<th style=\"text-align:center\">内核版本</th>\n<th style=\"text-align:center\">CPU</th>\n<th style=\"text-align:center\">内存</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">192.168.40.221</td>\n<td style=\"text-align:center\"><a href=\"http://prom-node01.oldxu.net\">prom-node01.oldxu.net</a></td>\n<td style=\"text-align:center\">Centos7.9</td>\n<td style=\"text-align:center\">3.10.0-957.el7.x86_64</td>\n<td style=\"text-align:center\">2Core</td>\n<td style=\"text-align:center\">2G</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">192.168.40.222</td>\n<td style=\"text-align:center\"><a href=\"http://prom-node02.oldxu.net\">prom-node02.oldxu.net</a></td>\n<td style=\"text-align:center\">Centos7.9</td>\n<td style=\"text-align:center\">3.10.0-957.el7.x86_64</td>\n<td style=\"text-align:center\">2Core</td>\n<td style=\"text-align:center\">2G</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">192.168.40.223</td>\n<td style=\"text-align:center\"><a href=\"http://prom-node03.oldxu.net\">prom-node03.oldxu.net</a></td>\n<td style=\"text-align:center\">Centos7.9</td>\n<td style=\"text-align:center\">3.10.0-957.el7.x86_64</td>\n<td style=\"text-align:center\">2Core</td>\n<td style=\"text-align:center\">2G</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"42-安装node_exporter\"><a class=\"anchor\" href=\"#42-安装node_exporter\">#</a> 4.2 安装 node_exporter</h5>\n<p>1、访问 Node-exporter 的 github，获取 Node-exporter 的下载地址， ﻿https://github.com/prometheus/node_exporter/releases/</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@prom-node01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># wget https://github.com/prometheus/node_exporter/releases/download/v1.7.0/node_exporter-1.7.0.linux-amd64.tar.gz</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 加速地址</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">[</span>root@prom-node01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># wget https://mirror.ghproxy.com/https://github.com/prometheus/node_exporter/releases/download/v1.7.0/node_exporter-1.7.0.linux-amd64.tar.gz</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 推送给其他节点</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">i</span> <span class=\"token keyword\">in</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">222</span><span class=\"token punctuation\">..</span><span class=\"token number\">225</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token function\">scp</span> node_exporter-1.7.0.linux-amd64.tar.gz root@192.168.40.<span class=\"token variable\">$i</span>:~</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">done</span></pre></td></tr></table></figure><p>2、解压 node-exporter</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@prom-node01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># tar xf node_exporter-1.7.0.linux-amd64.tar.gz -C /etc</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span>root@prom-node01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># ln -s /etc/node_exporter-1.7.0.linux-amd64/ /etc/node_exporter</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">[</span>root@prom-node01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># ll /etc/node_exporter/</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>total <span class=\"token number\">19476</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>-rw-r--r-- <span class=\"token number\">1</span> <span class=\"token number\">1001</span> <span class=\"token number\">1002</span>    <span class=\"token number\">11357</span> Nov <span class=\"token number\">13</span> 08:02 LICENSE</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>-rwxr-xr-x <span class=\"token number\">1</span> <span class=\"token number\">1001</span> <span class=\"token number\">1002</span> <span class=\"token number\">19925095</span> Nov <span class=\"token number\">13</span> 07:54 node_exporter</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>-rw-r--r-- <span class=\"token number\">1</span> <span class=\"token number\">1001</span> <span class=\"token number\">1002</span>      <span class=\"token number\">463</span> Nov <span class=\"token number\">13</span> 08:02 NOTICE</pre></td></tr></table></figure><h5 id=\"43-配置node_exporter\"><a class=\"anchor\" href=\"#43-配置node_exporter\">#</a> 4.3 配置 node_exporter</h5>\n<p>启动 Node Exporter 即可开始进行指标采集，它默认启用了一些常见的收集器以监控 CPU、内存、网络等关键指标。然而，由于每个操作系统对收集器的支持程度不同，Node Exporter 也提供了一些 &quot;默认未启用的收集器&quot;。我们可以根据监控需求，通过特定的参数来启用这些收集器。</p>\n<ul>\n<li>要禁用默认激活的收集器，可以使用参数 ﻿--no-collector.<name></li>\n<li>要启用默认未激活的收集器，可以使用参数﻿--collector.<name></li>\n</ul>\n<p>如果只想启动某些特定的收集器，可以使用 ﻿--collector.disable-defaults﻿标志禁用所有默认的，然后在指定具体要启用收集器 ﻿--collector.&lt;name﻿ 来进行收集。</p>\n<p><em>默认关闭一些收集器的原因在于，有些指标采集需要占用过多资源开销、太重、太慢；所以谨慎开启；</em></p>\n<p>1、例如，禁止默认启动的 arp 的采集</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 直接启动会发现有 arp 采集</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span>root@prom-node01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># /etc/node_exporter/node_exporter</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">..</span>.</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token assign-left variable\">ts</span><span class=\"token operator\">=</span><span class=\"token number\">2024</span>-02-22T13:21:35.150Z <span class=\"token assign-left variable\">caller</span><span class=\"token operator\">=</span>node_exporter.go:117 <span class=\"token assign-left variable\">level</span><span class=\"token operator\">=</span>info <span class=\"token assign-left variable\">collector</span><span class=\"token operator\">=</span>arp</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># 禁用 arp 收集器，就看不到了</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">[</span>root@prom-node01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># /etc/node_exporter/node_exporter --no-collector.arp</span></pre></td></tr></table></figure><p>2、启用默认未激活的﻿tcpstat﻿收集器</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@prom-node01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># /etc/node_exporter/node_exporter</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">[</span>root@prom-node01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># /etc/node_exporter/node_exporter --collector.tcpstat</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">..</span>.</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token assign-left variable\">ts</span><span class=\"token operator\">=</span><span class=\"token number\">2024</span>-02-22T13:23:34.296Z <span class=\"token assign-left variable\">caller</span><span class=\"token operator\">=</span>node_exporter.go:117 <span class=\"token assign-left variable\">level</span><span class=\"token operator\">=</span>info <span class=\"token assign-left variable\">collector</span><span class=\"token operator\">=</span>tcpstat</pre></td></tr></table></figure><p>3、也可以禁用所有收集器，仅启用那些只想启用的收集器</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@prom-node01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># /etc/node_exporter/node_exporter --collector.disable-defaults --collector.cpu --collector.meminfo --collector.diskstats --collector.netstat</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token assign-left variable\">ts</span><span class=\"token operator\">=</span><span class=\"token number\">2024</span>-02-22T13:25:37.969Z <span class=\"token assign-left variable\">caller</span><span class=\"token operator\">=</span>node_exporter.go:192 <span class=\"token assign-left variable\">level</span><span class=\"token operator\">=</span>info <span class=\"token assign-left variable\">msg</span><span class=\"token operator\">=</span><span class=\"token string\">\"Starting node_exporter\"</span> <span class=\"token assign-left variable\">version</span><span class=\"token operator\">=</span><span class=\"token string\">\"(version=1.7.0, branch=HEAD, revision=7333465abf9efba81876303bb57e6fadb946041b)\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token assign-left variable\">ts</span><span class=\"token operator\">=</span><span class=\"token number\">2024</span>-02-22T13:25:37.969Z <span class=\"token assign-left variable\">caller</span><span class=\"token operator\">=</span>node_exporter.go:193 <span class=\"token assign-left variable\">level</span><span class=\"token operator\">=</span>info <span class=\"token assign-left variable\">msg</span><span class=\"token operator\">=</span><span class=\"token string\">\"Build context\"</span> <span class=\"token assign-left variable\">build_context</span><span class=\"token operator\">=</span><span class=\"token string\">\"(go=go1.21.4, platform=linux/amd64, user=root@35918982f6d8, date=20231112-23:53:35, tags=netgo osusergo static_build)\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token assign-left variable\">ts</span><span class=\"token operator\">=</span><span class=\"token number\">2024</span>-02-22T13:25:37.969Z <span class=\"token assign-left variable\">caller</span><span class=\"token operator\">=</span>node_exporter.go:195 <span class=\"token assign-left variable\">level</span><span class=\"token operator\">=</span>warn <span class=\"token assign-left variable\">msg</span><span class=\"token operator\">=</span><span class=\"token string\">\"Node Exporter is running as root user. This exporter is designed to run as unprivileged user, root is not required.\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token assign-left variable\">ts</span><span class=\"token operator\">=</span><span class=\"token number\">2024</span>-02-22T13:25:37.970Z <span class=\"token assign-left variable\">caller</span><span class=\"token operator\">=</span>diskstats_common.go:111 <span class=\"token assign-left variable\">level</span><span class=\"token operator\">=</span>info <span class=\"token assign-left variable\">collector</span><span class=\"token operator\">=</span>diskstats <span class=\"token assign-left variable\">msg</span><span class=\"token operator\">=</span><span class=\"token string\">\"Parsed flag --collector.diskstats.device-exclude\"</span> <span class=\"token assign-left variable\">flag</span><span class=\"token operator\">=</span>^<span class=\"token punctuation\">(</span>ram<span class=\"token operator\">|</span>loop<span class=\"token operator\">|</span>fd<span class=\"token operator\">|</span><span class=\"token punctuation\">(</span>h<span class=\"token operator\">|</span>s<span class=\"token operator\">|</span><span class=\"token function\">v</span><span class=\"token operator\">|</span>xv<span class=\"token punctuation\">)</span>d<span class=\"token punctuation\">[</span>a-z<span class=\"token punctuation\">]</span><span class=\"token operator\">|</span>nvme<span class=\"token punctuation\">\\</span>d+n<span class=\"token punctuation\">\\</span>d+p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">\\</span>d+$</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token assign-left variable\">ts</span><span class=\"token operator\">=</span><span class=\"token number\">2024</span>-02-22T13:25:37.970Z <span class=\"token assign-left variable\">caller</span><span class=\"token operator\">=</span>node_exporter.go:110 <span class=\"token assign-left variable\">level</span><span class=\"token operator\">=</span>info <span class=\"token assign-left variable\">msg</span><span class=\"token operator\">=</span><span class=\"token string\">\"Enabled collectors\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token assign-left variable\">ts</span><span class=\"token operator\">=</span><span class=\"token number\">2024</span>-02-22T13:25:37.970Z <span class=\"token assign-left variable\">caller</span><span class=\"token operator\">=</span>node_exporter.go:117 <span class=\"token assign-left variable\">level</span><span class=\"token operator\">=</span>info <span class=\"token assign-left variable\">collector</span><span class=\"token operator\">=</span>cpu</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token assign-left variable\">ts</span><span class=\"token operator\">=</span><span class=\"token number\">2024</span>-02-22T13:25:37.970Z <span class=\"token assign-left variable\">caller</span><span class=\"token operator\">=</span>node_exporter.go:117 <span class=\"token assign-left variable\">level</span><span class=\"token operator\">=</span>info <span class=\"token assign-left variable\">collector</span><span class=\"token operator\">=</span>diskstats</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token assign-left variable\">ts</span><span class=\"token operator\">=</span><span class=\"token number\">2024</span>-02-22T13:25:37.970Z <span class=\"token assign-left variable\">caller</span><span class=\"token operator\">=</span>node_exporter.go:117 <span class=\"token assign-left variable\">level</span><span class=\"token operator\">=</span>info <span class=\"token assign-left variable\">collector</span><span class=\"token operator\">=</span>meminfo</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token assign-left variable\">ts</span><span class=\"token operator\">=</span><span class=\"token number\">2024</span>-02-22T13:25:37.970Z <span class=\"token assign-left variable\">caller</span><span class=\"token operator\">=</span>node_exporter.go:117 <span class=\"token assign-left variable\">level</span><span class=\"token operator\">=</span>info <span class=\"token assign-left variable\">collector</span><span class=\"token operator\">=</span>netstat</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token assign-left variable\">ts</span><span class=\"token operator\">=</span><span class=\"token number\">2024</span>-02-22T13:25:37.970Z <span class=\"token assign-left variable\">caller</span><span class=\"token operator\">=</span>tls_config.go:274 <span class=\"token assign-left variable\">level</span><span class=\"token operator\">=</span>info <span class=\"token assign-left variable\">msg</span><span class=\"token operator\">=</span><span class=\"token string\">\"Listening on\"</span> <span class=\"token assign-left variable\">address</span><span class=\"token operator\">=</span><span class=\"token punctuation\">[</span>::<span class=\"token punctuation\">]</span>:9100</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token assign-left variable\">ts</span><span class=\"token operator\">=</span><span class=\"token number\">2024</span>-02-22T13:25:37.970Z <span class=\"token assign-left variable\">caller</span><span class=\"token operator\">=</span>tls_config.go:277 <span class=\"token assign-left variable\">level</span><span class=\"token operator\">=</span>info <span class=\"token assign-left variable\">msg</span><span class=\"token operator\">=</span><span class=\"token string\">\"TLS is disabled.\"</span> <span class=\"token assign-left variable\">http2</span><span class=\"token operator\">=</span>false <span class=\"token assign-left variable\">address</span><span class=\"token operator\">=</span><span class=\"token punctuation\">[</span>::<span class=\"token punctuation\">]</span>:9100</pre></td></tr></table></figure><h5 id=\"44-启动node_exporter\"><a class=\"anchor\" href=\"#44-启动node_exporter\">#</a> 4.4 启动 node_exporter</h5>\n<p>1、配置 system 管理 Prometheus 启动和停止</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@prom-node01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># cat /usr/lib/systemd/system/node_exporter.service</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span>Unit<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token assign-left variable\">Description</span><span class=\"token operator\">=</span>node_exporter</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token assign-left variable\">Documentation</span><span class=\"token operator\">=</span>https://prometheus.io/</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token assign-left variable\">After</span><span class=\"token operator\">=</span>network.target</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">[</span>Service<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token assign-left variable\">ExecStart</span><span class=\"token operator\">=</span>/etc/node_exporter/node_exporter <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  --web.listen-address<span class=\"token operator\">=</span>:9100 <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  --web.max-requests<span class=\"token operator\">=</span><span class=\"token number\">40</span> <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token parameter variable\">--collector.mountstats</span> <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token parameter variable\">--collector.systemd</span> <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token parameter variable\">--collector.ethtool</span> <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token parameter variable\">--collector.tcpstat</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token assign-left variable\">ExecReload</span><span class=\"token operator\">=</span>/bin/kill <span class=\"token parameter variable\">-HUP</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token assign-left variable\">TimeoutStopSec</span><span class=\"token operator\">=</span>20s</pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token assign-left variable\">Restart</span><span class=\"token operator\">=</span>always</pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">[</span>Install<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token assign-left variable\">WantedBy</span><span class=\"token operator\">=</span>multi-user.target</pre></td></tr></table></figure><p>2、启动 node-exporter</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@prom-node01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># systemctl daemon-reload</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span>root@prom-node01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># systemctl start node_exporter</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">[</span>root@prom-node01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># netstat -lntp|grep 9100</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>tcp6       <span class=\"token number\">0</span>      <span class=\"token number\">0</span> :::9100                 :::*                    LISTEN      <span class=\"token number\">6340</span>/node_exporter</pre></td></tr></table></figure><p>3、访问对应的 metrics，验证是否能采集到数据</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@prom-node01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># curl -s http://localhost:9100/metrics |head -10</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># HELP go_gc_duration_seconds A summary of the pause duration of garbage collection cycles.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># TYPE go_gc_duration_seconds summary</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>go_gc_duration_seconds<span class=\"token punctuation\">&#123;</span>quantile<span class=\"token operator\">=</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">3</span>.066e-05</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>go_gc_duration_seconds<span class=\"token punctuation\">&#123;</span>quantile<span class=\"token operator\">=</span><span class=\"token string\">\"0.25\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">3</span>.523e-05</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>go_gc_duration_seconds<span class=\"token punctuation\">&#123;</span>quantile<span class=\"token operator\">=</span><span class=\"token string\">\"0.5\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">3</span>.7351e-05</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>go_gc_duration_seconds<span class=\"token punctuation\">&#123;</span>quantile<span class=\"token operator\">=</span><span class=\"token string\">\"0.75\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">3</span>.9952e-05</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>go_gc_duration_seconds<span class=\"token punctuation\">&#123;</span>quantile<span class=\"token operator\">=</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">&#125;</span> <span class=\"token number\">0.000122787</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>go_gc_duration_seconds_sum <span class=\"token number\">0.000496506</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>go_gc_duration_seconds_count <span class=\"token number\">11</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># HELP go_goroutines Number of goroutines that currently exist.</span></pre></td></tr></table></figure><h5 id=\"45-配置prometheus\"><a class=\"anchor\" href=\"#45-配置prometheus\">#</a> 4.5 配置 Prometheus</h5>\n<p>1、修改 Prometheus 配置，添加新的 Job 分组，然后将对应的节点纳入监控中；</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@prom-node01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># cat /etc/prometheus/prometheus.yml</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 全局段定义</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>global:</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  scrape_interval: 15s <span class=\"token comment\"># 设置 Prometheus 抓取指标数据的间隔，默认为 15 秒。</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 抓取指定的目标</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>scrape_configs:</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  - job_name: <span class=\"token string\">\"prometheus\"</span> <span class=\"token comment\"># 定义一个抓取任务，名为 'prometheus'。</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    metrics_path: <span class=\"token string\">\"/metrics\"</span> <span class=\"token comment\"># 指定 Prometheus 从监控目标暴露的 HTTP 端点路径抓取指标，默认为 '/metrics'。</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    static_configs: <span class=\"token comment\"># 配置静态目标地址，Prometheus 将定期从如下这些地址抓取指标。</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    - targets: <span class=\"token punctuation\">[</span><span class=\"token string\">\"prom-node01.oldxu.net:9090\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  - job_name: <span class=\"token string\">\"grafana\"</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    metrics_path: <span class=\"token string\">\"/metrics\"</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    static_configs:</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    - targets: <span class=\"token punctuation\">[</span><span class=\"token string\">\"prom-node01.oldxu.net:3000\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  - job_name: <span class=\"token string\">\"node_exporter\"</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    metrics_path: <span class=\"token string\">\"/metrics\"</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    static_configs:</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    - targets: <span class=\"token punctuation\">[</span><span class=\"token string\">\"prom-node01.oldxu.net:9100\"</span>,<span class=\"token string\">\"prom-node02.oldxu.net:9100\"</span>,<span class=\"token string\">\"prom-node03.oldxu.net:9100\"</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>2、重新加载 Prometheus</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@prom-node01 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># curl -v -X POST http://localhost:9090/-/reload</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>* About to connect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> to localhost port <span class=\"token number\">9090</span> <span class=\"token punctuation\">(</span><span class=\"token comment\">#0)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>*   Trying ::1<span class=\"token punctuation\">..</span>.</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>* Connected to localhost <span class=\"token punctuation\">(</span>::1<span class=\"token punctuation\">)</span> port <span class=\"token number\">9090</span> <span class=\"token punctuation\">(</span><span class=\"token comment\">#0)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">></span> POST /-/reload HTTP/1.1</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">></span> User-Agent: curl/7.29.0</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">></span> Host: localhost:9090</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">></span> Accept: */*</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">></span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">&lt;</span> HTTP/1.1 <span class=\"token number\">200</span> OK</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token operator\">&lt;</span> Date: Thu, <span class=\"token number\">22</span> Feb <span class=\"token number\">2024</span> <span class=\"token number\">13</span>:35:56 GMT</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token operator\">&lt;</span> Content-Length: <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token operator\">&lt;</span> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>* Connection <span class=\"token comment\">#0 to host localhost left intact</span></pre></td></tr></table></figure><p>3、检查 Prometheus 是否已将对应节点纳入监控（点击 Status--&gt;Targets）</p>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/ClR3Pyh.jpeg\" alt=\"1.jpg\" /></p>\n<h5 id=\"46-导入grafana模板\"><a class=\"anchor\" href=\"#46-导入grafana模板\">#</a> 4.6 导入 Grafana 模板</h5>\n<p>在 Grafana 的官方插件库中，有很多 Node-exporter 模板。其中相对受欢的模板的 ID 是： ﻿11074、1860﻿。</p>\n<ul>\n<li>11074﻿：模板包括了 CPU、内存、磁盘、网络、温度传感器等指标（常用）。</li>\n<li>1860﻿：模板包括 CPU、内存、磁盘、网络等。这运行状况，及时发现潜在问题并进行调优。</li>\n</ul>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/oqN9oVU.jpeg\" alt=\"2.jpg\" /></p>\n<h4 id=\"五-node_exporter常用指标\"><a class=\"anchor\" href=\"#五-node_exporter常用指标\">#</a> 五、node_exporter 常用指标</h4>\n<h5 id=\"51-cpu与内存相关指标\"><a class=\"anchor\" href=\"#51-cpu与内存相关指标\">#</a> 5.1 CPU 与内存相关指标</h5>\n<p>1、CPU 负载相关核心指标</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">指标名称</th>\n<th style=\"text-align:center\">指标类型</th>\n<th style=\"text-align:center\">指标含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">node_load1</td>\n<td style=\"text-align:center\">gauge</td>\n<td style=\"text-align:center\">过去 1 分钟的系统平均负载。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">node_load5</td>\n<td style=\"text-align:center\">gauge</td>\n<td style=\"text-align:center\">过去 5 分钟的系统平均负载。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">node_load15</td>\n<td style=\"text-align:center\">gauge</td>\n<td style=\"text-align:center\">过去 1 5 分钟的系统平均负载。</td>\n</tr>\n</tbody>\n</table>\n<p>2、CPU 使用相关核心指标</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">指标名称</th>\n<th style=\"text-align:center\">指标类型</th>\n<th style=\"text-align:center\">指标含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">node_cpu_seconds_total</td>\n<td style=\"text-align:center\">Counter</td>\n<td style=\"text-align:center\">CPU 在不同模式下使用的时间（以秒为单位）。</td>\n</tr>\n</tbody>\n</table>\n<p>3、内存相关核心指标</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">指标名称</th>\n<th style=\"text-align:center\">指标类型</th>\n<th style=\"text-align:center\">指标含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">node_memory_MemTotal_bytes</td>\n<td style=\"text-align:center\">gauge</td>\n<td style=\"text-align:center\">系统总内存量（以字节为单位）。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">node_memory_MemAvailable_bytes</td>\n<td style=\"text-align:center\">gauge</td>\n<td style=\"text-align:center\">系统当前可用的内存量（以字节为单位）。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">node_memory_Cached_bytes</td>\n<td style=\"text-align:center\">gauge</td>\n<td style=\"text-align:center\">系统缓存使用的内存（以字节为单位）。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">node_memory_Buffers_bytes</td>\n<td style=\"text-align:center\">gauge</td>\n<td style=\"text-align:center\">用于缓冲使用的内存（以字节为单位）。</td>\n</tr>\n</tbody>\n</table>\n<p>计算可用内存百分比： node_memory_MemAvailable_bytes /node_memory_MemTotal_bytes * 100</p>\n<p>计算已用内存百分比：(node_memory_MemTotal_bytes - node_memory_MemAvailable_bytes) /node_memory_MemTotal_bytes *<br />\n100</p>\n<p>4、SWAP 相关核心指标</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">指标名称</th>\n<th style=\"text-align:center\">指标类型</th>\n<th style=\"text-align:center\">指标含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">node_memory_SwapTotal_bytes</td>\n<td style=\"text-align:center\">gauge</td>\n<td style=\"text-align:center\">系统交换空间总量（以字节为单位）。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">node_memory_SwapFree_bytes</td>\n<td style=\"text-align:center\">gauge</td>\n<td style=\"text-align:center\">系统未被使用的交换空间（以字节为单位）。</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"52-磁盘与网络相关指标\"><a class=\"anchor\" href=\"#52-磁盘与网络相关指标\">#</a> 5.2 磁盘与网络相关指标</h5>\n<p>1、磁盘空间相关核心指标</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">指标名称</th>\n<th style=\"text-align:center\">指标类型</th>\n<th style=\"text-align:center\">指标含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">node_filesystem_size_bytes</td>\n<td style=\"text-align:center\">gauge</td>\n<td style=\"text-align:center\">文件系统大小（以字节为单位）。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">node_filesystem_avail_bytes</td>\n<td style=\"text-align:center\">gauge</td>\n<td style=\"text-align:center\">文件系统可用空间（以字节为单位）。</td>\n</tr>\n</tbody>\n</table>\n<p>计算可用空间百分比： node_filesystem_avail_bytes /node_filesystem_size_bytes * 100</p>\n<p>计算已用空间百分比：(node_filesystem_size_bytes - node_filesystem_avail_bytes) /node_filesystem_size_bytes * 100</p>\n<p>2、磁盘 Inode 相关核心指标</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">指标名称</th>\n<th style=\"text-align:center\">指标类型</th>\n<th style=\"text-align:center\">指标含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">node_filesystem_files</td>\n<td style=\"text-align:center\">gauge</td>\n<td style=\"text-align:center\">文件系统中 inode 能使用的总数。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">node_filesystem_files_free</td>\n<td style=\"text-align:center\">gauge</td>\n<td style=\"text-align:center\">文件系统中空闲 inode 的数量。</td>\n</tr>\n</tbody>\n</table>\n<p>计算已用的 Inode 百分比： (node_filesystem_files - node_filesystem_files_free) /node_filesystem_files * 100</p>\n<p>3、磁盘 IO 吞吐量相关核心指标</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">指标名称</th>\n<th style=\"text-align:center\">指标类型</th>\n<th style=\"text-align:left\">指标含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">node_disk_read_bytes_total</td>\n<td style=\"text-align:center\">Counter</td>\n<td style=\"text-align:left\">从给定设备读取的总字节数。（以字节为单位）。（使用 irate 可以得到每秒写入大小）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">node_disk_written_bytes_total</td>\n<td style=\"text-align:center\">Counter</td>\n<td style=\"text-align:left\">向给定设备写入的总字节数。（以字节为单位）。（使用 irate 可以得到每秒写入大小）</td>\n</tr>\n</tbody>\n</table>\n<p>4、磁盘 IOPS 相关核心指标</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">指标名称</th>\n<th style=\"text-align:center\">指标类型</th>\n<th style=\"text-align:left\">指标含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">node_disk_reads_completed_total</td>\n<td style=\"text-align:center\">Counter</td>\n<td style=\"text-align:left\">磁盘设备完成的读操作总数。（使用 irate 可以得到每秒读操作的平均数）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">node_disk_writes_completed_total</td>\n<td style=\"text-align:center\">Counter</td>\n<td style=\"text-align:left\">磁盘设备完成的写操作总数。（使用 irate 可以得到每秒读操作的平均数）</td>\n</tr>\n</tbody>\n</table>\n<p>5、网络核心指标</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">指标名称</th>\n<th style=\"text-align:center\">指标类型</th>\n<th style=\"text-align:left\">指标含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">node_network_receive_bytes_total</td>\n<td style=\"text-align:center\">Counter</td>\n<td style=\"text-align:left\">网络接口接收到的总字节数。（以字节为单位）。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">node_network_transmit_bytes_total</td>\n<td style=\"text-align:center\">Counter</td>\n<td style=\"text-align:left\">网络接口发送出去的总字节数。（以字节为单位）。</td>\n</tr>\n</tbody>\n</table>\n<p>6、连接追踪核心指标</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">指标名称</th>\n<th style=\"text-align:center\">指标类型</th>\n<th style=\"text-align:left\">指标含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">node_nf_conntrack_entries</td>\n<td style=\"text-align:center\">gauge</td>\n<td style=\"text-align:left\">系统正在跟踪的网络连接的数量。这包括所有类型的连接 TCP， UDP、ICMP 等</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">node_nf_conntrack_entries_limit</td>\n<td style=\"text-align:center\">gauge</td>\n<td style=\"text-align:left\">系统 conntrack 能够跟踪的网络连接的最大数量。读取的是 /proc/sys/net/netfilter/nf_conntrack_max，内核参数为：net.netfilter.nf_conntrack_max）</td>\n</tr>\n</tbody>\n</table>\n<p>计算连接追踪使用百分比： node_nf_conntrack_entries /node_nf_conntrack_entries_limit * 100</p>\n<h5 id=\"53-tcp与其他相关指标\"><a class=\"anchor\" href=\"#53-tcp与其他相关指标\">#</a> 5.3 TCP 与其他相关指标</h5>\n<p>1、TCP 相关核心指标</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">指标名称</th>\n<th style=\"text-align:center\">指标类型</th>\n<th style=\"text-align:left\">指标含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\" state=\"time_wait\">node_tcp_connection_states</td>\n<td style=\"text-align:center\">gauge</td>\n<td style=\"text-align:left\">当前已断开的 TCP 连接数。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\" state=\"established\">node_tcp_connection_states</td>\n<td style=\"text-align:center\">gauge</td>\n<td style=\"text-align:left\">当前建立的 TCP 连接数。</td>\n</tr>\n</tbody>\n</table>\n<p>2、文件描述符</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">指标名称</th>\n<th style=\"text-align:center\">指标类型</th>\n<th style=\"text-align:left\">指标含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">node_filefd_maximum</td>\n<td style=\"text-align:center\">gauge</td>\n<td style=\"text-align:left\">当前系统最大可用的文件描述符数量（由 fs.file-max 内核参数设定，具体读取的文件 /proc/sys/fs/file-max）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">node_filefd_allocated</td>\n<td style=\"text-align:center\">gauge</td>\n<td style=\"text-align:left\">当前系统已经分配的文件描述符的数量。</td>\n</tr>\n</tbody>\n</table>\n<p>当前文件描述符已使用百分比 ：(node_filefd_allocated /node_filefd_maximum) * 100</p>\n<p>3、系统其他指标</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">指标名称</th>\n<th style=\"text-align:center\">指标类型</th>\n<th style=\"text-align:left\">指标含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">node_time_seconds</td>\n<td style=\"text-align:center\">gauge</td>\n<td style=\"text-align:left\">当前系统的时间戳</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">node_boot_time_seconds</td>\n<td style=\"text-align:center\">gauge</td>\n<td style=\"text-align:left\">系统最后一次启动的时间戳。</td>\n</tr>\n</tbody>\n</table>\n<p>系统自启动以来，总共运行了多少天 = (node_time_seconds - node_boot_time_seconds)/ 86400</p>\n",
            "tags": [
                "Prometheus"
            ]
        }
    ]
}