<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>LinuxSre云原生 • Posts by &#34;docker&#34; tag</title>
        <link>http://ixuyong.cn</link>
        <description>专注于 Linux 运维、云计算、云原⽣等技术</description>
        <language>zh-CN</language>
        <pubDate>Wed, 14 May 2025 20:29:07 +0800</pubDate>
        <lastBuildDate>Wed, 14 May 2025 20:29:07 +0800</lastBuildDate>
        <category>DevOps</category>
        <category>Aliyun</category>
        <category>Docker</category>
        <category>ELKStack</category>
        <category>Harbor</category>
        <category>Linux</category>
        <category>rsync</category>
        <category>Kubernetes</category>
        <category>Redis</category>
        <category>MySQL</category>
        <category>Prometheus</category>
        <category>Openvpn</category>
        <category>Rabbitmq</category>
        <category>Tomcat</category>
        <category>Windows</category>
        <item>
            <guid isPermalink="true">http://ixuyong.cn/posts/1888662579.html</guid>
            <title>Containerd常用命令</title>
            <link>http://ixuyong.cn/posts/1888662579.html</link>
            <category>Docker</category>
            <pubDate>Wed, 14 May 2025 20:29:07 +0800</pubDate>
            <description><![CDATA[ &lt;h3 id=&#34;containerd常用命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#containerd常用命令&#34;&gt;#&lt;/a&gt; Containerd 常用命令&lt;/h3&gt;
&lt;h4 id=&#34;1-安装containerd&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-安装containerd&#34;&gt;#&lt;/a&gt; 1. 安装 Containerd&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;1.1 配置安装源&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;yum install wget jq psmisc vim net-tools telnet yum-utils device-mapper-persistent-data lvm2 git -y
yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;1.2 安装 docker-ce、containerd&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;yum install docker-ce containerd -y
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;可以无需启动 Docker，只需要配置和启动 Containerd 即可。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.3 配置 Containerd 所需的模块&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# cat &amp;lt;&amp;lt;EOF | sudo tee /etc/modules-load.d/containerd.conf
overlay
br_netfilter
EOF
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;1.4 加载模块&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# cat &amp;lt;&amp;lt;EOF | sudo tee /etc/sysctl.d/99-kubernetes-cri.conf
net.bridge.bridge-nf-call-iptables  = 1
net.ipv4.ip_forward                 = 1
net.bridge.bridge-nf-call-ip6tables = 1
EOF
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;1.5 配置 Containerd 所需的内核&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# cat &amp;lt;&amp;lt;EOF | sudo tee /etc/sysctl.d/99-kubernetes-cri.conf
net.bridge.bridge-nf-call-iptables  = 1
net.ipv4.ip_forward                 = 1
net.bridge.bridge-nf-call-ip6tables = 1
EOF
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;1.6 加载内核&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sysctl --system
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;1.7 生成 Containerd 的配置文件&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mkdir -p /etc/containerd
containerd config default | tee /etc/containerd/config.toml
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;1.8 更改 Containerd 的 Cgroup 和 Pause 镜像&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sed -i &#39;s#SystemdCgroup = false#SystemdCgroup = true#g&#39; /etc/containerd/config.toml
sed -i &#39;s#k8s.gcr.io/pause#registry.cn-hangzhou.aliyuncs.com/google_containers/pause#g&#39;  /etc/containerd/config.toml
sed -i &#39;s#registry.gcr.io/pause#registry.cn-hangzhou.aliyuncs.com/google_containers/pause#g&#39;  /etc/containerd/config.toml
sed -i &#39;s#registry.k8s.io/pause#registry.cn-hangzhou.aliyuncs.com/google_containers/pause#g&#39;  /etc/containerd/config.toml
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;1.9 启动 Containerd，并配置开机自启动&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;systemctl daemon-reload
systemctl enable --now containerd
systemctl status  containerd 
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;2-containerd-配置镜像加速&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-containerd-配置镜像加速&#34;&gt;#&lt;/a&gt; 2. Containerd 配置镜像加速&lt;/h4&gt;
&lt;p&gt;打开 /etc/containerd/config.toml 文件，找到 [plugins.&amp;quot;io.containerd.grpc.v1.cri&amp;quot;.registry.mirrors] 部分，添加所需的镜像源配置&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# vim /etc/containerd/config.toml
#添加以下配置镜像加速服务
[plugins.&amp;quot;io.containerd.grpc.v1.cri&amp;quot;.registry.mirrors]
  [plugins.&amp;quot;io.containerd.grpc.v1.cri&amp;quot;.registry.mirrors.&amp;quot;docker.io&amp;quot;]
    endpoint = [
      &amp;quot;https://docker.io&amp;quot;,
      &amp;quot;https://6qxc6b6n.mirror.aliyuncs.com&amp;quot;,
      &amp;quot;https://docker.m.daocloud.io&amp;quot;,
      &amp;quot;https://dockerproxy.com/&amp;quot;
    ]
  [plugins.&amp;quot;io.containerd.grpc.v1.cri&amp;quot;.registry.mirrors.&amp;quot;gcr.io&amp;quot;]
    endpoint = [
      &amp;quot;https://gcr.m.daocloud.io&amp;quot;,
      &amp;quot;https://gcr.nju.edu.cn&amp;quot;,
      &amp;quot;https://gcr.dockerproxy.com&amp;quot;
    ]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;重新启动 Containerd&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;systemctl daemon-reload
systemctl restart containerd
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;3-containerd常用操作命令实践&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-containerd常用操作命令实践&#34;&gt;#&lt;/a&gt; 3. Containerd 常用操作命令实践&lt;/h4&gt;
&lt;h5 id=&#34;31-查看containerd命名空间&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#31-查看containerd命名空间&#34;&gt;#&lt;/a&gt; &lt;strong&gt;3.1 查看 Containerd 命名空间&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;namespace 来于指定类似于工作空间的隔离区域&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@k8s-node02 ~]# ctr namespace ls 
NAME    LABELS 
default        
k8s.io         
moby 
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;32-查看containerd镜像&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#32-查看containerd镜像&#34;&gt;#&lt;/a&gt; &lt;strong&gt;3.2 查看 Containerd 镜像&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;因为没有指定 namespace，所以查看的是默认命名空间下的镜像&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ctr images ls
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;查看指定命名空间 k8s.io 下的镜像&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ctr -n k8s.io images ls
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;33-拉取containerd镜像&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#33-拉取containerd镜像&#34;&gt;#&lt;/a&gt; &lt;strong&gt;3.3 拉取 Containerd 镜像&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;拉取指定命名空间 k8s.io 镜像 pause-amd64:3.2&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; ctr -n k8s.io images pull registry.aliyuncs.com/google_containers/pause-amd64:3.2
 ctr -n k8s.io images pull docker.io/library/nginx:1.21
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;34-删除containerd镜像&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#34-删除containerd镜像&#34;&gt;#&lt;/a&gt; &lt;strong&gt;3.4 删除 containerd 镜像&lt;/strong&gt;&lt;/h5&gt;
&lt;pre&gt;&lt;code&gt;ctr -n k8s.io images rm registry.aliyuncs.com/google_containers/pause-amd64:3.2
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;35-导出containerd镜像&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#35-导出containerd镜像&#34;&gt;#&lt;/a&gt; &lt;strong&gt;3.5 导出 Containerd 镜像&lt;/strong&gt;&lt;/h5&gt;
&lt;pre&gt;&lt;code&gt;ctr -n k8s.io images export pause.tar.gz registry.aliyuncs.com/google_containers/pause-amd64:3.2
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;36-导入containerd镜像&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#36-导入containerd镜像&#34;&gt;#&lt;/a&gt; &lt;strong&gt;3.6 导入 Containerd 镜像&lt;/strong&gt;&lt;/h5&gt;
&lt;pre&gt;&lt;code&gt;ctr -n k8s.io image import pause.tar.gz
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;docker save -o 命令导出来的镜像可以用 ctr images import 导出，同理 ctr images export 导出来的镜像也可以有 docker load 还原。&lt;/em&gt;&lt;/p&gt;
&lt;h5 id=&#34;37-标记containerd镜像&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#37-标记containerd镜像&#34;&gt;#&lt;/a&gt; &lt;strong&gt;3.7 标记 Containerd 镜像&lt;/strong&gt;&lt;/h5&gt;
&lt;pre&gt;&lt;code&gt;ctr -n k8s.io images tag registry.aliyuncs.com/google_containers/pause-amd64:3.2 pause:3.2
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;38-运行containerd容器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#38-运行containerd容器&#34;&gt;#&lt;/a&gt; &lt;strong&gt;3.8 运行 Containerd 容器&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;在后台运行一个 centos 镜像的容器，名称叫做 centos_k8s&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; ctr -n k8s.io  run -d  docker.io/library/nginx:1.21 web
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;39-查看运行容器的task&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#39-查看运行容器的task&#34;&gt;#&lt;/a&gt; &lt;strong&gt;3.9 查看运行容器的 task&lt;/strong&gt;&lt;/h5&gt;
&lt;pre&gt;&lt;code&gt;ctr -n k8s.io task ls
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;310-启动指定容器task&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#310-启动指定容器task&#34;&gt;#&lt;/a&gt; 3.10 启动指定容器 task&lt;/h5&gt;
&lt;pre&gt;&lt;code&gt;ctr -n k8s.io task start -d centos_k8s
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;311-进入指定容器task&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#311-进入指定容器task&#34;&gt;#&lt;/a&gt; 3.11 进入指定容器 task&lt;/h5&gt;
&lt;pre&gt;&lt;code&gt;ctr -n k8s.io task exec --exec-id 3118 -t web /bin/bash
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;312-删除指定容器task&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#312-删除指定容器task&#34;&gt;#&lt;/a&gt; 3.12 删除指定容器 task&lt;/h5&gt;
&lt;pre&gt;&lt;code&gt;ctr -n k8s.io task rm -f web
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;313-停止指定容器task&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#313-停止指定容器task&#34;&gt;#&lt;/a&gt; 3.13 停止指定容器 task&lt;/h5&gt;
&lt;pre&gt;&lt;code&gt;ctr -n k8s.io task kill --signal 9 centos_k8s
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;314-查看容器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#314-查看容器&#34;&gt;#&lt;/a&gt; 3.14 查看容器&lt;/h5&gt;
&lt;pre&gt;&lt;code&gt;ctr -n k8s.io c list
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;315-删除容器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#315-删除容器&#34;&gt;#&lt;/a&gt; 3.15 删除容器&lt;/h5&gt;
&lt;pre&gt;&lt;code&gt;ctr -n k8s.io c rm centos
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;删除容器以前需要将 task 删除，不然会报以下错误&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@k8s-node02 ~]# ctr -n k8s.io c rm web 
ERRO[0000] failed to delete container &amp;quot;web&amp;quot;              error=&amp;quot;cannot delete a non stopped container: &amp;#123;running 0 0001-01-01 00:00:00 +0000 UTC&amp;#125;&amp;quot;
ctr: cannot delete a non stopped container: &amp;#123;running 0 0001-01-01 00:00:00 +0000 UTC&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;4-docker与containerd常用命令对比&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4-docker与containerd常用命令对比&#34;&gt;#&lt;/a&gt; 4. Docker 与 Containerd 常用命令对比&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;th&gt;docker 命令&lt;/th&gt;
&lt;th&gt;containerd 命令&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;查看本地镜像&lt;/td&gt;
&lt;td&gt;docker images&lt;/td&gt;
&lt;td&gt;ctr images ls&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;拉取镜像&lt;/td&gt;
&lt;td&gt;docker pull imagename&lt;/td&gt;
&lt;td&gt;ctr images pull imagename&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;推送镜像&lt;/td&gt;
&lt;td&gt;docker push imagename&lt;/td&gt;
&lt;td&gt;ctr images push imagename&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;给镜像打标签&lt;/td&gt;
&lt;td&gt;docker tag imagename tagname&lt;/td&gt;
&lt;td&gt;ctr images tag imagename tagname&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;导出镜像&lt;/td&gt;
&lt;td&gt;docker save filename imagename&lt;/td&gt;
&lt;td&gt;ctr images export filename imagename&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;导入镜像&lt;/td&gt;
&lt;td&gt;docker load filename&lt;/td&gt;
&lt;td&gt;ctr image import filename&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;运行并创建容器&lt;/td&gt;
&lt;td&gt;docker run [options] imagename commond&lt;/td&gt;
&lt;td&gt;ctr run [options]  imagenamecontainername&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;进入容器&lt;/td&gt;
&lt;td&gt;docker exec [options] names commond&lt;/td&gt;
&lt;td&gt;ctr task exec [options]  names commond&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;查看运行的容器&lt;/td&gt;
&lt;td&gt;docker ps&lt;/td&gt;
&lt;td&gt;ctr task list&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;删除容器&lt;/td&gt;
&lt;td&gt;docker rm [options] names&lt;/td&gt;
&lt;td&gt;1.ctr task rm -f names 2. ctr c rm -f names&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://ixuyong.cn/posts/3364424907.html</guid>
            <title>阿里云+Github构建镜像仓库</title>
            <link>http://ixuyong.cn/posts/3364424907.html</link>
            <category>Docker</category>
            <pubDate>Sat, 26 Apr 2025 16:20:14 +0800</pubDate>
            <description><![CDATA[ &lt;h3 id=&#34;阿里云github构建镜像仓库解决-k8sgcrio访问&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#阿里云github构建镜像仓库解决-k8sgcrio访问&#34;&gt;#&lt;/a&gt; 阿里云 + github 构建镜像仓库解决 k8s.gcr.io 访问&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://xn--k8s-xi9d897o.gcr.io/&#34;&gt;由于 k8s.gcr.io/&lt;/a&gt; 镜像仓库位于国外，国内使用 kubeadm 构建 docker 集群时无法访问相应的 docker 镜像。&lt;/p&gt;
&lt;h4 id=&#34;1-登录github创建仓库&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-登录github创建仓库&#34;&gt;#&lt;/a&gt; &lt;strong&gt;1.&lt;/strong&gt; 登录 Github 创建仓库&lt;/h4&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://wp-cdn.4ce.cn/v2/vgZkKBC.png&#34; alt=&#34;1.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://wp-cdn.4ce.cn/v2/VnJlhBE.png&#34; alt=&#34;2.png&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;2-创建dockerfile&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-创建dockerfile&#34;&gt;#&lt;/a&gt; &lt;strong&gt;2.&lt;/strong&gt; 创建 Dockerfile&lt;/h4&gt;
&lt;p&gt;仓库下面创建一个 Dockerfile，以 ingress-nginx-controller 为例下的 dockerfile 内容如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@manager ~]# mkdir ingress-nginx-controller
[root@manager ~]# cd ingress-nginx-controller/
[root@manager ingress-nginx-controller]# cat Dockerfile 
FROM registry.k8s.io/ingress-nginx/controller:v1.12.1 
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;3-ssh免密登录github&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-ssh免密登录github&#34;&gt;#&lt;/a&gt; 3. SSH 免密登录 GitHub&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;[root@manager ingress-nginx-controller]# ssh-keygen
[root@manager ingress-nginx-controller]# cat ~/.ssh/id_rsa.pub
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;进入&lt;em&gt; GitHub&lt;/em&gt; 的个人设置，找到【&lt;em&gt;SSH and GPG keys&lt;/em&gt;】，然后点击新增 SSH Key，进入如下界面，&lt;em&gt;title&lt;/em&gt; 输入你对于当前&lt;em&gt; SSH key&lt;/em&gt; 的备注，下面的&lt;em&gt; key&lt;/em&gt; 就粘贴上一步生成的&lt;em&gt; id_rsa.pub&lt;/em&gt; 内的内容&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://wp-cdn.4ce.cn/v2/3djSHRS.png&#34; alt=&#34;3.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://wp-cdn.4ce.cn/v2/8gVcVu4.png&#34; alt=&#34;5.png&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;4-推送dockerfile至github&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4-推送dockerfile至github&#34;&gt;#&lt;/a&gt; 4. 推送 Dockerfile 至 Github&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;[root@manager ingress-nginx-controller]# yum install git -y
[root@manager ingress-nginx-controller]# git --version
[root@manager ingress-nginx-controller]# git config --global user.email &amp;quot;373370405@qq.com&amp;quot;
[root@manager ingress-nginx-controller]# git config --global color.ui true
[root@manager ingress-nginx-controller]# git init
[root@manager ingress-nginx-controller]# git add .
[root@manager ingress-nginx-controller]# git commit -m &amp;quot;first commit&amp;quot;
[root@manager ingress-nginx-controller]# git branch -M main
[root@manager ingress-nginx-controller]# git remote add origin git@github.com:xyapples/ingress-nginx-controller.git   #添加远程仓库
[root@manager ingress-nginx-controller]# git remote -v
[root@manager ingress-nginx-controller]# git push -u origin main
[root@manager ingress-nginx-controller]# git remote remove origin  #移除远程仓库
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://wp-cdn.4ce.cn/v2/N3t49eX.png&#34; alt=&#34;6.png&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;5-登录阿里云创建镜像仓库&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5-登录阿里云创建镜像仓库&#34;&gt;#&lt;/a&gt; &lt;strong&gt;5.&lt;/strong&gt; 登录阿里云创建镜像仓库&lt;/h4&gt;
&lt;p&gt;登录阿里云镜像：&lt;a href=&#34;https://cr.console.aliyun.com/%EF%BC%8C%E5%88%9B%E5%BB%BA%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93%EF%BC%9A&#34;&gt;https://cr.console.aliyun.com/，创建镜像仓库：&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://wp-cdn.4ce.cn/v2/1zFqa35.png&#34; alt=&#34;7.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://wp-cdn.4ce.cn/v2/PhzoeeT.png&#34; alt=&#34;1.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://wp-cdn.4ce.cn/v2/iYAbB0x.png&#34; alt=&#34;2.png&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;6-构建镜像&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#6-构建镜像&#34;&gt;#&lt;/a&gt; 6. 构建镜像&lt;/h4&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://wp-cdn.4ce.cn/v2/KD3DI7J.png&#34; alt=&#34;3.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://wp-cdn.4ce.cn/v2/WiwNBRK.png&#34; alt=&#34;4.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://wp-cdn.4ce.cn/v2/155pUrE.png&#34; alt=&#34;7.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://wp-cdn.4ce.cn/v2/155pUrE.png&#34; alt=&#34;7.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://wp-cdn.4ce.cn/v2/AU1371X.png&#34; alt=&#34;8.png&#34; /&gt;&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
