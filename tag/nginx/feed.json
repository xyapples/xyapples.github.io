{
    "version": "https://jsonfeed.org/version/1",
    "title": "LinuxSre云原生 • All posts by \"nginx\" tag",
    "description": "专注于 Linux 运维、云计算、云原⽣等技术",
    "home_page_url": "http://ixuyong.cn",
    "items": [
        {
            "id": "http://ixuyong.cn/posts/3682494305.html",
            "url": "http://ixuyong.cn/posts/3682494305.html",
            "title": "Nginx搭建流行架构",
            "date_published": "2025-08-23T13:50:04.000Z",
            "content_html": "<h3 id=\"nginx搭建流行架构\"><a class=\"anchor\" href=\"#nginx搭建流行架构\">#</a> Nginx 搭建流行架构</h3>\n",
            "tags": [
                "Nginx"
            ]
        },
        {
            "id": "http://ixuyong.cn/posts/3682494305.html",
            "url": "http://ixuyong.cn/posts/3682494305.html",
            "title": "Nginx常用模块",
            "date_published": "2025-08-22T13:50:04.000Z",
            "content_html": "<h3 id=\"nginx常用模块\"><a class=\"anchor\" href=\"#nginx常用模块\">#</a> Nginx 常用模块</h3>\n",
            "tags": [
                "Nginx"
            ]
        },
        {
            "id": "http://ixuyong.cn/posts/1697351306.html",
            "url": "http://ixuyong.cn/posts/1697351306.html",
            "title": "Nginx基础Http协议",
            "date_published": "2025-08-22T13:44:55.000Z",
            "content_html": "<h3 id=\"nginx基础http协议\"><a class=\"anchor\" href=\"#nginx基础http协议\">#</a> Nginx 基础 Http 协议</h3>\n<h4 id=\"1http协议介绍\"><a class=\"anchor\" href=\"#1http协议介绍\">#</a> 1.Http 协议介绍</h4>\n<h5 id=\"11-什么是url\"><a class=\"anchor\" href=\"#11-什么是url\">#</a> <strong>1.1</strong> 什么是 URL</h5>\n<p>通常我们在访问一个网站页面时，请求到的内容通称为 &quot;资源&quot;。而 “资源 “这一概念非常宽泛，它可以是一份文档，一张图片，或所有其他你能够想到的格式。每个资源都由一个 URI 来进行标识；比如: <a href=\"http://fj.ixuyong.cn/public/tt.jpeg%E8%BF%99%E6%A0%B7%E7%9A%84%E8%B5%84%E6%BA%90%EF%BC%8C%E6%88%91%E4%BB%AC%E4%BC%9A%E5%B0%86%E8%AF%A5%E5%85%B6%E7%A7%B0%E4%B8%BAURL%E5%9C%B0%E5%9D%80%EF%BC%9B%E7%99%BE%E5%BA%A6%E7%99%BE%E7%A7%91%E8%A7%A3%E9%87%8A%EF%BC%9AURL%E7%AE%80%E7%A7%B0%E7%BB%9F%E4%B8%80%E8%B5%84%E6%BA%90%E5%AE%9A%E4%BD%8D%E7%AC%A6%EF%BC%8C%E7%94%A8%E6%9D%A5%E5%94%AF%E4%B8%80%E5%9C%B0%E6%A0%87%E8%AF%86%E4%B8%87%E7%BB%B4%E7%BD%91%E4%B8%AD%E7%9A%84%E6%9F%90%E4%B8%80%E4%B8%AA%E8%B5%84%E6%BA%90%E3%80%82URL%E7%94%B1%E5%8D%8F%E8%AE%AE%E3%80%81%E4%B8%BB%E6%9C%BA%E5%90%8D%E7%A7%B0%E3%80%81%E7%AB%AF%E5%8F%A3%E4%BB%A5%E5%8F%8A%E6%96%87%E4%BB%B6%E5%90%8D%E5%87%A0%E9%83%A8%E5%88%86%E6%9E%84%E6%88%90%E3%80%82\">http://fj.ixuyong.cn/public/tt.jpeg 这样的资源，我们会将该其称为 URL 地址；百度百科解释：URL 简称统一资源定位符，用来唯一地标识万维网中的某一个资源。URL 由协议、主机名称、端口以及文件名几部分构成。</a></p>\n<h5 id=\"12-什么是html\"><a class=\"anchor\" href=\"#12-什么是html\">#</a> <strong>1.2</strong> 什么是 HTML</h5>\n<p>Html 简称 Web Page，一个完整的 Html 页面可能会包含很多个 URL 的资源。(反之：我们也可以理解一个 HTML 文件是由多个不同的 URL 资源拼接而成的。)</p>\n<h5 id=\"13-什么是http\"><a class=\"anchor\" href=\"#13-什么是http\">#</a> <strong>1.3</strong> 什么是 HTTP</h5>\n<p>HTTP (Hyper Text Transfer Protocol) 中文名为超文本传输协议。是一种能够获取如 HTML 这样网络资源的通讯协议。它是在 Web 上进行数据交换的基础。HTTP 的概述参考 URL 简单理解：HTTP 协议就是将用户请求的 HTML 页面从一台 Web 服务器传输到客户端浏览器的一种协议。</p>\n<h5 id=\"14-url-html-http之间关系\"><a class=\"anchor\" href=\"#14-url-html-http之间关系\">#</a> 1.4 URL、HTML、HTTP 之间关系</h5>\n<p>一个完整的 HTML 页面是由多个不同的 Url 资源组成的；而 HTTP 协议主要是用来传输这种 HTML 页面的；</p>\n<h4 id=\"2http工作原理\"><a class=\"anchor\" href=\"#2http工作原理\">#</a> 2.Http 工作原理</h4>\n<h5 id=\"21-图解http工作原理\"><a class=\"anchor\" href=\"#21-图解http工作原理\">#</a> 2.1 图解 HTTP 工作原理</h5>\n<p>我们详细的了解下 HTTP 的工作原理，我们到底是如何获取到服务器上的页面。</p>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/5p0uvcC.png\" alt=\"3.png\" /></p>\n<h5 id=\"22-http工作原理总结\"><a class=\"anchor\" href=\"#22-http工作原理总结\">#</a> 2.2 HTTP 工作原理总结</h5>\n<p>整个用户访问网站过程就是 DNS-TCP-HTTP</p>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/Lwnt1Bw.png\" alt=\"2.png\" /></p>\n<h4 id=\"3http请求request\"><a class=\"anchor\" href=\"#3http请求request\">#</a> 3.Http 请求 Request</h4>\n<p>HTTP 请求的一个例子：</p>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/InbGStI.png\" alt=\"4.png\" /></p>\n<h5 id=\"31-请求method\"><a class=\"anchor\" href=\"#31-请求method\">#</a> 3.1 请求 Method</h5>\n<p>客户端向服务端发送请求时，会根据不同的资源发送不同的请求方法 Method：</p>\n<ul>\n<li>GET：用于获取 URI 对应的资源；（比如看朋友圈)</li>\n<li>POST：用于提交请求，可以更新或者创建资源，是非幂等的；（发布朋友圈）</li>\n<li>PUT：用于向指定的 URI 传送更新资源，是幂等的；（更新朋友圈）</li>\n<li>DELETE：用于向指定的 URI 删除资源；（比如删朋友圈）</li>\n<li>HEAD：用于检查 (仅获取 Header 部分的内容)；</li>\n</ul>\n<p>一般创建对象时用 POST，更新对象时用 PUT；</p>\n<ul>\n<li>PUT 是幂等的，POST 是非幂等的；</li>\n<li>幂等：对于相同的输入，每次得到的结果都是相等的；</li>\n</ul>\n<h5 id=\"32-请求header\"><a class=\"anchor\" href=\"#32-请求header\">#</a> 3.2 请求 Header</h5>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>:authority: www.xuliangwei.com</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>:method: GET</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>:path: /</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>:scheme: https</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Accept: text/html,  <span class=\"token comment\"># 请求的类型</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Accept-Encoding: gzip, deflate  <span class=\"token comment\"># 是否进行压缩</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Accept-Language: zh-CN,zh<span class=\"token punctuation\">;</span><span class=\"token assign-left variable\">q</span><span class=\"token operator\">=</span><span class=\"token number\">0.9</span> <span class=\"token comment\"># 请求的语言</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>Cache-Control: max-age<span class=\"token operator\">=</span><span class=\"token number\">0</span> <span class=\"token comment\"># 缓存</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>Connection: keep-alive   <span class=\"token comment\"># TCP 长连接</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>Host: www.oldboyedu.com  <span class=\"token comment\"># 请求的域名</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>If-Modified-Since: Fri, 04 May <span class=\"token number\">201808</span>:13:44 GMT  <span class=\"token comment\"># 修改的时间</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>User-Agent: Mozilla/5.0  <span class=\"token comment\"># 请求浏览器的工具</span></pre></td></tr></table></figure><h5 id=\"33-请求connection\"><a class=\"anchor\" href=\"#33-请求connection\">#</a> <strong>3.3</strong> 请求 Connection</h5>\n<p>Http 请求中的长连接与短连接是什么：</p>\n<ul>\n<li>http1.0 协议使用的是短连接：建立一次 tcp 的连接，发起一次 http 的请求，结束，tcp 断开。</li>\n<li>http1.1 协议使用的是长连接：建立一次 tcp 的连接，发起多次 http 的请求，结束，tcp 断开。</li>\n<li>HTTP 协议版本参考下图，HTTP1.0 使用的是短连接，HTTP1.1 串行连接，与 HTTP2.0 并行连接。</li>\n</ul>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/bQERRRT.png\" alt=\"5.png\" /></p>\n<h4 id=\"4http响应response\"><a class=\"anchor\" href=\"#4http响应response\">#</a> 4.Http 响应 Response</h4>\n<p>HTTP 响应的一个例子：</p>\n<p><img loading=\"lazy\" data-src=\"https://wp-cdn.4ce.cn/v2/hX37K32.png\" alt=\"6.png\" /></p>\n<h5 id=\"41-响应header\"><a class=\"anchor\" href=\"#41-响应header\">#</a> 4.1 响应 Header</h5>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>HTTP/1.1 <span class=\"token number\">200</span> OK        <span class=\"token comment\"># 返回服务器的 http 协议，状态码</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Date: Fri, <span class=\"token number\">14</span> Sep <span class=\"token number\">2018</span> 09:14:28 GMT  <span class=\"token comment\"># 返回服务器的时间</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Server: Apache/2.4.6   <span class=\"token comment\"># 返回服务器使用的软件 Apache</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Connection: Keep-Alive <span class=\"token comment\"># TCP 长连接</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Keep-Alive: <span class=\"token assign-left variable\">timeout</span><span class=\"token operator\">=</span><span class=\"token number\">5</span>, <span class=\"token assign-left variable\">max</span><span class=\"token operator\">=</span><span class=\"token number\">100</span>  <span class=\"token comment\"># 长连接的超时时间</span></pre></td></tr></table></figure><h5 id=\"42-响应code\"><a class=\"anchor\" href=\"#42-响应code\">#</a> 4.2 响应 Code</h5>\n<p>http 响应状态码 Status-Code 以 3 位数字组成，用来标识该请求是否成功，比如是正常还是错误等。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Code</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">200</td>\n<td style=\"text-align:left\">表示成功客户端成功接收到了服务端返回的数据，这是最常见的状态码</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">206</td>\n<td style=\"text-align:left\">客户端发完请求后，服务端只是返回了部分数据，就会出现该状态码，例如当下载一个很大的文件时，在没有下载完成前就会出现该状态码</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">301</td>\n<td style=\"text-align:left\">永久重定向 (redirect) http--&gt;https</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">302</td>\n<td style=\"text-align:left\">临时重定向 (redirect)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">400</td>\n<td style=\"text-align:left\">客户端请求语法错误，服务端无法理解</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">401</td>\n<td style=\"text-align:left\">服务端开启了用户认证，而客户端没有提供正确的验证信息</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">403</td>\n<td style=\"text-align:left\">服务端不允许客户端访问，或者没有找到默认返回页面 (默认所有的 web 服务器返回的页面都是 index.html、也可以调整默认返回页面 app.html)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">404</td>\n<td style=\"text-align:left\">客户端请求的资源不存在 （路径写错了；服务端真的没有；）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">413</td>\n<td style=\"text-align:left\">客户端向服务端上传一个比较大的文件，并且文件大小超过了服务端的限制 1MB；</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">500</td>\n<td style=\"text-align:left\">服务端出现了内部错误，需要进行人为排查故障 （链接数据库类服务异常，会出现 500 错误）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">502</td>\n<td style=\"text-align:left\">服务器充当代理角色时，后端被代理的服务器不可用或者没有正常回应</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">503</td>\n<td style=\"text-align:left\">服务当前不可用，由于超载或系统维护，服务器暂时的无法处理客户端请求</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">504</td>\n<td style=\"text-align:left\">服务器充当代理角色时，后端的服务端没有按时返回数据，超时了</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"5http相关术语\"><a class=\"anchor\" href=\"#5http相关术语\">#</a> 5.Http 相关术语</h4>\n<h5 id=\"51-什么是pv\"><a class=\"anchor\" href=\"#51-什么是pv\">#</a> <strong>5.1</strong> 什么是 PV</h5>\n<p>PV 即页面浏览量：比如用户访问一个网站算 1 个 pv，刷新一次页面则累计 pv+1，如果多次打开或刷新同一页面则浏览量累计。</p>\n<h5 id=\"52-什么是uv\"><a class=\"anchor\" href=\"#52-什么是uv\">#</a> 5.2 什么是 UV</h5>\n<p>UV 即独立访客，访问网站的一台电脑客户端为一个访客。可以理解成访问某网站的电脑的数量。比如电脑、手机算 2 个 UV，无论访问多少次网站，最终 UV 数量就是 2。</p>\n<h5 id=\"53-什么是ip\"><a class=\"anchor\" href=\"#53-什么是ip\">#</a> 5.3 什么是 IP</h5>\n<p>IP 即独立公网 IP 数，是指 1 天内多少个独立的 IP 浏览了页面，比如你在家通过拨号上网访问某个网站，此时网站会记录你的公网 IP 地址。那如果你在公司和很多同事同时访问一个网站，那该网站会记录多少个公网 IP 呢？（看公司有多少个出口公网地址）</p>\n<h5 id=\"54-什么是并发\"><a class=\"anchor\" href=\"#54-什么是并发\">#</a> 5.4 什么是并发</h5>\n<p>并发：指的是同时，我们可以理解为一段时间内 (比如 10 秒)，网站支持同时访问的人数，假设 10s 并发值如果为 500 时，一天能达到多少 PV？ 500 * 6 * 60 * 24 =4320000</p>\n",
            "tags": [
                "Nginx"
            ]
        }
    ]
}